






Started logging.

<<<
Content-Length: 3206

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":32028,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\AppData\\Local\\Temp\\.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o\\sketch_nov2a","rootUri":"file:///c%3A/Users/banks/AppData/Local/Temp/.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o/sketch_nov2a","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/AppData/Local/Temp/.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o/sketch_nov2a","name":"sketch_nov2a"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 384

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Temp/.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o/sketch_nov2a/sketch_nov2a.ino","languageId":"cpp","version":1,"text":"void setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n"}}}Content-Length: 318

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Temp/.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o/sketch_nov2a/sketch_nov2a.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 219

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Temp/.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o/sketch_nov2a/sketch_nov2a.ino"}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 219

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Temp/.arduinoIDE-unsaved2021102-28372-1l3ykkb.b43o/sketch_nov2a/sketch_nov2a.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 403

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 403

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3130

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":6952,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 360

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":1,"text":"void setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 403

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 403

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":43},"end":{"line":1,"character":43}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":30}}}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":27}}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":27}}}
>>>
Content-Length: 38

{"id":7,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":27}}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":27}}}
>>>
Content-Length: 38

{"id":9,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":26}}}
>>>
Content-Length: 39

{"id":10,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":26}}}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":11}}}
>>>
Content-Length: 39

{"id":12,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":13}}}
>>>
Content-Length: 39

{"id":13,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":13},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":16,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":10}}}
>>>
Content-Length: 208

{"id":16,"result":[{"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}},"kind":1},{"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":4}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 344

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":2},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"rangeLength":0,"text":"#include <MultiFuncShield.h>"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'MultiFuncShield.h' file not found"}]},"jsonrpc":"2.0"}Content-Length: 219

{"id":19,"result":[{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 477

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"message":"'MultiFuncShield.h' file not found","severity":1,"code":"pp_file_not_found","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":20,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":3},"contentChanges":[{"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"rangeLength":0,"text":"\n"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'MultiFuncShield.h' file not found"}]},"jsonrpc":"2.0"}Content-Length: 404

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":1,"character":0},"end":{"line":4,"character":1}},"selectionRange":{"start":{"line":1,"character":5},"end":{"line":1,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":3}}}Content-Length: 224

{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":17}}}
>>>
Content-Length: 39

{"id":23,"result":null,"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 496

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"message":"'MultiFuncShield.h' file not found","severity":1,"code":"pp_file_not_found","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'MultiFuncShield.h' file not found"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":18}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 496

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"message":"'MultiFuncShield.h' file not found","severity":1,"code":"pp_file_not_found","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 475

{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"message":"'MultiFuncShield.h' file not found","severity":1,"code":"pp_file_not_found","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":16}}}
>>>
Content-Length: 39

{"id":29,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 496

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"message":"'MultiFuncShield.h' file not found","severity":1,"code":"pp_file_not_found","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":31,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":16}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 477

{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":28}},"message":"'MultiFuncShield.h' file not found","severity":1,"code":"pp_file_not_found","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":32,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":33,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":15}}}
>>>
Content-Length: 37

{"id":33,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":1},"end":{"line":9,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":34,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":4},"contentChanges":[{"range":{"start":{"line":0,"character":28},"end":{"line":1,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 219

{"id":35,"result":[{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":1}},"severity":1,"code":"extraneous_closing_brace","source":"clang","message":"Extraneous closing brace ('}')"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":5},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":28}},"rangeLength":28,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 404

{"id":36,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":5}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":1,"character":6}}}
>>>
Content-Length: 39

{"id":38,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":1},"end":{"line":8,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":39,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":1}}}
>>>
Content-Length: 39

{"id":40,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":41,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":1}}}
>>>
Content-Length: 37

{"id":41,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":42,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":1,"character":3}}}
>>>
Content-Length: 39

{"id":43,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":6},"contentChanges":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"rangeLength":0,"text":"#"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":44,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":4,"jsonrpc":"2.0"}Content-Length: 219

{"id":44,"result":[{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":7},"contentChanges":[{"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":2}},"rangeLength":0,"text":"#"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":45,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 532

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"},{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":2}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 219

{"id":45,"result":[{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 532

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"},{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":3}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 469

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":3}},"message":"Expected unqualified-id","severity":1,"code":"expected_unqualified_id","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":7}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":8},"contentChanges":[{"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":47,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 219

{"id":47,"result":[{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":9},"contentChanges":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":2}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":47}}Content-Length: 196

{"jsonrpc":"2.0","id":48,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 635

{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"message":"Unknown type name 'v'","severity":1,"code":"unknown_typename","source":"clang"},{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":3}},"message":"Expected unqualified-id","severity":1,"code":"expected_unqualified_id","source":"clang"}]}}}Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":9}}}
>>>
Content-Length: 404

{"id":48,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 532

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"},{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":2}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 37

{"id":49,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 37

{"id":50,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":10},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"rangeLength":0,"text":"\n"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":52,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 404

{"id":52,"result":[{"name":"setup","kind":12,"range":{"start":{"line":1,"character":0},"end":{"line":4,"character":1}},"selectionRange":{"start":{"line":1,"character":5},"end":{"line":1,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":53,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":10}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":11},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"rangeLength":0,"text":"\n"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 405

{"id":54,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":11}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":12},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"rangeLength":0,"text":"#"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":55,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":6,"jsonrpc":"2.0"}Content-Length: 405

{"id":55,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":56,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":13},"contentChanges":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"rangeLength":0,"text":"i"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":57,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":2}},"severity":1,"code":"pp_invalid_directive","source":"clang","message":"Invalid preprocessing directive"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":57,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":14},"contentChanges":[{"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":2}},"rangeLength":0,"text":"n"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":57}}Content-Length: 196

{"jsonrpc":"2.0","id":58,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":3}},"severity":1,"code":"pp_invalid_directive","source":"clang","message":"Invalid preprocessing directive"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":58,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":15},"contentChanges":[{"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"rangeLength":0,"text":"c"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":59,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":4}},"severity":1,"code":"pp_invalid_directive","source":"clang","message":"Invalid preprocessing directive"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":59,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":16},"contentChanges":[{"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"rangeLength":0,"text":"l"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":5}},"severity":1,"code":"pp_invalid_directive","source":"clang","message":"Invalid preprocessing directive"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":60,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":17},"contentChanges":[{"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":5}},"rangeLength":0,"text":"u"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":61,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":6}},"severity":1,"code":"pp_invalid_directive","source":"clang","message":"Invalid preprocessing directive"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":61,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":18},"contentChanges":[{"range":{"start":{"line":0,"character":6},"end":{"line":0,"character":6}},"rangeLength":0,"text":"d"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":62,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":7}},"severity":1,"code":"pp_invalid_directive","source":"clang","message":"Invalid preprocessing directive"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":62,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":19},"contentChanges":[{"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"rangeLength":0,"text":"e"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":63,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 405

{"id":63,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 384

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"pp_expects_filename","source":"clang","message":"Expected \"FILENAME\" or \u003cFILENAME\u003e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":20},"contentChanges":[{"range":{"start":{"line":0,"character":8},"end":{"line":0,"character":8}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 384

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"pp_expects_filename","source":"clang","message":"Expected \"FILENAME\" or \u003cFILENAME\u003e"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":64,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":21},"contentChanges":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"rangeLength":0,"text":"<"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 405

{"id":65,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":22},"contentChanges":[{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"rangeLength":0,"text":"M"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":65}}Content-Length: 196

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 583

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"expected","source":"clang","message":"Expected '\u003e'\n\nLibraryTests.ino.cpp:6:10: note: to match this '\u003c'"},{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":10}},"severity":3,"message":"To match this '\u003c'\n\nLibraryTests.ino.cpp:8:1: error: expected '\u003e'"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":66,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 583

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"expected","source":"clang","message":"Expected '\u003e'\n\nLibraryTests.ino.cpp:6:10: note: to match this '\u003c'"},{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":10}},"severity":3,"message":"To match this '\u003c'\n\nLibraryTests.ino.cpp:8:1: error: expected '\u003e'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":67,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":22}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":23},"contentChanges":[{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":68,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 405

{"id":68,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 583

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"expected","source":"clang","message":"Expected '\u003e'\n\nLibraryTests.ino.cpp:6:10: note: to match this '\u003c'"},{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":10}},"severity":3,"message":"To match this '\u003c'\n\nLibraryTests.ino.cpp:8:1: error: expected '\u003e'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 465

{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":10}},"message":"To match this '<'\n\nLibraryTests.ino.cpp:8:1: error: expected '>'","severity":3}]}}}
>>>
Content-Length: 37

{"id":69,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":23}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":24},"contentChanges":[{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"rangeLength":0,"text":"M"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":70,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 583

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"expected","source":"clang","message":"Expected '\u003e'\n\nLibraryTests.ino.cpp:6:10: note: to match this '\u003c'"},{"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":10}},"severity":3,"message":"To match this '\u003c'\n\nLibraryTests.ino.cpp:8:1: error: expected '\u003e'"}]},"jsonrpc":"2.0"}Content-Length: 405

{"id":70,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":71,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":11},"context":{"triggerKind":1}}}
>>>
Content-Length: 2616

{"id":71,"result":{"isIncomplete":false,"items":[{"label":" math.h\u003e","kind":17,"sortText":"3f000000math.h\u003e","filterText":"math.h\u003e","insertText":"math.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"math.h\u003e"}},{"label":" mm3dnow.h\u003e","kind":17,"sortText":"3f000000mm3dnow.h\u003e","filterText":"mm3dnow.h\u003e","insertText":"mm3dnow.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"mm3dnow.h\u003e"}},{"label":" mm_malloc.h\u003e","kind":17,"sortText":"3f000000mm_malloc.h\u003e","filterText":"mm_malloc.h\u003e","insertText":"mm_malloc.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"mm_malloc.h\u003e"}},{"label":" mmintrin.h\u003e","kind":17,"sortText":"3f000000mmintrin.h\u003e","filterText":"mmintrin.h\u003e","insertText":"mmintrin.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"mmintrin.h\u003e"}},{"label":" module.modulemap\u003e","kind":17,"sortText":"3f000000module.modulemap\u003e","filterText":"module.modulemap\u003e","insertText":"module.modulemap\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"module.modulemap\u003e"}},{"label":" movdirintrin.h\u003e","kind":17,"sortText":"3f000000movdirintrin.h\u003e","filterText":"movdirintrin.h\u003e","insertText":"movdirintrin.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"movdirintrin.h\u003e"}},{"label":" msa.h\u003e","kind":17,"sortText":"3f000000msa.h\u003e","filterText":"msa.h\u003e","insertText":"msa.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"msa.h\u003e"}},{"label":" mwaitxintrin.h\u003e","kind":17,"sortText":"3f000000mwaitxintrin.h\u003e","filterText":"mwaitxintrin.h\u003e","insertText":"mwaitxintrin.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"mwaitxintrin.h\u003e"}},{"label":" arm_mve.h\u003e","kind":17,"sortText":"80000000arm_mve.h\u003e","filterText":"arm_mve.h\u003e","insertText":"arm_mve.h\u003e","insertTextFormat":2,"textEdit":{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":11}},"newText":"arm_mve.h\u003e"}}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":72,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":72,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":24}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":25},"contentChanges":[{"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"rangeLength":0,"text":"u"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":8,"jsonrpc":"2.0"}Content-Length: 405

{"id":73,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":26},"contentChanges":[{"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"rangeLength":0,"text":"l"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":74,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 405

{"id":74,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":27},"contentChanges":[{"range":{"start":{"line":0,"character":13},"end":{"line":0,"character":13}},"rangeLength":0,"text":"t"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":75,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 405

{"id":75,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":76,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":27}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":9,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":39}}}
>>>
Content-Length: 39

{"id":77,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":13}}}
>>>
Content-Length: 39

{"id":78,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":79,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":0,"character":10}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":79}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":80,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 347

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":28},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":14}},"rangeLength":14,"text":"#include <MultiFuncShield.h>"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":81,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 405

{"id":81,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":82,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":28}}}Content-Length: 297

{"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":83,"result":[],"jsonrpc":"2.0"}Content-Length: 117

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"jsonrpc":"2.0","id":10,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":84,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":11}}}
>>>
Content-Length: 39

{"id":84,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":85,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 418

{"id":85,"result":[{"title":"Move function body to declaration","kind":"refactor","command":{"title":"Move function body to declaration","command":"clangd.applyTweak","arguments":[{"tweakID":"DefineInline","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server171682939/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":29},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":5,"character":1}},"rangeLength":61,"text":"void setup() {\n  // put your setup code here, to run once:\n  \n  MFS.initialize();    // initialize multi-function shield library\n  \n  MFS.writeLeds(LED_ALL, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_1 | LED_2, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_1 | LED_2, OFF);\n  \n  MFS.blinkLeds(LED_3 | LED_4, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_ALL, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_ALL, OFF);\n  MFS.writeLeds(LED_ALL, OFF);\n}"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":86,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 112

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":11,"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3130

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":6952,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 773

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":29,"text":"#include <MultiFuncShield.h>\n\nvoid setup() {\n  // put your setup code here, to run once:\n  \n  MFS.initialize();    // initialize multi-function shield library\n  \n  MFS.writeLeds(LED_ALL, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_1 | LED_2, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_1 | LED_2, OFF);\n  \n  MFS.blinkLeds(LED_3 | LED_4, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_ALL, ON);\n  delay(2000);\n  MFS.blinkLeds(LED_ALL, OFF);\n  MFS.writeLeds(LED_ALL, OFF);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n"}}}Content-Length: 296

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":19,"character":1},"end":{"line":19,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":29}}}Content-Length: 223

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":0}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 408

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":24,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}Content-Length: 223

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":16}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/32","percentage":3.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 209

{"id":4,"result":{"contents":{"kind":"markdown","value":"### macro `LED_1`  \n\n---\n```cpp\n#define LED_1 1\n```"},"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":21}}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":48}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":30},"contentChanges":[{"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":48}},"rangeLength":48,"text":""}]}}Content-Length: 195

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 408

{"id":6,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":24,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":31},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":22,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 195

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":7,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":23,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":31}}}
>>>
Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":32},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":13}},"rangeLength":0,"text":" "}]}}Content-Length: 195

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 408

{"id":9,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":23,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":33},"contentChanges":[{"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"rangeLength":0,"text":";"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}Content-Length: 196

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":10,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":23,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":21,"character":15},"end":{"line":21,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":33}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":34},"contentChanges":[{"range":{"start":{"line":21,"character":15},"end":{"line":22,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":12,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":34}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":35},"contentChanges":[{"range":{"start":{"line":21,"character":15},"end":{"line":22,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":13,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":16}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":35}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":36},"contentChanges":[{"range":{"start":{"line":21,"character":15},"end":{"line":21,"character":15}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 410

{"id":14,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":17}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":21,"character":16},"end":{"line":21,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":36}}}
>>>
Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":43},"end":{"line":4,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":16,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":43}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":37},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":43}},"rangeLength":43,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":18,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":17}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":38},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":19,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":17}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":20,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":38}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":39},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 410

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":2,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":17}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":39}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":29},"end":{"line":5,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":35},"end":{"line":7,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":24,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":29}}}
>>>
Content-Length: 216

{"id":24,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":31,"character":8},"end":{"line":31,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 181

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":36},"end":{"line":9,"character":36}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":36}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":20,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":36}}}
>>>
Content-Length: 39

{"id":28,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 3106

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":40},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":20,"character":0}},"rangeLength":432,"text":"#include <MultiFuncShield.h>\n\n/*\n\nFor more information and help, please visit https://www.cohesivecomputing.co.uk/hackatronics/arduino-multi-function-shield/part-3/\n\nAll our hackatronics projects are free for personal use, and there are many more\nin the pipeline. If you find our projects helpful or useful, please consider making\na small donation to our hackatronics fund using the donate buttons on our web pages.\nThank you.\n\n*/\n\nenum CountDownModeValues\n{\n  COUNTING_STOPPED,\n  COUNTING\n};\n\nbyte countDownMode = COUNTING_STOPPED;\n\nbyte tenths = 0;\nchar seconds = 0;\nchar minutes = 0;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n}\n\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n  byte btn = MFS.getButton();\n  \n  switch (countDownMode)\n  {\n    case COUNTING_STOPPED:\n        if (btn == BUTTON_1_SHORT_RELEASE && (minutes + seconds) > 0)\n        {\n          // start the timer\n          countDownMode = COUNTING;\n        }\n        else if (btn == BUTTON_1_LONG_PRESSED)\n        {\n          // reset the timer\n          tenths = 0;\n          seconds = 0;\n          minutes = 0;\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_2_PRESSED || btn == BUTTON_2_LONG_PRESSED)\n        {\n          minutes++;\n          if (minutes > 60)\n          {\n            minutes = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_3_PRESSED || btn == BUTTON_3_LONG_PRESSED)\n        {\n          seconds += 10;\n          if (seconds >= 60)\n          {\n            seconds = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        break;\n        \n    case COUNTING:\n        if (btn == BUTTON_1_SHORT_RELEASE || btn == BUTTON_1_LONG_RELEASE)\n        {\n          // stop the timer\n          countDownMode = COUNTING_STOPPED;\n        }\n        else\n        {\n          // continue counting down\n          tenths++;\n          \n          if (tenths == 10)\n          {\n            tenths = 0;\n            seconds--;\n            \n            if (seconds < 0 && minutes > 0)\n            {\n              seconds = 59;\n              minutes--;\n            }\n            \n            if (minutes == 0 && seconds == 0)\n            {\n              // timer has reached 0, so sound the alarm\n              MFS.beep(50, 50, 3);  // beep 3 times, 500 milliseconds on / 500 off\n              countDownMode = COUNTING_STOPPED;\n            }\n            \n            MFS.write(minutes*100 + seconds);\n          }\n          delay(100);\n        }\n        break;\n  }\n}\n"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 114

{"id":29,"error":{"code":-32602,"message":"trying to get AST for non-added document","data":null},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3130

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":6952,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 3009

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":40,"text":"#include <MultiFuncShield.h>\n\n/*\n\nFor more information and help, please visit https://www.cohesivecomputing.co.uk/hackatronics/arduino-multi-function-shield/part-3/\n\nAll our hackatronics projects are free for personal use, and there are many more\nin the pipeline. If you find our projects helpful or useful, please consider making\na small donation to our hackatronics fund using the donate buttons on our web pages.\nThank you.\n\n*/\n\nenum CountDownModeValues\n{\n  COUNTING_STOPPED,\n  COUNTING\n};\n\nbyte countDownMode = COUNTING_STOPPED;\n\nbyte tenths = 0;\nchar seconds = 0;\nchar minutes = 0;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n}\n\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n  byte btn = MFS.getButton();\n  \n  switch (countDownMode)\n  {\n    case COUNTING_STOPPED:\n        if (btn == BUTTON_1_SHORT_RELEASE && (minutes + seconds) > 0)\n        {\n          // start the timer\n          countDownMode = COUNTING;\n        }\n        else if (btn == BUTTON_1_LONG_PRESSED)\n        {\n          // reset the timer\n          tenths = 0;\n          seconds = 0;\n          minutes = 0;\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_2_PRESSED || btn == BUTTON_2_LONG_PRESSED)\n        {\n          minutes++;\n          if (minutes > 60)\n          {\n            minutes = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_3_PRESSED || btn == BUTTON_3_LONG_PRESSED)\n        {\n          seconds += 10;\n          if (seconds >= 60)\n          {\n            seconds = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        break;\n        \n    case COUNTING:\n        if (btn == BUTTON_1_SHORT_RELEASE || btn == BUTTON_1_LONG_RELEASE)\n        {\n          // stop the timer\n          countDownMode = COUNTING_STOPPED;\n        }\n        else\n        {\n          // continue counting down\n          tenths++;\n          \n          if (tenths == 10)\n          {\n            tenths = 0;\n            seconds--;\n            \n            if (seconds < 0 && minutes > 0)\n            {\n              seconds = 59;\n              minutes--;\n            }\n            \n            if (minutes == 0 && seconds == 0)\n            {\n              // timer has reached 0, so sound the alarm\n              MFS.beep(50, 50, 3);  // beep 3 times, 500 milliseconds on / 500 off\n              countDownMode = COUNTING_STOPPED;\n            }\n            \n            MFS.write(minutes*100 + seconds);\n          }\n          delay(100);\n        }\n        break;\n  }\n}\n"}}}Content-Length: 195

{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":40}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 1795

{"id":1,"result":[{"name":"CountDownModeValues","kind":10,"range":{"start":{"line":13,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":24}},"children":[{"name":"COUNTING_STOPPED","kind":22,"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}},"selectionRange":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}}},{"name":"COUNTING","kind":22,"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}},"selectionRange":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}}}]},{"name":"countDownMode","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":37}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":15}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":16}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":16}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":25,"character":0},"end":{"line":31,"character":1}},"selectionRange":{"start":{"line":25,"character":5},"end":{"line":25,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":34,"character":0},"end":{"line":110,"character":1}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/31","percentage":12.903225806451612,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/31","percentage":16.129032258064516,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/31","percentage":16.129032258064516,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/31","percentage":19.35483870967742,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/31","percentage":19.35483870967742,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/31","percentage":22.580645161290324,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/31","percentage":22.580645161290324,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/31","percentage":25.806451612903224,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/31","percentage":25.806451612903224,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/31","percentage":29.032258064516128,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/31","percentage":29.032258064516128,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/31","percentage":32.25806451612903,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/31","percentage":32.25806451612903,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/31","percentage":35.483870967741936,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/31","percentage":35.483870967741936,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/31","percentage":38.70967741935484,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/31","percentage":38.70967741935484,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/31","percentage":41.935483870967744,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/31","percentage":41.935483870967744,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/31","percentage":45.16129032258065,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/31","percentage":45.16129032258065,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/31","percentage":48.38709677419355,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/31","percentage":48.38709677419355,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/31","percentage":51.61290322580645,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/31","percentage":51.61290322580645,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/31","percentage":54.83870967741935,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/31","percentage":58.064516129032256,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/31","percentage":58.064516129032256,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/31","percentage":61.29032258064516,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/31","percentage":61.29032258064516,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/31","percentage":64.51612903225806,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/31","percentage":64.51612903225806,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/31","percentage":67.74193548387096,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/31","percentage":67.74193548387096,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/31","percentage":70.96774193548387,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/31","percentage":70.96774193548387,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/31","percentage":74.19354838709677,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/31","percentage":74.19354838709677,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/31","percentage":77.41935483870968,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/31","percentage":80.64516129032258,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/31","percentage":83.87096774193549,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/31","percentage":87.09677419354838,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/31","percentage":90.3225806451613,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/31","percentage":93.54838709677419,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/31","percentage":96.7741935483871,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":10}}}
>>>
Content-Length: 38

{"id":2,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":37,"character":8}}}
>>>
Content-Length: 304

{"id":3,"result":{"contents":{"kind":"markdown","value":"### variable `btn`  \n\n---\nType: `byte`  \nput your main code here, to run repeatedly:  \n\n---\n```cpp\n// In loop\nbyte btn = MFS.getButton()\n```"},"range":{"start":{"line":37,"character":7},"end":{"line":37,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":25}}}
>>>
Content-Length: 274

{"id":4,"result":{"contents":{"kind":"markdown","value":"### macro `BUTTON_1_SHORT_RELEASE`  \n\n---\n```cpp\n#define BUTTON_1_SHORT_RELEASE (1 | BUTTON_SHORT_RELEASE_IND)\n```"},"range":{"start":{"line":42,"character":19},"end":{"line":42,"character":41}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":29}}}
>>>
Content-Length: 274

{"id":5,"result":{"contents":{"kind":"markdown","value":"### macro `BUTTON_1_SHORT_RELEASE`  \n\n---\n```cpp\n#define BUTTON_1_SHORT_RELEASE (1 | BUTTON_SHORT_RELEASE_IND)\n```"},"range":{"start":{"line":42,"character":19},"end":{"line":42,"character":41}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":27,"character":43}}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":43}}}
>>>
Content-Length: 38

{"id":7,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":98}}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":77}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":10,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":77}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":4,"character":77},"end":{"line":4,"character":77}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":16,"character":10}}}
>>>
Content-Length: 297

{"id":12,"result":{"contents":{"kind":"markdown","value":"### enumerator `COUNTING`  \n\n---\nType: `enum CountDownModeValues`  \nValue = `1`  \n\n---\n```cpp\n// In CountDownModeValues\nCOUNTING\n```"},"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":76,"character":56}}}
>>>
Content-Length: 272

{"id":13,"result":{"contents":{"kind":"markdown","value":"### macro `BUTTON_1_LONG_RELEASE`  \n\n---\n```cpp\n#define BUTTON_1_LONG_RELEASE (1 | BUTTON_LONG_RELEASE_IND)\n```"},"range":{"start":{"line":76,"character":52},"end":{"line":76,"character":73}}},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":84,"character":19},"end":{"line":84,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":79,"character":43},"end":{"line":79,"character":43}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":14}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":15,"character":14}}}
>>>
Content-Length: 313

{"id":17,"result":{"contents":{"kind":"markdown","value":"### enumerator `COUNTING_STOPPED`  \n\n---\nType: `enum CountDownModeValues`  \nValue = `0`  \n\n---\n```cpp\n// In CountDownModeValues\nCOUNTING_STOPPED\n```"},"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":21,"character":14}}}
>>>
Content-Length: 39

{"id":18,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":6}}}
>>>
Content-Length: 266

{"id":19,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":6}}}
>>>
Content-Length: 123

{"id":20,"result":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":8}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":21,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":5}}}
>>>
Content-Length: 266

{"id":22,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":13}}}
>>>
Content-Length: 326

{"id":24,"result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud)\n```"},"range":{"start":{"line":30,"character":9},"end":{"line":30,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":25,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":13}}}
>>>
Content-Length: 239

{"id":25,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","range":{"start":{"line":120,"character":9},"end":{"line":120,"character":14}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5669

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include <inttypes.h>\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to > 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) < 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) < 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE>256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE>256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}}}Content-Length: 202

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}}
>>>
Content-Length: 210

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":26,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":19}}}
>>>
Content-Length: 239

{"id":26,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","range":{"start":{"line":120,"character":9},"end":{"line":120,"character":14}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5669

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include <inttypes.h>\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to > 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) < 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) < 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE>256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE>256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}}}Content-Length: 202

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}}
>>>
Content-Length: 210

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":30,"character":19}}}
>>>
Content-Length: 327

{"id":27,"result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud)\n```"},"range":{"start":{"line":30,"character":19},"end":{"line":30,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":27,"character":57}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":27,"character":57},"end":{"line":27,"character":57}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":30,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":26,"character":14}}}
>>>
Content-Length: 39

{"id":30,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":31,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":35,"character":26}}}
>>>
Content-Length: 39

{"id":31,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":37,"character":26}}}
>>>
Content-Length: 327

{"id":32,"result":{"contents":{"kind":"markdown","value":"### instance-method `getButton`  \n\n---\n→ `byte`  \nPulls a button action from the button queue.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: byte getButton()\n```"},"range":{"start":{"line":37,"character":17},"end":{"line":37,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":37,"character":27}}}
>>>
Content-Length: 327

{"id":33,"result":{"contents":{"kind":"markdown","value":"### instance-method `getButton`  \n\n---\n→ `byte`  \nPulls a button action from the button queue.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: byte getButton()\n```"},"range":{"start":{"line":37,"character":27},"end":{"line":37,"character":28}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":39,"character":14}}}
>>>
Content-Length: 283

{"id":34,"result":{"contents":{"kind":"markdown","value":"### variable `countDownMode`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\nbyte countDownMode = COUNTING_STOPPED\n```"},"range":{"start":{"line":39,"character":10},"end":{"line":39,"character":23}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":39,"character":15}}}
>>>
Content-Length: 482

{"id":35,"result":[{"range":{"start":{"line":19,"character":5},"end":{"line":19,"character":18}},"kind":1},{"range":{"start":{"line":39,"character":10},"end":{"line":39,"character":23}},"kind":2},{"range":{"start":{"line":45,"character":10},"end":{"line":45,"character":23}},"kind":3},{"range":{"start":{"line":79,"character":10},"end":{"line":79,"character":23}},"kind":3},{"range":{"start":{"line":101,"character":14},"end":{"line":101,"character":27}},"kind":3}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":39,"character":10},"end":{"line":39,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":36,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":37,"character":9}}}
>>>
Content-Length: 305

{"id":37,"result":{"contents":{"kind":"markdown","value":"### variable `btn`  \n\n---\nType: `byte`  \nput your main code here, to run repeatedly:  \n\n---\n```cpp\n// In loop\nbyte btn = MFS.getButton()\n```"},"range":{"start":{"line":37,"character":7},"end":{"line":37,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":38,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":37,"character":9}}}
>>>
Content-Length: 836

{"id":38,"result":[{"range":{"start":{"line":37,"character":7},"end":{"line":37,"character":10}},"kind":1},{"range":{"start":{"line":42,"character":12},"end":{"line":42,"character":15}},"kind":2},{"range":{"start":{"line":47,"character":17},"end":{"line":47,"character":20}},"kind":2},{"range":{"start":{"line":55,"character":17},"end":{"line":55,"character":20}},"kind":2},{"range":{"start":{"line":55,"character":44},"end":{"line":55,"character":47}},"kind":2},{"range":{"start":{"line":64,"character":17},"end":{"line":64,"character":20}},"kind":2},{"range":{"start":{"line":64,"character":44},"end":{"line":64,"character":47}},"kind":2},{"range":{"start":{"line":76,"character":12},"end":{"line":76,"character":15}},"kind":2},{"range":{"start":{"line":76,"character":45},"end":{"line":76,"character":48}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":37,"character":7},"end":{"line":37,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":39,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":31}}}
>>>
Content-Length: 275

{"id":40,"result":{"contents":{"kind":"markdown","value":"### macro `BUTTON_1_SHORT_RELEASE`  \n\n---\n```cpp\n#define BUTTON_1_SHORT_RELEASE (1 | BUTTON_SHORT_RELEASE_IND)\n```"},"range":{"start":{"line":42,"character":19},"end":{"line":42,"character":41}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":41,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":32}}}
>>>
Content-Length: 37

{"id":41,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":42,"character":32},"end":{"line":42,"character":32}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 428

{"id":42,"result":[{"title":"Expand macro 'BUTTON_1_SHORT_RELEASE'","kind":"refactor","command":{"title":"Expand macro 'BUTTON_1_SHORT_RELEASE'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server550571091/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":49,"character":32},"end":{"line":49,"character":32}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":45,"character":31}}}
>>>
Content-Length: 298

{"id":43,"result":{"contents":{"kind":"markdown","value":"### enumerator `COUNTING`  \n\n---\nType: `enum CountDownModeValues`  \nValue = `1`  \n\n---\n```cpp\n// In CountDownModeValues\nCOUNTING\n```"},"range":{"start":{"line":45,"character":26},"end":{"line":45,"character":34}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":44,"character":23}}}
>>>
Content-Length: 39

{"id":44,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":45,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":45,"character":34}}}
>>>
Content-Length: 298

{"id":45,"result":{"contents":{"kind":"markdown","value":"### enumerator `COUNTING`  \n\n---\nType: `enum CountDownModeValues`  \nValue = `1`  \n\n---\n```cpp\n// In CountDownModeValues\nCOUNTING\n```"},"range":{"start":{"line":45,"character":26},"end":{"line":45,"character":34}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":46,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":53}}}
>>>
Content-Length: 256

{"id":46,"result":{"contents":{"kind":"markdown","value":"### variable `minutes`  \n\n---\nType: `char`  \nValue = `0`  \n\n---\n```cpp\nchar minutes = 0\n```"},"range":{"start":{"line":42,"character":46},"end":{"line":42,"character":53}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":50}}}
>>>
Content-Length: 256

{"id":47,"result":{"contents":{"kind":"markdown","value":"### variable `minutes`  \n\n---\nType: `char`  \nValue = `0`  \n\n---\n```cpp\nchar minutes = 0\n```"},"range":{"start":{"line":42,"character":46},"end":{"line":42,"character":53}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":42,"character":59}}}
>>>
Content-Length: 256

{"id":48,"result":{"contents":{"kind":"markdown","value":"### variable `seconds`  \n\n---\nType: `char`  \nValue = `0`  \n\n---\n```cpp\nchar seconds = 0\n```"},"range":{"start":{"line":42,"character":56},"end":{"line":42,"character":63}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":49,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":45,"character":18}}}
>>>
Content-Length: 283

{"id":49,"result":{"contents":{"kind":"markdown","value":"### variable `countDownMode`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\nbyte countDownMode = COUNTING_STOPPED\n```"},"range":{"start":{"line":45,"character":10},"end":{"line":45,"character":23}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":50,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":47,"character":30}}}
>>>
Content-Length: 272

{"id":50,"result":{"contents":{"kind":"markdown","value":"### macro `BUTTON_1_LONG_PRESSED`  \n\n---\n```cpp\n#define BUTTON_1_LONG_PRESSED (1 | BUTTON_LONG_PRESSED_IND)\n```"},"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":45}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":51,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":49,"character":28}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":52,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":49,"character":28},"end":{"line":49,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":52,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":53,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":51,"character":20}}}
>>>
Content-Length: 39

{"id":53,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":54,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":53,"character":13}}}
>>>
Content-Length: 314

{"id":54,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":53,"character":10},"end":{"line":53,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":53,"character":14}}}
>>>
Content-Length: 314

{"id":55,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":53,"character":14},"end":{"line":53,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":56,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":53,"character":16}}}
>>>
Content-Length: 482

{"id":56,"result":[{"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":11}},"kind":1},{"range":{"start":{"line":53,"character":14},"end":{"line":53,"character":19}},"kind":1},{"range":{"start":{"line":62,"character":14},"end":{"line":62,"character":19}},"kind":1},{"range":{"start":{"line":71,"character":14},"end":{"line":71,"character":19}},"kind":1},{"range":{"start":{"line":104,"character":16},"end":{"line":104,"character":21}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":53,"character":16},"end":{"line":53,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":57,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":58,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":53,"character":16}}}
>>>
Content-Length: 221

{"id":58,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 197

{"jsonrpc":"2.0","id":59,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 13263

{"id":59,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":451,"character":14}}}
>>>
Content-Length: 342

{"id":60,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":451,"character":7},"end":{"line":451,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":61,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":461,"character":18}}}
>>>
Content-Length: 367

{"id":61,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \nPassed as textstring  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":461,"character":11},"end":{"line":461,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":455,"character":36}}}
>>>
Content-Length: 303

{"id":62,"result":{"contents":{"kind":"markdown","value":"### variable `DISPLAY_OVERFLOW_ERROR`  \n\n---\nType: `const char`  \nValue = `69`  \n\n---\n```cpp\nconst char DISPLAY_OVERFLOW_ERROR = 'E'\n```"},"range":{"start":{"line":455,"character":21},"end":{"line":455,"character":43}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":3}}}
>>>
Content-Length: 39

{"id":63,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":64,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":5}}}
>>>
Content-Length: 425

{"id":64,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":65,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":5}}}
>>>
Content-Length: 483

{"id":65,"result":[{"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}},"kind":1},{"range":{"start":{"line":461,"character":4},"end":{"line":461,"character":9}},"kind":1},{"range":{"start":{"line":483,"character":4},"end":{"line":483,"character":9}},"kind":1},{"range":{"start":{"line":499,"character":2},"end":{"line":499,"character":7}},"kind":1},{"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":460,"character":12}}}
>>>
Content-Length: 342

{"id":66,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":460,"character":4},"end":{"line":460,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":67,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":5}}}
>>>
Content-Length: 221

{"id":67,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":7}}}
>>>
Content-Length: 425

{"id":68,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":468,"character":14}}}
>>>
Content-Length: 39

{"id":69,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":475,"character":11}}}
>>>
Content-Length: 342

{"id":70,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":475,"character":6},"end":{"line":475,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":475,"character":11}}}
>>>
Content-Length: 759

{"id":71,"result":[{"range":{"start":{"line":451,"character":7},"end":{"line":451,"character":18}},"kind":1},{"range":{"start":{"line":455,"character":4},"end":{"line":455,"character":15}},"kind":1},{"range":{"start":{"line":456,"character":10},"end":{"line":456,"character":21}},"kind":1},{"range":{"start":{"line":460,"character":4},"end":{"line":460,"character":15}},"kind":1},{"range":{"start":{"line":461,"character":11},"end":{"line":461,"character":22}},"kind":1},{"range":{"start":{"line":475,"character":6},"end":{"line":475,"character":17}},"kind":1},{"range":{"start":{"line":480,"character":6},"end":{"line":480,"character":17}},"kind":1},{"range":{"start":{"line":483,"character":11},"end":{"line":483,"character":22}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":72,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":475,"character":17}}}
>>>
Content-Length: 220

{"id":72,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":451,"character":7},"end":{"line":451,"character":18}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":73,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":451,"character":16}}}
>>>
Content-Length: 342

{"id":73,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":451,"character":7},"end":{"line":451,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":74,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":455,"character":39}}}
>>>
Content-Length: 303

{"id":74,"result":{"contents":{"kind":"markdown","value":"### variable `DISPLAY_OVERFLOW_ERROR`  \n\n---\nType: `const char`  \nValue = `69`  \n\n---\n```cpp\nconst char DISPLAY_OVERFLOW_ERROR = 'E'\n```"},"range":{"start":{"line":455,"character":21},"end":{"line":455,"character":43}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":458,"character":22}}}
>>>
Content-Length: 39

{"id":75,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":455,"character":28}}}
>>>
Content-Length: 303

{"id":76,"result":{"contents":{"kind":"markdown","value":"### variable `DISPLAY_OVERFLOW_ERROR`  \n\n---\nType: `const char`  \nValue = `69`  \n\n---\n```cpp\nconst char DISPLAY_OVERFLOW_ERROR = 'E'\n```"},"range":{"start":{"line":455,"character":21},"end":{"line":455,"character":43}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":10}}}
>>>
Content-Length: 427

{"id":77,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":483,"character":10},"end":{"line":483,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":7}}}
>>>
Content-Length: 483

{"id":78,"result":[{"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}},"kind":1},{"range":{"start":{"line":461,"character":4},"end":{"line":461,"character":9}},"kind":1},{"range":{"start":{"line":483,"character":4},"end":{"line":483,"character":9}},"kind":1},{"range":{"start":{"line":499,"character":2},"end":{"line":499,"character":7}},"kind":1},{"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":79,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":7}}}
>>>
Content-Length: 221

{"id":79,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":510,"character":14}}}
>>>
Content-Length: 275

{"id":80,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":510,"character":10},"end":{"line":510,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":510,"character":13}}}
>>>
Content-Length: 275

{"id":81,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":510,"character":10},"end":{"line":510,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":40}}}
>>>
Content-Length: 275

{"id":82,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":40},"end":{"line":504,"character":44}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":33}}}
>>>
Content-Length: 275

{"id":83,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":28},"end":{"line":504,"character":33}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":84,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":56}}}
>>>
Content-Length: 295

{"id":84,"result":{"contents":{"kind":"markdown","value":"### param `rightJustify`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte rightJustify = 0\n```"},"range":{"start":{"line":504,"character":51},"end":{"line":504,"character":63}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":3,"character":21}}}
>>>
Content-Length: 279

{"id":85,"result":{"contents":{"kind":"markdown","value":"### macro `BUTTON_SAMPLE_INTERVAL`  \n\n---\n```cpp\n#define BUTTON_SAMPLE_INTERVAL (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\n```"},"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":30}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":27}}}
>>>
Content-Length: 39

{"id":86,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":10,"character":51}}}
>>>
Content-Length: 221

{"id":87,"result":{"contents":{"kind":"markdown","value":"### macro `LED_3_PIN`  \n\n---\n```cpp\n#define LED_3_PIN 11\n```"},"range":{"start":{"line":10,"character":42},"end":{"line":10,"character":51}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":10,"character":41}}}
>>>
Content-Length: 235

{"id":88,"result":{"contents":{"kind":"markdown","value":"### `expression`  \n\n---\nType: `const byte [4]`  \nValue = `{13, 12, 11, 10}`"},"range":{"start":{"line":10,"character":40},"end":{"line":10,"character":41}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":44,"character":18}}}
>>>
Content-Length: 301

{"id":89,"result":{"contents":{"kind":"markdown","value":"### function `AsciiToSegmentValue`  \n\n---\n→ `byte`  \nParameters:  \n- `byte ascii`\n\n---\n```cpp\nbyte AsciiToSegmentValue(byte ascii)\n```"},"range":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":90,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":63,"character":13}}}
>>>
Content-Length: 39

{"id":90,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":91,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":58,"character":13}}}
>>>
Content-Length: 253

{"id":91,"result":{"contents":{"kind":"markdown","value":"### variable `buttonBit`  \n\n---\nType: `uint8_t [3]`  \n\n---\n```cpp\nuint8_t buttonBit[3]\n```"},"range":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":3,"character":35}}}
>>>
Content-Length: 39

{"id":92,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":93,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":28,"character":10}}}
>>>
Content-Length: 220

{"id":93,"result":{"contents":{"kind":"markdown","value":"### type-alias `byte`  \n\n---\n```cpp\ntypedef uint8_t byte\n```"},"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":56,"character":11}}}
>>>
Content-Length: 39

{"id":94,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":95,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":88,"character":8}}}
>>>
Content-Length: 310

{"id":95,"result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":127,"character":33}}}
>>>
Content-Length: 39

{"id":96,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":97,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":327,"character":37}}}
>>>
Content-Length: 39

{"id":97,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":333,"character":24}}}
>>>
Content-Length: 39

{"id":98,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":99,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":340,"character":17}}}
>>>
Content-Length: 232

{"id":99,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":340,"character":5},"end":{"line":340,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":455,"character":10}}}
>>>
Content-Length: 343

{"id":100,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":455,"character":4},"end":{"line":455,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":19}}}
>>>
Content-Length: 368

{"id":101,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \nPassed as textstring  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":456,"character":10},"end":{"line":456,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":102,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":7}}}
>>>
Content-Length: 222

{"id":102,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":7}}}
>>>
Content-Length: 426

{"id":103,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":7}}}
>>>
Content-Length: 426

{"id":104,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":455,"character":10}}}
>>>
Content-Length: 343

{"id":105,"result":{"contents":{"kind":"markdown","value":"### variable `displayText`  \n\n---\nType: `char [5]`  \nValue = `{32, 32, 32, 32, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nchar displayText[5] = {' ', ' ', ' ', ' ', 0}\n```"},"range":{"start":{"line":455,"character":4},"end":{"line":455,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":106,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":455,"character":10}}}
>>>
Content-Length: 760

{"id":106,"result":[{"range":{"start":{"line":451,"character":7},"end":{"line":451,"character":18}},"kind":1},{"range":{"start":{"line":455,"character":4},"end":{"line":455,"character":15}},"kind":1},{"range":{"start":{"line":456,"character":10},"end":{"line":456,"character":21}},"kind":1},{"range":{"start":{"line":460,"character":4},"end":{"line":460,"character":15}},"kind":1},{"range":{"start":{"line":461,"character":11},"end":{"line":461,"character":22}},"kind":1},{"range":{"start":{"line":475,"character":6},"end":{"line":475,"character":17}},"kind":1},{"range":{"start":{"line":480,"character":6},"end":{"line":480,"character":17}},"kind":1},{"range":{"start":{"line":483,"character":11},"end":{"line":483,"character":22}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":107,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":6}}}
>>>
Content-Length: 484

{"id":107,"result":[{"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}},"kind":1},{"range":{"start":{"line":461,"character":4},"end":{"line":461,"character":9}},"kind":1},{"range":{"start":{"line":483,"character":4},"end":{"line":483,"character":9}},"kind":1},{"range":{"start":{"line":499,"character":2},"end":{"line":499,"character":7}},"kind":1},{"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":108,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":456,"character":6}}}
>>>
Content-Length: 222

{"id":108,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":34}}}
>>>
Content-Length: 280

{"id":109,"result":{"contents":{"kind":"markdown","value":"### variable `pBuf`  \n\n---\nType: `byte *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte *pBuf = displayBuf\n```"},"range":{"start":{"line":506,"character":34},"end":{"line":506,"character":38}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":110,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":512,"character":17}}}
>>>
Content-Length: 287

{"id":110,"result":{"contents":{"kind":"markdown","value":"### variable `offset`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte offset = 0\n```"},"range":{"start":{"line":512,"character":16},"end":{"line":512,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":111,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":518,"character":11}}}
>>>
Content-Length: 322

{"id":111,"result":{"contents":{"kind":"markdown","value":"### variable `displayBuf`  \n\n---\nType: `byte [4]`  \nValue = `{0, 0, 0, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte displayBuf[] = {0, 0, 0, 0}\n```"},"range":{"start":{"line":518,"character":8},"end":{"line":518,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":518,"character":12}}}
>>>
Content-Length: 322

{"id":112,"result":{"contents":{"kind":"markdown","value":"### variable `displayBuf`  \n\n---\nType: `byte [4]`  \nValue = `{0, 0, 0, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte displayBuf[] = {0, 0, 0, 0}\n```"},"range":{"start":{"line":518,"character":8},"end":{"line":518,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":518,"character":51}}}
>>>
Content-Length: 40

{"id":113,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":114,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":518,"character":49}}}
>>>
Content-Length: 40

{"id":114,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":115,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":36}}}
>>>
Content-Length: 305

{"id":115,"result":{"contents":{"kind":"markdown","value":"### function `AsciiToSegmentValue`  \n\n---\n→ `byte`  \nParameters:  \n- `byte ascii`\n\n---\n```cpp\nbyte AsciiToSegmentValue(byte ascii)\n```"},"range":{"start":{"line":522,"character":26},"end":{"line":522,"character":45}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":116,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":36}}}
>>>
Content-Length: 397

{"id":116,"result":[{"range":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}},"kind":1},{"range":{"start":{"line":522,"character":26},"end":{"line":522,"character":45}},"kind":1},{"range":{"start":{"line":528,"character":24},"end":{"line":528,"character":43}},"kind":1},{"range":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":117,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":36}}}
>>>
Content-Length: 221

{"id":117,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":118,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":957,"character":52}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":118}}
>>>
Content-Length: 40

{"id":118,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":29}}}
>>>
Content-Length: 471

{"id":119,"result":{"contents":{"kind":"markdown","value":"### variable `SEGMENT_MAP_DIGIT`  \n\n---\nType: `const byte [10]`  \nValue = `{192, 249, 164, 176, 153, 146, 130, 248, 128, 144}`  \nSegment byte maps for numbers 0 to 9  \n\n---\n```cpp\nconst byte SEGMENT_MAP_DIGIT[] = {192, 249, 164, 176, 153,\n                                  146, 130, 248, 128, 144}\n```"},"range":{"start":{"line":964,"character":19},"end":{"line":964,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":966,"character":22}}}
>>>
Content-Length: 40

{"id":120,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 196

{"jsonrpc":"2.0","id":121,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 15044

{"id":121,"result":[{"name":"MultiFuncShield","kind":5,"range":{"start":{"line":63,"character":0},"end":{"line":212,"character":1}},"selectionRange":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}},"children":[{"name":"userInterrupt","kind":8,"range":{"start":{"line":68,"character":4},"end":{"line":68,"character":34}},"selectionRange":{"start":{"line":68,"character":11},"end":{"line":68,"character":24}}},{"name":"initialize","kind":6,"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":21}},"selectionRange":{"start":{"line":71,"character":9},"end":{"line":71,"character":19}}},{"name":"isrCallBack","kind":6,"range":{"start":{"line":74,"character":4},"end":{"line":74,"character":22}},"selectionRange":{"start":{"line":74,"character":9},"end":{"line":74,"character":20}}},{"name":"setTimer","kind":6,"range":{"start":{"line":77,"character":4},"end":{"line":77,"character":45}},"selectionRange":{"start":{"line":77,"character":9},"end":{"line":77,"character":17}}},{"name":"getTimer","kind":6,"range":{"start":{"line":80,"character":4},"end":{"line":80,"character":28}},"selectionRange":{"start":{"line":80,"character":18},"end":{"line":80,"character":26}}},{"name":"wait","kind":6,"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":40}},"selectionRange":{"start":{"line":83,"character":9},"end":{"line":83,"character":13}}},{"name":"write","kind":6,"range":{"start":{"line":86,"character":4},"end":{"line":86,"character":60}},"selectionRange":{"start":{"line":86,"character":9},"end":{"line":86,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":87,"character":4},"end":{"line":87,"character":27}},"selectionRange":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":88,"character":4},"end":{"line":88,"character":52}},"selectionRange":{"start":{"line":88,"character":9},"end":{"line":88,"character":14}}},{"name":"manualDisplayRefresh","kind":6,"range":{"start":{"line":92,"character":4},"end":{"line":92,"character":31}},"selectionRange":{"start":{"line":92,"character":9},"end":{"line":92,"character":29}}},{"name":"blinkDisplay","kind":6,"range":{"start":{"line":95,"character":4},"end":{"line":97,"character":21}},"selectionRange":{"start":{"line":95,"character":9},"end":{"line":95,"character":21}}},{"name":"setDisplayBrightness","kind":6,"range":{"start":{"line":99,"character":4},"end":{"line":99,"character":41}},"selectionRange":{"start":{"line":99,"character":9},"end":{"line":99,"character":29}}},{"name":"writeLeds","kind":6,"range":{"start":{"line":102,"character":4},"end":{"line":104,"character":20}},"selectionRange":{"start":{"line":102,"character":9},"end":{"line":102,"character":18}}},{"name":"blinkLeds","kind":6,"range":{"start":{"line":107,"character":4},"end":{"line":109,"character":20}},"selectionRange":{"start":{"line":107,"character":9},"end":{"line":107,"character":18}}},{"name":"beep","kind":6,"range":{"start":{"line":112,"character":4},"end":{"line":112,"character":169}},"selectionRange":{"start":{"line":112,"character":9},"end":{"line":112,"character":13}}},{"name":"setBeepOffPeriod","kind":6,"range":{"start":{"line":115,"character":4},"end":{"line":115,"character":49}},"selectionRange":{"start":{"line":115,"character":9},"end":{"line":115,"character":25}}},{"name":"queueButton","kind":6,"range":{"start":{"line":118,"character":4},"end":{"line":118,"character":34}},"selectionRange":{"start":{"line":118,"character":9},"end":{"line":118,"character":20}}},{"name":"getButton","kind":6,"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":20}},"selectionRange":{"start":{"line":121,"character":9},"end":{"line":121,"character":18}}},{"name":"manualButtonHandler","kind":6,"range":{"start":{"line":125,"character":4},"end":{"line":125,"character":30}},"selectionRange":{"start":{"line":125,"character":9},"end":{"line":125,"character":28}}},{"name":"initPulseInCounter","kind":6,"range":{"start":{"line":128,"character":4},"end":{"line":131,"character":29}},"selectionRange":{"start":{"line":128,"character":9},"end":{"line":128,"character":27}}},{"name":"disablePulseInCounter","kind":6,"range":{"start":{"line":133,"character":4},"end":{"line":133,"character":32}},"selectionRange":{"start":{"line":133,"character":9},"end":{"line":133,"character":30}}},{"name":"getPulseInPeriod","kind":6,"range":{"start":{"line":136,"character":4},"end":{"line":136,"character":35}},"selectionRange":{"start":{"line":136,"character":17},"end":{"line":136,"character":33}}},{"name":"getPulseInTotalCount","kind":6,"range":{"start":{"line":139,"character":4},"end":{"line":139,"character":40}},"selectionRange":{"start":{"line":139,"character":18},"end":{"line":139,"character":38}}},{"name":"resetPulseInTotalCount","kind":6,"range":{"start":{"line":142,"character":4},"end":{"line":142,"character":33}},"selectionRange":{"start":{"line":142,"character":9},"end":{"line":142,"character":31}}},{"name":"setPulseInTimeOut","kind":6,"range":{"start":{"line":145,"character":4},"end":{"line":145,"character":48}},"selectionRange":{"start":{"line":145,"character":9},"end":{"line":145,"character":26}}},{"name":"initSonar","kind":6,"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":51}},"selectionRange":{"start":{"line":148,"character":9},"end":{"line":148,"character":18}}},{"name":"getSonarDataCm","kind":6,"range":{"start":{"line":151,"character":4},"end":{"line":151,"character":62}},"selectionRange":{"start":{"line":151,"character":17},"end":{"line":151,"character":31}}},{"name":"initLM35","kind":6,"range":{"start":{"line":154,"character":4},"end":{"line":154,"character":50}},"selectionRange":{"start":{"line":154,"character":9},"end":{"line":154,"character":17}}},{"name":"getLM35Data","kind":6,"range":{"start":{"line":157,"character":4},"end":{"line":157,"character":21}},"selectionRange":{"start":{"line":157,"character":8},"end":{"line":157,"character":19}}},{"name":"timerReadInProgress","kind":8,"range":{"start":{"line":160,"character":4},"end":{"line":160,"character":41}},"selectionRange":{"start":{"line":160,"character":18},"end":{"line":160,"character":37}}},{"name":"timerWriteInProgress","kind":8,"range":{"start":{"line":161,"character":4},"end":{"line":161,"character":42}},"selectionRange":{"start":{"line":161,"character":18},"end":{"line":161,"character":38}}},{"name":"buttonBuffer","kind":8,"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":48}},"selectionRange":{"start":{"line":165,"character":18},"end":{"line":165,"character":30}}},{"name":"buttonBufferCount","kind":8,"range":{"start":{"line":166,"character":4},"end":{"line":166,"character":39}},"selectionRange":{"start":{"line":166,"character":18},"end":{"line":166,"character":35}}},{"name":"button_write_pos","kind":8,"range":{"start":{"line":167,"character":4},"end":{"line":167,"character":38}},"selectionRange":{"start":{"line":167,"character":18},"end":{"line":167,"character":34}}},{"name":"button_read_pos","kind":8,"range":{"start":{"line":168,"character":4},"end":{"line":168,"character":37}},"selectionRange":{"start":{"line":168,"character":18},"end":{"line":168,"character":33}}},{"name":"buttonSampleIntervalCounter","kind":8,"range":{"start":{"line":170,"character":4},"end":{"line":170,"character":47}},"selectionRange":{"start":{"line":170,"character":17},"end":{"line":170,"character":44}}},{"name":"buttonState","kind":8,"range":{"start":{"line":171,"character":4},"end":{"line":171,"character":44}},"selectionRange":{"start":{"line":171,"character":9},"end":{"line":171,"character":20}}},{"name":"buttonPressTime","kind":8,"range":{"start":{"line":172,"character":4},"end":{"line":172,"character":56}},"selectionRange":{"start":{"line":172,"character":17},"end":{"line":172,"character":32}}},{"name":"timer_volatile","kind":8,"range":{"start":{"line":174,"character":4},"end":{"line":174,"character":45}},"selectionRange":{"start":{"line":174,"character":27},"end":{"line":174,"character":41}}},{"name":"timer_safe","kind":8,"range":{"start":{"line":175,"character":4},"end":{"line":175,"character":41}},"selectionRange":{"start":{"line":175,"character":27},"end":{"line":175,"character":37}}},{"name":"beeperModifyInProgress","kind":8,"range":{"start":{"line":177,"character":4},"end":{"line":177,"character":44}},"selectionRange":{"start":{"line":177,"character":18},"end":{"line":177,"character":40}}},{"name":"beeperState","kind":8,"range":{"start":{"line":178,"character":4},"end":{"line":178,"character":32}},"selectionRange":{"start":{"line":178,"character":18},"end":{"line":178,"character":29}}},{"name":"beeperOnPeriodReloadValue","kind":8,"range":{"start":{"line":179,"character":4},"end":{"line":179,"character":54}},"selectionRange":{"start":{"line":179,"character":26},"end":{"line":179,"character":51}}},{"name":"beeperOffPeriodReloadValue","kind":8,"range":{"start":{"line":180,"character":4},"end":{"line":180,"character":55}},"selectionRange":{"start":{"line":180,"character":26},"end":{"line":180,"character":52}}},{"name":"beeperPeriodCounter","kind":8,"range":{"start":{"line":181,"character":4},"end":{"line":181,"character":49}},"selectionRange":{"start":{"line":181,"character":26},"end":{"line":181,"character":45}}},{"name":"beeperCycleReloadValue","kind":8,"range":{"start":{"line":182,"character":4},"end":{"line":182,"character":44}},"selectionRange":{"start":{"line":182,"character":18},"end":{"line":182,"character":40}}},{"name":"beeperCycleCounter","kind":8,"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":39}},"selectionRange":{"start":{"line":183,"character":18},"end":{"line":183,"character":36}}},{"name":"beeperLoopCycleCounter","kind":8,"range":{"start":{"line":184,"character":4},"end":{"line":184,"character":51}},"selectionRange":{"start":{"line":184,"character":26},"end":{"line":184,"character":48}}},{"name":"beeperLoopDelayPeriodReloadValue","kind":8,"range":{"start":{"line":185,"character":4},"end":{"line":185,"character":61}},"selectionRange":{"start":{"line":185,"character":26},"end":{"line":185,"character":58}}},{"name":"displayIdx","kind":8,"range":{"start":{"line":187,"character":4},"end":{"line":187,"character":23}},"selectionRange":{"start":{"line":187,"character":9},"end":{"line":187,"character":19}}},{"name":"blinkEnabled","kind":8,"range":{"start":{"line":188,"character":4},"end":{"line":188,"character":25}},"selectionRange":{"start":{"line":188,"character":9},"end":{"line":188,"character":21}}},{"name":"blinkState","kind":8,"range":{"start":{"line":189,"character":4},"end":{"line":189,"character":23}},"selectionRange":{"start":{"line":189,"character":9},"end":{"line":189,"character":19}}},{"name":"blinkCounter","kind":8,"range":{"start":{"line":190,"character":4},"end":{"line":190,"character":25}},"selectionRange":{"start":{"line":190,"character":9},"end":{"line":190,"character":21}}},{"name":"ledState","kind":8,"range":{"start":{"line":192,"character":4},"end":{"line":192,"character":20}},"selectionRange":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},{"name":"ledBlinkEnabled","kind":8,"range":{"start":{"line":193,"character":4},"end":{"line":193,"character":27}},"selectionRange":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},{"name":"ledOutput","kind":8,"range":{"start":{"line":194,"character":4},"end":{"line":194,"character":20}},"selectionRange":{"start":{"line":194,"character":9},"end":{"line":194,"character":18}}},{"name":"pulseInEnabled","kind":8,"range":{"start":{"line":196,"character":4},"end":{"line":196,"character":40}},"selectionRange":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}}},{"name":"pulseInReadInProgress","kind":8,"range":{"start":{"line":197,"character":4},"end":{"line":197,"character":42}},"selectionRange":{"start":{"line":197,"character":18},"end":{"line":197,"character":39}}},{"name":"pulseInWriteInProgress","kind":8,"range":{"start":{"line":198,"character":4},"end":{"line":198,"character":43}},"selectionRange":{"start":{"line":198,"character":18},"end":{"line":198,"character":40}}},{"name":"pulseInTimeOut","kind":8,"range":{"start":{"line":200,"character":4},"end":{"line":200,"character":47}},"selectionRange":{"start":{"line":200,"character":26},"end":{"line":200,"character":40}}},{"name":"pulseInPin","kind":8,"range":{"start":{"line":201,"character":4},"end":{"line":201,"character":43}},"selectionRange":{"start":{"line":201,"character":18},"end":{"line":201,"character":28}}},{"name":"pulseInPeriodCounter","kind":8,"range":{"start":{"line":202,"character":4},"end":{"line":202,"character":53}},"selectionRange":{"start":{"line":202,"character":26},"end":{"line":202,"character":46}}},{"name":"pulseInTrigger","kind":8,"range":{"start":{"line":203,"character":4},"end":{"line":203,"character":38}},"selectionRange":{"start":{"line":203,"character":18},"end":{"line":203,"character":32}}},{"name":"pulseInPeriod_volatile","kind":8,"range":{"start":{"line":204,"character":4},"end":{"line":204,"character":51}},"selectionRange":{"start":{"line":204,"character":26},"end":{"line":204,"character":48}}},{"name":"pulseInPeriod_safe","kind":8,"range":{"start":{"line":205,"character":4},"end":{"line":205,"character":47}},"selectionRange":{"start":{"line":205,"character":26},"end":{"line":205,"character":44}}},{"name":"pulseInState","kind":8,"range":{"start":{"line":206,"character":4},"end":{"line":206,"character":33}},"selectionRange":{"start":{"line":206,"character":18},"end":{"line":206,"character":30}}},{"name":"pulseInTotalCount_volatile","kind":8,"range":{"start":{"line":207,"character":4},"end":{"line":207,"character":57}},"selectionRange":{"start":{"line":207,"character":27},"end":{"line":207,"character":53}}},{"name":"pulseInTotalCount_safe","kind":8,"range":{"start":{"line":208,"character":4},"end":{"line":208,"character":53}},"selectionRange":{"start":{"line":208,"character":27},"end":{"line":208,"character":49}}},{"name":"sonarSmoothingLevel","kind":8,"range":{"start":{"line":210,"character":4},"end":{"line":210,"character":49}},"selectionRange":{"start":{"line":210,"character":9},"end":{"line":210,"character":28}}},{"name":"lm35SmoothingLevel","kind":8,"range":{"start":{"line":211,"character":4},"end":{"line":211,"character":48}},"selectionRange":{"start":{"line":211,"character":9},"end":{"line":211,"character":27}}}]},{"name":"MFS","kind":13,"range":{"start":{"line":214,"character":0},"end":{"line":214,"character":26}},"selectionRange":{"start":{"line":214,"character":23},"end":{"line":214,"character":26}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":217,"character":0},"end":{"line":217,"character":60}},"selectionRange":{"start":{"line":217,"character":11},"end":{"line":217,"character":20}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":220,"character":0},"end":{"line":220,"character":92}},"selectionRange":{"start":{"line":220,"character":11},"end":{"line":220,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":122,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":37,"character":40}}}
>>>
Content-Length: 40

{"id":122,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":85,"character":20}}}
>>>
Content-Length: 40

{"id":123,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":124,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":82,"character":22}}}
>>>
Content-Length: 40

{"id":124,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":125,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":82,"character":23}}}
>>>
Content-Length: 40

{"id":125,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":126,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":82,"character":12}}}
>>>
Content-Length: 40

{"id":126,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":127,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":82,"character":28}}}
>>>
Content-Length: 40

{"id":127,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":128,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":85,"character":32}}}
>>>
Content-Length: 40

{"id":128,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":86,"character":59}}}
>>>
Content-Length: 40

{"id":129,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":86,"character":13}}}
>>>
Content-Length: 425

{"id":130,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":86,"character":9},"end":{"line":86,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":131,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":91,"character":51}}}
>>>
Content-Length: 40

{"id":131,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":132,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":88,"character":15}}}
>>>
Content-Length: 38

{"id":132,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":133,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":88,"character":14}}}
>>>
Content-Length: 222

{"id":133,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":134,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":87,"character":12}}}
>>>
Content-Length: 314

{"id":134,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":135,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":87,"character":12}}}
>>>
Content-Length: 314

{"id":135,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":136,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":87,"character":10}}}
>>>
Content-Length: 222

{"id":136,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":137,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":87,"character":12}}}
>>>
Content-Length: 125

{"id":137,"result":[{"range":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":138,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":87,"character":12}}}
>>>
Content-Length: 222

{"id":138,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":139,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":139,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":140,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":5}}}
>>>
Content-Length: 388

{"id":140,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":483,"character":4},"end":{"line":483,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":141,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":6}}}
>>>
Content-Length: 222

{"id":141,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":142,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":6}}}
>>>
Content-Length: 484

{"id":142,"result":[{"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}},"kind":1},{"range":{"start":{"line":461,"character":4},"end":{"line":461,"character":9}},"kind":1},{"range":{"start":{"line":483,"character":4},"end":{"line":483,"character":9}},"kind":1},{"range":{"start":{"line":499,"character":2},"end":{"line":499,"character":7}},"kind":1},{"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":143,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":483,"character":6}}}
>>>
Content-Length: 222

{"id":143,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":144,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":6}}}
>>>
Content-Length: 217

{"id":144,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":145,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":503,"character":36}}}
>>>
Content-Length: 40

{"id":145,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":146,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":16}}}
>>>
Content-Length: 333

{"id":146,"result":{"contents":{"kind":"markdown","value":"### variable `displayMemory`  \n\n---\nType: `volatile byte [4]`  \nValue = `{255, 255, 255, 255}`  \n\n---\n```cpp\nvolatile byte displayMemory[4] = {255, 255, 255, 255}\n```"},"range":{"start":{"line":563,"character":6},"end":{"line":563,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":147,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":15}}}
>>>
Content-Length: 942

{"id":147,"result":[{"range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}},"kind":1},{"range":{"start":{"line":544,"character":23},"end":{"line":544,"character":36}},"kind":1},{"range":{"start":{"line":550,"character":6},"end":{"line":550,"character":19}},"kind":1},{"range":{"start":{"line":555,"character":6},"end":{"line":555,"character":19}},"kind":1},{"range":{"start":{"line":563,"character":6},"end":{"line":563,"character":19}},"kind":1},{"range":{"start":{"line":659,"character":40},"end":{"line":659,"character":53}},"kind":1},{"range":{"start":{"line":668,"character":38},"end":{"line":668,"character":51}},"kind":1},{"range":{"start":{"line":672,"character":28},"end":{"line":672,"character":41}},"kind":1},{"range":{"start":{"line":907,"character":34},"end":{"line":907,"character":47}},"kind":1},{"range":{"start":{"line":910,"character":26},"end":{"line":910,"character":39}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":148,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":15}}}
>>>
Content-Length: 220

{"id":148,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":149,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":13}}}
>>>
Content-Length: 333

{"id":149,"result":{"contents":{"kind":"markdown","value":"### variable `displayMemory`  \n\n---\nType: `volatile byte [4]`  \nValue = `{255, 255, 255, 255}`  \n\n---\n```cpp\nvolatile byte displayMemory[4] = {255, 255, 255, 255}\n```"},"range":{"start":{"line":563,"character":6},"end":{"line":563,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":150,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":14}}}
>>>
Content-Length: 220

{"id":150,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":151,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":19}}}
>>>
Content-Length: 332

{"id":151,"result":{"contents":{"kind":"markdown","value":"### variable `displayMemory`  \n\n---\nType: `volatile byte [4]`  \nValue = `{255, 255, 255, 255}`  \n\n---\n```cpp\nvolatile byte displayMemory[4] = {255, 255, 255, 255}\n```"},"range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":152,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":19}}}
>>>
Content-Length: 942

{"id":152,"result":[{"range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}},"kind":1},{"range":{"start":{"line":544,"character":23},"end":{"line":544,"character":36}},"kind":1},{"range":{"start":{"line":550,"character":6},"end":{"line":550,"character":19}},"kind":1},{"range":{"start":{"line":555,"character":6},"end":{"line":555,"character":19}},"kind":1},{"range":{"start":{"line":563,"character":6},"end":{"line":563,"character":19}},"kind":1},{"range":{"start":{"line":659,"character":40},"end":{"line":659,"character":53}},"kind":1},{"range":{"start":{"line":668,"character":38},"end":{"line":668,"character":51}},"kind":1},{"range":{"start":{"line":672,"character":28},"end":{"line":672,"character":41}},"kind":1},{"range":{"start":{"line":907,"character":34},"end":{"line":907,"character":47}},"kind":1},{"range":{"start":{"line":910,"character":26},"end":{"line":910,"character":39}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":153,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":20}}}
>>>
Content-Length: 220

{"id":153,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":154,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":19,"character":36}}}
>>>
Content-Length: 40

{"id":154,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":155,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":23}}}
>>>
Content-Length: 393

{"id":155,"result":{"contents":{"kind":"markdown","value":"### function `WriteValueToSegment`  \n\n---\n→ `void`  \nParameters:  \n- `byte Segment`\n- `byte Value`\n\nWrite a value to one of the 4 digits of the display  \n\n---\n```cpp\nvoid WriteValueToSegment(byte Segment, byte Value)\n```"},"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":156,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":23}}}
>>>
Content-Length: 223

{"id":156,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":157,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":21}}}
>>>
Content-Length: 755

{"id":157,"result":[{"range":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}},"kind":1},{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":21}},"kind":1},{"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}},"kind":1},{"range":{"start":{"line":663,"character":8},"end":{"line":663,"character":27}},"kind":1},{"range":{"start":{"line":668,"character":6},"end":{"line":668,"character":25}},"kind":1},{"range":{"start":{"line":708,"character":6},"end":{"line":708,"character":25}},"kind":1},{"range":{"start":{"line":907,"character":2},"end":{"line":907,"character":21}},"kind":1},{"range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":158,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":21}}}
>>>
Content-Length: 223

{"id":158,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","id":159,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1191,"character":22}}}
>>>
Content-Length: 223

{"id":159,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":160,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1191,"character":11}}}
>>>
Content-Length: 395

{"id":160,"result":{"contents":{"kind":"markdown","value":"### function `WriteValueToSegment`  \n\n---\n→ `void`  \nParameters:  \n- `byte Segment`\n- `byte Value`\n\nWrite a value to one of the 4 digits of the display  \n\n---\n```cpp\nvoid WriteValueToSegment(byte Segment, byte Value)\n```"},"range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":161,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1196,"character":17}}}
>>>
Content-Length: 230

{"id":161,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1196,"character":15},"end":{"line":1196,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":162,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1196,"character":23}}}
>>>
Content-Length: 40

{"id":162,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1196,"character":16}}}
>>>
Content-Length: 230

{"id":163,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1196,"character":15},"end":{"line":1196,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":164,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1196,"character":46}}}
>>>
Content-Length: 40

{"id":164,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":165,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1196,"character":46}}}
>>>
Content-Length: 40

{"id":165,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":166,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1196,"character":46}}}
>>>
Content-Length: 40

{"id":166,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":167,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1202,"character":37}}}
>>>
Content-Length: 367

{"id":167,"result":{"contents":{"kind":"markdown","value":"### variable `SEGMENT_SELECT`  \n\n---\nType: `const byte [4]`  \nValue = `{241, 242, 244, 248}`  \nByte maps to select digit 1 to 4  \n\n---\n```cpp\nconst byte SEGMENT_SELECT[] = {241, 242, 244, 248}\n```"},"range":{"start":{"line":1202,"character":28},"end":{"line":1202,"character":42}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":168,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1223,"character":30}}}
>>>
Content-Length: 40

{"id":168,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 60

{"jsonrpc":"2.0","id":169,"method":"shutdown","params":null}
>>>
Content-Length: 40

{"id":169,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3130

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":1796,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 3008

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":1,"text":"#include <MultiFuncShield.h>\n\n/*\n\nFor more information and help, please visit https://www.cohesivecomputing.co.uk/hackatronics/arduino-multi-function-shield/part-3/\n\nAll our hackatronics projects are free for personal use, and there are many more\nin the pipeline. If you find our projects helpful or useful, please consider making\na small donation to our hackatronics fund using the donate buttons on our web pages.\nThank you.\n\n*/\n\nenum CountDownModeValues\n{\n  COUNTING_STOPPED,\n  COUNTING\n};\n\nbyte countDownMode = COUNTING_STOPPED;\n\nbyte tenths = 0;\nchar seconds = 0;\nchar minutes = 0;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n}\n\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n  byte btn = MFS.getButton();\n  \n  switch (countDownMode)\n  {\n    case COUNTING_STOPPED:\n        if (btn == BUTTON_1_SHORT_RELEASE && (minutes + seconds) > 0)\n        {\n          // start the timer\n          countDownMode = COUNTING;\n        }\n        else if (btn == BUTTON_1_LONG_PRESSED)\n        {\n          // reset the timer\n          tenths = 0;\n          seconds = 0;\n          minutes = 0;\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_2_PRESSED || btn == BUTTON_2_LONG_PRESSED)\n        {\n          minutes++;\n          if (minutes > 60)\n          {\n            minutes = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_3_PRESSED || btn == BUTTON_3_LONG_PRESSED)\n        {\n          seconds += 10;\n          if (seconds >= 60)\n          {\n            seconds = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        break;\n        \n    case COUNTING:\n        if (btn == BUTTON_1_SHORT_RELEASE || btn == BUTTON_1_LONG_RELEASE)\n        {\n          // stop the timer\n          countDownMode = COUNTING_STOPPED;\n        }\n        else\n        {\n          // continue counting down\
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
n          tenths++;\n          \n          if (tenths == 10)\n          {\n            tenths = 0;\n            seconds--;\n            \n            if (seconds < 0 && minutes > 0)\n            {\n              seconds = 59;\n              minutes--;\n            }\n            \n            if (minutes == 0 && seconds == 0)\n            {\n              // timer has reached 0, so sound the alarm\n              MFS.beep(50, 50, 3);  // beep 3 times, 500 milliseconds on / 500 off\n              countDownMode = COUNTING_STOPPED;\n            }\n            \n            MFS.write(minutes*100 + seconds);\n          }\n          delay(100);\n        }\n        break;\n  }\n}\n"}}}Content-Length: 298

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":53,"character":16},"end":{"line":53,"character":16}},"context":{"diagnostics":[]}}}Content-Length: 294

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 1795

{"id":3,"result":[{"name":"CountDownModeValues","kind":10,"range":{"start":{"line":13,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":24}},"children":[{"name":"COUNTING_STOPPED","kind":22,"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}},"selectionRange":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}}},{"name":"COUNTING","kind":22,"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}},"selectionRange":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}}}]},{"name":"countDownMode","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":37}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":15}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":16}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":16}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":25,"character":0},"end":{"line":31,"character":1}},"selectionRange":{"start":{"line":25,"character":5},"end":{"line":25,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":34,"character":0},"end":{"line":110,"character":1}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1215,"character":25}}}
>>>
Content-Length: 251

{"id":4,"result":{"contents":{"kind":"markdown","value":"### param `ledIdx`  \n\n---\nType: `byte`  \n\n---\n```cpp\n// In writeLed\nbyte ledIdx\n```"},"range":{"start":{"line":1215,"character":21},"end":{"line":1215,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":5,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34452,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 3008

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":1,"text":"#include <MultiFuncShield.h>\n\n/*\n\nFor more information and help, please visit https://www.cohesivecomputing.co.uk/hackatronics/arduino-multi-function-shield/part-3/\n\nAll our hackatronics projects are free for personal use, and there are many more\nin the pipeline. If you find our projects helpful or useful, please consider making\na small donation to our hackatronics fund using the donate buttons on our web pages.\nThank you.\n\n*/\n\nenum CountDownModeValues\n{\n  COUNTING_STOPPED,\n  COUNTING\n};\n\nbyte countDownMode = COUNTING_STOPPED;\n\nbyte tenths = 0;\nchar seconds = 0;\nchar minutes = 0;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n}\n\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n  byte btn = MFS.getButton();\n  \n  switch (countDownMode)\n  {\n    case COUNTING_STOPPED:\n        if (btn == BUTTON_1_SHORT_RELEASE && (minutes + seconds) > 0)\n        {\n          // start the timer\n          countDownMode = COUNTING;\n        }\n        else if (btn == BUTTON_1_LONG_PRESSED)\n        {\n          // reset the timer\n          tenths = 0;\n          seconds = 0;\n          minutes = 0;\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_2_PRESSED || btn == BUTTON_2_LONG_PRESSED)\n        {\n          minutes++;\n          if (minutes > 60)\n          {\n            minutes = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        else if (btn == BUTTON_3_PRESSED || btn == BUTTON_3_LONG_PRESSED)\n        {\n          seconds += 10;\n          if (seconds >= 60)\n          {\n            seconds = 0;\n          }\n          MFS.write(minutes*100 + seconds);\n        }\n        break;\n        \n    case COUNTING:\n        if (btn == BUTTON_1_SHORT_RELEASE || btn == BUTTON_1_LONG_RELEASE)\n        {\n          // stop the timer\n          countDownMode = COUNTING_STOPPED;\n        }\n        else\n        {\n          // continue counting down\n          tenths++;\n          \n          if (tenths == 10)\n          {\n            tenths = 0;\n            seconds--;\n            \n            if (seconds < 0 && minutes > 0)\n            {\n              seconds = 59;\n              minutes--;\n            }\n            \n            if (minutes == 0 && seconds == 0)\n            {\n              // timer has reached 0, so sound the alarm\n              MFS.beep(50, 50, 3);  // beep 3 times, 500 milliseconds on / 500 off\n              countDownMode = COUNTING_STOPPED;\n            }\n            \n            MFS.write(minutes*100 + seconds);\n          }\n          delay(100);\n        }\n        break;\n  }\n}\n"}}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// --------------------
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
--------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":53,"character":16},"end":{"line":53,"character":16}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 1795

{"id":3,"result":[{"name":"CountDownModeValues","kind":10,"range":{"start":{"line":13,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":24}},"children":[{"name":"COUNTING_STOPPED","kind":22,"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}},"selectionRange":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}}},{"name":"COUNTING","kind":22,"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}},"selectionRange":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}}}]},{"name":"countDownMode","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":37}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":15}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":16}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":16}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":25,"character":0},"end":{"line":31,"character":1}},"selectionRange":{"start":{"line":25,"character":5},"end":{"line":25,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":34,"character":0},"end":{"line":110,"character":1}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":18}}}
>>>
Content-Length: 228

{"id":4,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1220,"character":15},"end":{"line":1220,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1795

{"id":5,"result":[{"name":"CountDownModeValues","kind":10,"range":{"start":{"line":13,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":24}},"children":[{"name":"COUNTING_STOPPED","kind":22,"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}},"selectionRange":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}}},{"name":"COUNTING","kind":22,"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}},"selectionRange":{"start":{"line":16,"character":2},"end":{"line":16,"character":10}}}]},{"name":"countDownMode","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":37}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":15}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":16}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":16}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":25,"character":0},"end":{"line":31,"character":1}},"selectionRange":{"start":{"line":25,"character":5},"end":{"line":25,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":34,"character":0},"end":{"line":110,"character":1}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":26}}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":15,"character":17}}}
>>>
Content-Length: 312

{"id":7,"result":{"contents":{"kind":"markdown","value":"### enumerator `COUNTING_STOPPED`  \n\n---\nType: `enum CountDownModeValues`  \nValue = `0`  \n\n---\n```cpp\n// In CountDownModeValues\nCOUNTING_STOPPED\n```"},"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":17,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":17,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":2},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":17,"character":2}},"rangeLength":462,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1547

{"id":10,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":37}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":15}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":16}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":16}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":25,"character":0},"end":{"line":25,"character":12}},"selectionRange":{"start":{"line":25,"character":5},"end":{"line":25,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":11}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":95,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":21},"end":{"line":4,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":26,"character":9},"end":{"line":26,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":30,"character":26},"end":{"line":30,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":9},"end":{"line":60,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":64,"character":26},"end":{"line":64,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":86,"character":30},"end":{"line":86,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":2}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":3},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1547

{"id":12,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":37}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":15}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":16}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":25,"character":0},"end":{"line":25,"character":12}},"selectionRange":{"start":{"line":25,"character":5},"end":{"line":25,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":11}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":94,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":21},"end":{"line":3,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":25,"character":9},"end":{"line":25,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":29,"character":26},"end":{"line":29,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":59,"character":9},"end":{"line":59,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":63,"character":26},"end":{"line":63,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":85,"character":30},"end":{"line":85,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":13,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":3}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":4},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 1540

{"id":14,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":37}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":18}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":5},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":14}}Content-Length: 196

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":6},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}Content-Length: 196

{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":7},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":16}}Content-Length: 196

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":8},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":17}}Content-Length: 196

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":9},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":18}}Content-Length: 196

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":10},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":19}}Content-Length: 196

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":11},"contentChanges":[{
>>>
Content-Length: 1540

{"id":15,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":36}},"selectionRange":{"start":{"line":2,"character":4},"end":{"line":2,"character":17}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"}]},"jsonrpc":"2.0"}Content-Length: 1724

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'yte'; did you mean 'byte'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Arduino.h:127:17:\nnote: 'byte' declared here"},{"range":{"start":{"line":2,"character":20},"end":{"line":2,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"}]},"jsonrpc":"2.0"}Content-Length: 1540

{"id":16,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":16}},"selectionRange":{"start":{"line":2,"character":3},"end":{"line":2,"character":16}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1526

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'te'"},{"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1525

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'e'"},{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1540

{"id":17,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":15}},"selectionRange":{"start":{"line":2,"character":2},"end":{"line":2,"character":15}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1540

{"id":18,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":14}},"selectionRange":{"start":{"line":2,"character":1},"end":{"line":2,"character":14}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1540

{"id":19,"result":[{"name":"countDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":13}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":13}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1561

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":14}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":33}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1539

{"id":20,"result":[{"name":"ountDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":20}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":12},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":21}}Content-Length: 196

{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":13},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":22}}Content-Length: 196

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":14},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":23}}Content-Length: 196

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":15},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":24}}Content-Length: 196

{"jsonrpc":"2.0","id":25,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":16},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":25}}Content-Length: 196

{"jsonrpc":"2.0","id":26,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":17},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":26}}Content-Length: 196

{"jsonrpc":"2.0","id"
>>>
Content-Length: 1561

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":13}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 3789

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":31}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ountDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"severity":3,"message":"'ountDownMode' declared here\n\nLibraryTests.ino.cpp:30:11: error: use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'?"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ountDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"severity":3,"message":"'ountDownMode' declared here\n\nLibraryTests.ino.cpp:36:11: error: use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'?"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ountDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"severity":3,"message":"'ountDownMode' declared here\n\nLibraryTests.ino.cpp:70:11: error: use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'?"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ountDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"severity":3,"message":"'ountDownMode' declared here\n\nLibraryTests.ino.cpp:92:15: error: use of undeclared identifier 'countDownMode'; did you mean 'ountDownMode'?"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1538

{"id":21,"result":[{"name":"untDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3773

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":30}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'untDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"severity":3,"message":"'untDownMode' declared here\n\nLibraryTests.ino.cpp:30:11: error: use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'?"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'untDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"severity":3,"message":"'untDownMode' declared here\n\nLibraryTests.ino.cpp:36:11: error: use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'?"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'untDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"severity":3,"message":"'untDownMode' declared here\n\nLibraryTests.ino.cpp:70:11: error: use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'?"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'untDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"severity":3,"message":"'untDownMode' declared here\n\nLibraryTests.ino.cpp:92:15: error: use of undeclared identifier 'countDownMode'; did you mean 'untDownMode'?"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1537

{"id":22,"result":[{"name":"ntDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3757

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ntDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"severity":3,"message":"'ntDownMode' declared here\n\nLibraryTests.ino.cpp:30:11: error: use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'?"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ntDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"severity":3,"message":"'ntDownMode' declared here\n\nLibraryTests.ino.cpp:36:11: error: use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'?"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ntDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"severity":3,"message":"'ntDownMode' declared here\n\nLibraryTests.ino.cpp:70:11: error: use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'?"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'ntDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"severity":3,"message":"'ntDownMode' declared here\n\nLibraryTests.ino.cpp:92:15: error: use of undeclared identifier 'countDownMode'; did you mean 'ntDownMode'?"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1534

{"id":23,"result":[{"name":"tDownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3736

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'tDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"severity":3,"message":"'tDownMode' declared here\n\nLibraryTests.ino.cpp:30:11: error: use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'?"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'tDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"severity":3,"message":"'tDownMode' declared here\n\nLibraryTests.ino.cpp:36:11: error: use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'?"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'tDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"severity":3,"message":"'tDownMode' declared here\n\nLibraryTests.ino.cpp:70:11: error: use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'?"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'tDownMode' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"severity":3,"message":"'tDownMode' declared here\n\nLibraryTests.ino.cpp:92:15: error: use of undeclared identifier 'countDownMode'; did you mean 'tDownMode'?"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1533

{"id":24,"result":[{"name":"DownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2340

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1532

{"id":25,"result":[{"name":"ownMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2340

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":26}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1531

{"id":26,"result":[{"name":"wnMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2339

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}
<<<
:27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":18},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":27}}Content-Length: 196

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":19},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}Content-Length: 196

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":20},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":29}}Content-Length: 196

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":21},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":30}}Content-Length: 196

{"jsonrpc":"2.0","id":31,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":22},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":31}}Content-Length: 196

{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":23},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":32}}Content-Length: 196

{"jsonrpc":"2.0","id":33,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDoc
>>>
Content-Length: 1530

{"id":27,"result":[{"name":"nMode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2339

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1529

{"id":28,"result":[{"name":"Mode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2339

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1528

{"id":29,"result":[{"name":"ode","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2339

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":22}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1527

{"id":30,"result":[{"name":"de","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2339

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1526

{"id":31,"result":[{"name":"e","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2339

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1346

{"id":32,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1346

{"id":33,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
ument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":24},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":33}}Content-Length: 196

{"jsonrpc":"2.0","id":34,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":25},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":34}}Content-Length: 196

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":26},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":35}}Content-Length: 196

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":27},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":36}}Content-Length: 196

{"jsonrpc":"2.0","id":37,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":28},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":37}}Content-Length: 196

{"jsonrpc":"2.0","id":38,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":29},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":38}}Content-Length: 196

{"jsonrpc":"2.0","id":39,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":30},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"li
>>>
Content-Length: 2118

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":2}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1543

{"id":34,"result":[{"name":"COUNTING_STOPPED","kind":13,"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":17}},"selectionRange":{"start":{"line":2,"character":1},"end":{"line":2,"character":17}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2118

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1543

{"id":35,"result":[{"name":"COUNTING_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":16}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":16}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1552

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":17}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1542

{"id":36,"result":[{"name":"OUNTING_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":15}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":15}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1552

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":16}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 2145

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":15}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1541

{"id":37,"result":[{"name":"UNTING_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":14}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":14}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2145

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":14}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1540

{"id":38,"result":[{"name":"NTING_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":13}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":13}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2145

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":13}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 2145

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1539

{"id":39,"result":[{"name":"TING_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":12}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
ne":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":39}}Content-Length: 196

{"jsonrpc":"2.0","id":40,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":31},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":40}}Content-Length: 196

{"jsonrpc":"2.0","id":41,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":32},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":41}}Content-Length: 196

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":33},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":42}}Content-Length: 196

{"jsonrpc":"2.0","id":43,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":34},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":43}}Content-Length: 196

{"jsonrpc":"2.0","id":44,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":35},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":44}}Content-Length: 196

{"jsonrpc":"2.0","id":45,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":36},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":45}}Content-Length: 196

{"jsonrpc":"2.0","id":46,"method":"textDocument/documentSymbol","params":
>>>
Content-Length: 1538

{"id":40,"result":[{"name":"ING_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2145

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":11}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1537

{"id":41,"result":[{"name":"NG_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2145

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1534

{"id":42,"result":[{"name":"G_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1533

{"id":43,"result":[{"name":"_STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1532

{"id":44,"result":[{"name":"STOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1531

{"id":45,"result":[{"name":"TOPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}
<<<
{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":37},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":46}}Content-Length: 196

{"jsonrpc":"2.0","id":47,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":38},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":47}}Content-Length: 196

{"jsonrpc":"2.0","id":48,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":39},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":48}}Content-Length: 196

{"jsonrpc":"2.0","id":49,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":40},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":49}}Content-Length: 196

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":41},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":50}}Content-Length: 196

{"jsonrpc":"2.0","id":51,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":42},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":51}}Content-Length: 196

{"jsonrpc":"2.0","id":52,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"fi
>>>
Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1530

{"id":46,"result":[{"name":"OPPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1529

{"id":47,"result":[{"name":"PPED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1528

{"id":48,"result":[{"name":"PED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1527

{"id":49,"result":[{"name":"ED","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1526

{"id":50,"result":[{"name":"D","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}}},{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1346

{"id":51,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1943

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1346

{"id":52,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":15}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":16}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":11}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":93,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
le:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":43},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":52}}Content-Length: 196

{"jsonrpc":"2.0","id":53,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":44},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":53}}Content-Length: 196

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":45},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":54}}Content-Length: 196

{"jsonrpc":"2.0","id":55,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":46},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":55}}Content-Length: 196

{"jsonrpc":"2.0","id":56,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":47},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":56}}Content-Length: 196

{"jsonrpc":"2.0","id":57,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":48},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":57}}Content-Length: 196

{"jsonrpc":"2.0","id":58,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":49},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}C
>>>
Content-Length: 972

{"id":53,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":15}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":16}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":92,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1943

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":62,"character":10},"end":{"line":62,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":84,"character":14},"end":{"line":84,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":84,"character":30},"end":{"line":84,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":58,"character":9},"end":{"line":58,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1345

{"id":54,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":15}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":11}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1943

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":27,"character":10},"end":{"line":27,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":27,"character":26},"end":{"line":27,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":61,"character":10},"end":{"line":61,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":61,"character":26},"end":{"line":61,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":83,"character":14},"end":{"line":83,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":83,"character":30},"end":{"line":83,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":23,"character":9},"end":{"line":23,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":57,"character":9},"end":{"line":57,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1345

{"id":55,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":14}},"selectionRange":{"start":{"line":2,"character":4},"end":{"line":2,"character":10}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1943

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 2308

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'yte'; did you mean 'byte'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Arduino.h:127:17:\nnote: 'byte' declared here"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1343

{"id":56,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"selectionRange":{"start":{"line":2,"character":3},"end":{"line":2,"character":9}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2110

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'te'"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1343

{"id":57,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":8}},"selectionRange":{"start":{"line":2,"character":2},"end":{"line":2,"character":8}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2109

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'e'"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1343

{"id":58,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":7}},"selectionRange":{"start":{"line":2,"character":1},"end":{"line":2,"character":7}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}
<<<
ontent-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":58}}Content-Length: 196

{"jsonrpc":"2.0","id":59,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":50},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":59}}Content-Length: 196

{"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":51},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":60}}Content-Length: 196

{"jsonrpc":"2.0","id":61,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":52},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":61}}Content-Length: 196

{"jsonrpc":"2.0","id":62,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":53},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":62}}Content-Length: 196

{"jsonrpc":"2.0","id":63,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":54},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":63}}Content-Length: 196

{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":55},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":64}}Content-Length: 196

{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Do
>>>
Content-Length: 1343

{"id":59,"result":[{"name":"tenths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1342

{"id":60,"result":[{"name":"enths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2144

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 4200

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'enths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'enths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'enths' declared here\n\nLibraryTests.ino.cpp:39:11: error: use of undeclared identifier 'tenths'; did you mean 'enths'?"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'enths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'enths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'enths' declared here\n\nLibraryTests.ino.cpp:73:11: error: use of undeclared identifier 'tenths'; did you mean 'enths'?"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'enths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'enths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'enths' declared here\n\nLibraryTests.ino.cpp:75:15: error: use of undeclared identifier 'tenths'; did you mean 'enths'?"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'enths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'enths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'enths' declared here\n\nLibraryTests.ino.cpp:77:13: error: use of undeclared identifier 'tenths'; did you mean 'enths'?"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1341

{"id":61,"result":[{"name":"nths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 4184

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'nths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'nths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":3,"message":"'nths' declared here\n\nLibraryTests.ino.cpp:39:11: error: use of undeclared identifier 'tenths'; did you mean 'nths'?"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'nths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'nths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":3,"message":"'nths' declared here\n\nLibraryTests.ino.cpp:73:11: error: use of undeclared identifier 'tenths'; did you mean 'nths'?"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'nths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'nths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":3,"message":"'nths' declared here\n\nLibraryTests.ino.cpp:75:15: error: use of undeclared identifier 'tenths'; did you mean 'nths'?"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'tenths'; did you mean 'nths'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'nths' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":3,"message":"'nths' declared here\n\nLibraryTests.ino.cpp:77:13: error: use of undeclared identifier 'tenths'; did you mean 'nths'?"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1340

{"id":62,"result":[{"name":"ths","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2896

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1339

{"id":63,"result":[{"name":"hs","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2896

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1338

{"id":64,"result":[{"name":"s","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}}},{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2896

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}
<<<
cuments/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":56},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":65}}Content-Length: 196

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":57},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":66}}Content-Length: 196

{"jsonrpc":"2.0","id":67,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":58},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":67}}Content-Length: 196

{"jsonrpc":"2.0","id":68,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":59},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":68}}Content-Length: 196

{"jsonrpc":"2.0","id":69,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":60},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":69}}Content-Length: 196

{"jsonrpc":"2.0","id":70,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":61},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":70}}Content-Length: 196

{"jsonrpc":"2.0","id":71,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunct
>>>
Content-Length: 1158

{"id":65,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1158

{"id":66,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2870

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":2}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1158

{"id":67,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2870

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1158

{"id":68,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2870

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":2}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1158

{"id":69,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2870

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 2695

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 1158

{"id":70,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":16}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":91,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 969

{"id":71,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":16}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":12}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
ion%20Shield/LibraryTests/LibraryTests.ino","version":62},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":71}}Content-Length: 196

{"jsonrpc":"2.0","id":72,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":63},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":72}}Content-Length: 196

{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":64},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":73}}Content-Length: 196

{"jsonrpc":"2.0","id":74,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":65},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":74}}Content-Length: 196

{"jsonrpc":"2.0","id":75,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":66},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":75}}Content-Length: 196

{"jsonrpc":"2.0","id":76,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":67},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":76}}Content-Length: 196

{"jsonrpc":"2.0","id":77,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":68},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/c
>>>
Content-Length: 2695

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":14},"end":{"line":67,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":82,"character":30},"end":{"line":82,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":22,"character":9},"end":{"line":22,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":56,"character":9},"end":{"line":56,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 969

{"id":72,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":15}},"selectionRange":{"start":{"line":2,"character":4},"end":{"line":2,"character":11}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2695

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":21,"character":9},"end":{"line":21,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 2909

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'har'; did you mean 'char'? (fix available)"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":21,"character":9},"end":{"line":21,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 969

{"id":73,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":10}},"selectionRange":{"start":{"line":2,"character":3},"end":{"line":2,"character":10}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2862

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'ar'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":21,"character":9},"end":{"line":21,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 967

{"id":74,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":9}},"selectionRange":{"start":{"line":2,"character":2},"end":{"line":2,"character":9}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2861

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'r'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":21,"character":9},"end":{"line":21,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 967

{"id":75,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":8}},"selectionRange":{"start":{"line":2,"character":1},"end":{"line":2,"character":8}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 967

{"id":76,"result":[{"name":"seconds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2896

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":8}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":21,"character":9},"end":{"line":21,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 966

{"id":77,"result":[{"name":"econds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
ancelRequest","params":{"id":77}}Content-Length: 196

{"jsonrpc":"2.0","id":78,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":69},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":78}}Content-Length: 196

{"jsonrpc":"2.0","id":79,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":70},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":79}}Content-Length: 196

{"jsonrpc":"2.0","id":80,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":71},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":80}}Content-Length: 196

{"jsonrpc":"2.0","id":81,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":72},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":81}}Content-Length: 196

{"jsonrpc":"2.0","id":82,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":72}}}Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}Content-Length: 236

{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":65}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":82}}Content-Length: 196

{"jsonrpc":"2.0","id":84,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 295

{"jsonrpc":"2.0","id":85,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 297

{"jsonrpc":"2.0","id":86,"method":"textDocument/codeAction","params":{"textDocument":{"
>>>
Content-Length: 2896

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":46}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":21,"character":9},"end":{"line":21,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"}]},"jsonrpc":"2.0"}Content-Length: 5473

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'econds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'econds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":3,"message":"'econds' declared here\n\nLibraryTests.ino.cpp:39:11: error: use of undeclared identifier 'seconds'; did you mean 'econds'?"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'econds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'econds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":3,"message":"'econds' declared here\n\nLibraryTests.ino.cpp:54:11: error: use of undeclared identifier 'seconds'; did you mean 'econds'?"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'econds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'econds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":3,"message":"'econds' declared here\n\nLibraryTests.ino.cpp:55:15: error: use of undeclared identifier 'seconds'; did you mean 'econds'?"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'econds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'econds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":3,"message":"'econds' declared here\n\nLibraryTests.ino.cpp:57:13: error: use of undeclared identifier 'seconds'; did you mean 'econds'?"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'econds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'econds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":3,"message":"'econds' declared here\n\nLibraryTests.ino.cpp:77:13: error: use of undeclared identifier 'seconds'; did you mean 'econds'?"}]},"jsonrpc":"2.0"}Content-Length: 965

{"id":78,"result":[{"name":"conds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 5453

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'conds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'conds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'conds' declared here\n\nLibraryTests.ino.cpp:39:11: error: use of undeclared identifier 'seconds'; did you mean 'conds'?"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'conds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'conds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'conds' declared here\n\nLibraryTests.ino.cpp:54:11: error: use of undeclared identifier 'seconds'; did you mean 'conds'?"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'conds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'conds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'conds' declared here\n\nLibraryTests.ino.cpp:55:15: error: use of undeclared identifier 'seconds'; did you mean 'conds'?"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'conds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'conds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'conds' declared here\n\nLibraryTests.ino.cpp:57:13: error: use of undeclared identifier 'seconds'; did you mean 'conds'?"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'seconds'; did you mean 'conds'? (fix available)\n\nLibraryTests.ino.cpp:5:1: note: 'conds' declared here"},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":3,"message":"'conds' declared here\n\nLibraryTests.ino.cpp:77:13: error: use of undeclared identifier 'seconds'; did you mean 'conds'?"}]},"jsonrpc":"2.0"}Content-Length: 964

{"id":79,"result":[{"name":"onds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3818

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"}]},"jsonrpc":"2.0"}Content-Length: 963

{"id":80,"result":[{"name":"nds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3818

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"}]},"jsonrpc":"2.0"}Content-Length: 962

{"id":81,"result":[{"name":"ds","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3818

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"}]},"jsonrpc":"2.0"}Content-Length: 961

{"id":82,"result":[{"name":"s","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":83,"result":[],"jsonrpc":"2.0"}Content-Length: 3818

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"}]},"jsonrpc":"2.0"}Content-Length: 961

{"id":84,"result":[{"name":"s","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"selectionRange":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}}},{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 37

{"id":85,"result":[],"jsonrpc":"2.0"}
<<<
uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":65},"end":{"line":7,"character":65}},"context":{"diagnostics":[]}}}Content-Length: 224

{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":28}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":87}}
>>>
Content-Length: 37

{"id":86,"result":[],"jsonrpc":"2.0"}Content-Length: 39

{"id":87,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":88,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 297

{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":65},"end":{"line":7,"character":65}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":88,"result":[],"jsonrpc":"2.0"}Content-Length: 37

{"id":89,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 495

{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"message":"C++ requires a type specifier for all declarations","severity":1,"code":"missing_type_specifier","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":90,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":73},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"rangeLength":6,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":91,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 781

{"id":91,"result":[{"name":"minutes","kind":13,"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":16}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":11}},"selectionRange":{"start":{"line":6,"character":5},"end":{"line":6,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":90,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3806

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":22,"character":56},"end":{"line":22,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":33,"character":34},"end":{"line":33,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":42,"character":34},"end":{"line":42,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":51,"character":34},"end":{"line":51,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":59,"character":26},"end":{"line":59,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":64,"character":10},"end":{"line":64,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":66,"character":14},"end":{"line":66,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":71,"character":16},"end":{"line":71,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":74},"contentChanges":[{"range":{"start":{"line":1,"character":0},"end":{"line":2,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":92,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 967

{"id":92,"result":[{"name":"minutes","kind":13,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":16}},"selectionRange":{"start":{"line":2,"character":5},"end":{"line":2,"character":12}}},{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":89,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":93,"result":[],"jsonrpc":"2.0"}Content-Length: 3806

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":21,"character":56},"end":{"line":21,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":24,"character":10},"end":{"line":24,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":24,"character":26},"end":{"line":24,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":29,"character":10},"end":{"line":29,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":32,"character":34},"end":{"line":32,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":41,"character":34},"end":{"line":41,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":45,"character":10},"end":{"line":45,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":14},"end":{"line":46,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":48,"character":12},"end":{"line":48,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":50,"character":34},"end":{"line":50,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":58,"character":10},"end":{"line":58,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":58,"character":26},"end":{"line":58,"character":42}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING_STOPPED'"},{"range":{"start":{"line":63,"character":10},"end":{"line":63,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":65,"character":14},"end":{"line":65,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":67,"character":12},"end":{"line":67,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":68,"character":12},"end":{"line":68,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":70,"character":16},"end":{"line":70,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":94,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":74}}}Content-Length: 296

{"jsonrpc":"2.0","id":95,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":95,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":75},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":17}},"rangeLength":17,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":96,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":96,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":89,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3794

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":53}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":21,"character":56},"end":{"line":21,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":24,"character":10},"end":{"line":24,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":24,"character":26},"end":{"line":24,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":29,"character":10},"end":{"line":29,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":32,"character":20},"end":{"line":32,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":32,"character":34},"end":{"line":32,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":37,"character":14},"end":{"line":37,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":39,"character":12},"end":{"line":39,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":41,"character":20},"end":{"line":41,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":41,"character":34},"end":{"line":41,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":45,"character":10},"end":{"line":45,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":46,"character":14},"end":{"line":46,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":48,"character":12},"end":{"line":48,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":50,"character":20},"end":{"line":50,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":76},"contentChanges":[{"range":{"start":{"line":1,"character":0},"end":{"line":2,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":97,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 778

{"id":97,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":88,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":98,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":98,"result":[],"jsonrpc":"2.0"}Content-Length: 3794

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":20,"character":46},"end":{"line":20,"character":53}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":20,"character":56},"end":{"line":20,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'countDownMode'"},{"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'COUNTING'"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tenths'"},{"range":{"start":{"line":29,"character":10},"end":{"line":29,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":31,"character":20},"end":{"line":31,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":31,"character":34},"end":{"line":31,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":35,"character":10},"end":{"line":35,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":38,"character":12},"end":{"line":38,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":40,"character":20},"end":{"line":40,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"},{"range":{"start":{"line":40,"character":34},"end":{"line":40,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":44,"character":10},"end":{"line":44,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":45,"character":14},"end":{"line":45,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":47,"character":12},"end":{"line":47,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'seconds'"},{"range":{"start":{"line":49,"character":20},"end":{"line":49,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'minutes'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":76}}}Content-Length: 295

{"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":99,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":10}}}
>>>
Content-Length: 40

{"id":100,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":13}}}
>>>
Content-Length: 40

{"id":101,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":27}}}
>>>
Content-Length: 40

{"id":102,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":27}}}
>>>
Content-Length: 40

{"id":103,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":15,"character":0}}}
>>>
Content-Length: 40

{"id":104,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":15,"character":1}}}
>>>
Content-Length: 40

{"id":105,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":15,"character":1},"end":{"line":16,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 395

{"id":106,"result":[{"title":"Extract to function","kind":"refactor","command":{"title":"Extract to function","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractFunction","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":22,"character":1},"end":{"line":23,"character":2}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 3900

{"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":15,"character":1},"end":{"line":87,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":23}},"message":"Use of undeclared identifier 'countDownMode'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":20,"character":46},"end":{"line":20,"character":53}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":20,"character":56},"end":{"line":20,"character":63}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":23}},"message":"Use of undeclared identifier 'countDownMode'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":34}},"message":"Use of undeclared identifier 'COUNTING'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":16}},"message":"Use of undeclared identifier 'tenths'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":29,"character":10},"end":{"line":29,"character":17}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":17}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":31,"character":20},"end":{"line":31,"character":27}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":31,"character":34},"end":{"line":31,"character":41}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":35,"character":10},"end":{"line":35,"character":17}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":38,"character":12},"end":{"line":38,"character":19}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":40,"character":20},"end":{"line":40,"character":27}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":40,"character":34},"end":{"line":40,"character":41}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":44,"character":10},"end":{"line":44,"character":17}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":45,"character":14},"end":{"line":45,"character":21}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":47,"character":12},"end":{"line":47,"character":19}},"message":"Use of undeclared identifier 'seconds'","severity":1,"code":"undeclared_var_use","source":"clang"},{"range":{"start":{"line":49,"character":20},"end":{"line":49,"character":27}},"message":"Use of undeclared identifier 'minutes'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":107,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":77},"contentChanges":[{"range":{"start":{"line":15,"character":1},"end":{"line":87,"character":3}},"rangeLength":1849,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":108,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":108,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":109,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":77}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":78},"contentChanges":[{"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":110,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":110,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":79},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":15,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":111,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":111,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 40

{"id":112,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":79}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":80},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"rangeLength":0,"text":"  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":113,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":113,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":80}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":81},"contentChanges":[{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":2}},"rangeLength":0,"text":"M"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":114,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'M'"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":114,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":82},"contentChanges":[{"range":{"start":{"line":14,"character":3},"end":{"line":14,"character":3}},"rangeLength":0,"text":"F"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":115,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 373

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MF'"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":115,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":83},"contentChanges":[{"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":4}},"rangeLength":0,"text":"S"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":116,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":116,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":5},"end":{"line":14,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":118,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":83}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":84},"contentChanges":[{"range":{"start":{"line":14,"character":5},"end":{"line":14,"character":5}},"rangeLength":0,"text":"."}]}}Content-Length: 281

{"jsonrpc":"2.0","id":119,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":6},"context":{"triggerKind":2,"triggerCharacter":"."}}}Content-Length: 197

{"jsonrpc":"2.0","id":120,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 8800

{"id":119,"result":{"isIncomplete":false,"items":[{"label":" beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1, unsigned int loopDelayPeriod = 0)","kind":2,"detail":"void","sortText":"3ee51eb8beep","filterText":"beep","insertText":"beep()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"beep()"}},{"label":" blinkDisplay(byte digits, byte enabled = ON)","kind":2,"detail":"void","sortText":"3ee51eb8blinkDisplay","filterText":"blinkDisplay","insertText":"blinkDisplay(${1:byte digits})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"blinkDisplay(${1:byte digits})"}},{"label":" blinkLeds(byte leds, byte enabled = ON)","kind":2,"detail":"void","sortText":"3ee51eb8blinkLeds","filterText":"blinkLeds","insertText":"blinkLeds(${1:byte leds})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"blinkLeds(${1:byte leds})"}},{"label":" disablePulseInCounter()","kind":2,"detail":"void","sortText":"3ee51eb8disablePulseInCounter","filterText":"disablePulseInCounter","insertText":"disablePulseInCounter()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"disablePulseInCounter()"}},{"label":" getButton()","kind":2,"detail":"byte","sortText":"3ee51eb8getButton","filterText":"getButton","insertText":"getButton()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"getButton()"}},{"label":" getLM35Data()","kind":2,"detail":"int","sortText":"3ee51eb8getLM35Data","filterText":"getLM35Data","insertText":"getLM35Data()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"getLM35Data()"}},{"label":" getPulseInPeriod()","kind":2,"detail":"unsigned int","sortText":"3ee51eb8getPulseInPeriod","filterText":"getPulseInPeriod","insertText":"getPulseInPeriod()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"getPulseInPeriod()"}},{"label":" getPulseInTotalCount()","kind":2,"detail":"unsigned long","sortText":"3ee51eb8getPulseInTotalCount","filterText":"getPulseInTotalCount","insertText":"getPulseInTotalCount()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"getPulseInTotalCount()"}},{"label":" getSonarDataCm(byte triggerPin, byte echoPin)","kind":2,"detail":"unsigned int","sortText":"3ee51eb8getSonarDataCm","filterText":"getSonarDataCm","insertText":"getSonarDataCm(${1:byte triggerPin}, ${2:byte echoPin})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"getSonarDataCm(${1:byte triggerPin}, ${2:byte echoPin})"}},{"label":" getTimer()","kind":2,"detail":"unsigned long","sortText":"3ee51eb8getTimer","filterText":"getTimer","insertText":"getTimer()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"getTimer()"}},{"label":" initLM35(byte level = SMOOTHING_MODERATE)","kind":2,"detail":"void","sortText":"3ee51eb8initLM35","filterText":"initLM35","insertText":"initLM35()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"initLM35()"}},{"label":" initPulseInCounter(byte pin = BUTTON_1_PIN, unsigned int timeOut = 3000, byte trigger = LOW)","kind":2,"detail":"void","sortText":"3ee51eb8initPulseInCounter","filterText":"initPulseInCounter","insertText":"initPulseInCounter()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"initPulseInCounter()"}},{"label":" initSonar(byte level = SMOOTHING_MODERATE)","kind":2,"detail":"void","sortText":"3ee51eb8initSonar","filterText":"initSonar","insertText":"initSonar()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"initSonar()"}},{"label":" initialize()","kind":2,"detail":"void","sortText":"3ee51eb8initialize","filterText":"initialize","insertText":"initialize()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"initialize()"}},{"label":" isrCallBack()","kind":2,"detail":"void","sortText":"3ee51eb8isrCallBack","filterText":"isrCallBack","insertText":"isrCallBack()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"isrCallBack()"}},{"label":" manualButtonHandler()","kind":2,"detail":"void","sortText":"3ee51eb8manualButtonHandler","filterText":"manualButtonHandler","insertText":"manualButtonHandler()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"manualButtonHandler()"}},{"label":" manualDisplayRefresh()","kind":2,"detail":"void","sortText":"3ee51eb8manualDisplayRefresh","filterText":"manualDisplayRefresh","insertText":"manualDisplayRefresh()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"manualDisplayRefresh()"}},{"label":" queueButton(byte button)","kind":2,"detail":"void","sortText":"3ee51eb8queueButton","filterText":"queueButton","insertText":"queueButton(${1:byte button})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"queueButton(${1:byte button})"}},{"label":" resetPulseInTotalCount()","kind":2,"detail":"void","sortText":"3ee51eb8resetPulseInTotalCount","filterText":"resetPulseInTotalCount","insertText":"resetPulseInTotalCount()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"resetPulseInTotalCount()"}},{"label":" setBeepOffPeriod(unsigned int offPeriod)","kind":2,"detail":"void","sortText":"3ee51eb8setBeepOffPeriod","filterText":"setBeepOffPeriod","insertText":"setBeepOffPeriod(${1:unsigned int offPeriod})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"setBeepOffPeriod(${1:unsigned int offPeriod})"}},{"label":" setDisplayBrightness(byte level)","kind":2,"detail":"void","sortText":"3ee51eb8setDisplayBrightness","filterText":"setDisplayBrightness","insertText":"setDisplayBrightness(${1:byte level})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"setDisplayBrightness(${1:byte level})"}},{"label":" setPulseInTimeOut(unsigned int timeOut)","kind":2,"detail":"void","sortText":"3ee51eb8setPulseInTimeOut","filterText":"setPulseInTimeOut","insertText":"setPulseInTimeOut(${1:unsigned int timeOut})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"setPulseInTimeOut(${1:unsigned int timeOut})"}},{"label":" setTimer(unsigned long thousandths)","kind":2,"detail":"void","sortText":"3ee51eb8setTimer","filterText":"setTimer","insertText":"setTimer(${1:unsigned long thousandths})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"setTimer(${1:unsigned long thousandths})"}},{"label":" userInterrupt","kind":5,"detail":"void (*)()","sortText":"3ee51eb8userInterrupt","filterText":"userInterrupt","insertText":"userInterrupt","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"userInterrupt"}},{"label":" wait(unsigned long thousandths)","kind":2,"detail":"void","sortText":"3ee51eb8wait","filterText":"wait","insertText":"wait(${1:unsigned long thousandths})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"wait(${1:unsigned long thousandths})"}},{"label":" write(…)","kind":2,"detail":"[3 overloads]","sortText":"3ee51eb8write","filterText":"write","insertText":"write($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"write($0)"}},{"label":" writeLeds(byte leds, byte lit)","kind":2,"detail":"void","sortText":"3ee51eb8writeLeds","filterText":"writeLeds","insertText":"writeLeds(${1:byte leds}, ${2:byte lit})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"newText":"writeLeds(${1:byte leds}, ${2:byte lit})"}}]},"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":120,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":121,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":122,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":84}}}Content-Length: 344

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":85},"contentChanges":[{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"rangeLength":0,"text":"blinkDisplay(byte digits)"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":123,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 390

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":23}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":123,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 498

{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":30}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":23}},"message":"Unexpected type name 'byte': expected expression","severity":1,"code":"unexpected_typedef","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":124,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":125,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":85}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":86},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":30}},"rangeLength":11,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":126,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":126,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":128,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":127,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":128,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":86}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":87},"contentChanges":[{"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"rangeLength":0,"text":"2"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":129,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":129,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":130,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":130,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":131,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":87}}}Content-Length: 300

{"jsonrpc":"2.0","id":132,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":22},"end":{"line":14,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":132,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":88},"contentChanges":[{"range":{"start":{"line":14,"character":22},"end":{"line":14,"character":22}},"rangeLength":0,"text":";"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":133,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":133,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":134,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":135,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":88}}}Content-Length: 238

{"jsonrpc":"2.0","id":136,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":21}}}
>>>
Content-Length: 125

{"id":136,"result":[{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":18}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":137,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":89},"contentChanges":[{"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":21}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":138,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":139,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":139,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":89}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":90},"contentChanges":[{"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"rangeLength":0,"text":","}]}}Content-Length: 197

{"jsonrpc":"2.0","id":140,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":140,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":91},"contentChanges":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":21}},"rangeLength":0,"text":"2"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":140}}Content-Length: 197

{"jsonrpc":"2.0","id":141,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":141,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","id":142,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":22},"context":{"isRetrigger":false,"triggerCharacter":",","triggerKind":2}}}
>>>
Content-Length: 183

{"id":142,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":92},"contentChanges":[{"range":{"start":{"line":14,"character":22},"end":{"line":14,"character":22}},"rangeLength":0,"text":","}]}}Content-Length: 197

{"jsonrpc":"2.0","id":143,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":24}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":143,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":93},"contentChanges":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":23}},"rangeLength":0,"text":"3"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":144,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 561

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":24}},"severity":1,"code":"typecheck_call_too_many_args_at_most","source":"clang","message":"Too many arguments to function call, expected at most 2, have 3\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:96:10:\nnote: 'blinkDisplay' declared here"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":144,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","id":145,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":24},"context":{"isRetrigger":true,"triggerCharacter":",","triggerKind":2}}}
>>>
Content-Length: 93

{"id":145,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":146,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 669

{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":24},"end":{"line":14,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":24}},"message":"Too many arguments to function call, expected at most 2, have 3\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:96:10:\nnote: 'blinkDisplay' declared here","severity":1,"code":"typecheck_call_too_many_args_at_most","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":146,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":147,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":93}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":94},"contentChanges":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":24}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":148,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":24}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":148,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":95},"contentChanges":[{"range":{"start":{"line":14,"character":22},"end":{"line":14,"character":23}},"rangeLength":1,"text":""}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":148}}Content-Length: 197

{"jsonrpc":"2.0","id":149,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":149,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":96},"contentChanges":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":22}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":150,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":150,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":97},"contentChanges":[{"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":21}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":151,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":151,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":98},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":152,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 582

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"severity":1,"code":"typecheck_call_too_few_args_at_least_one","source":"clang","message":"Too few arguments to function call, at least argument 'digits' must be specified\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:96:10:\nnote: 'blinkDisplay' declared here"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":152,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":99},"contentChanges":[{"range":{"start":{"line":14,"character":18},"end":{"line":14,"character":20}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":153,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":154,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 398

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":18}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":153,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 38

{"id":154,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 506

{"jsonrpc":"2.0","id":156,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":18},"end":{"line":14,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":18}},"message":"Reference to non-static member function must be called","severity":1,"code":"bound_member_function","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":155,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":156,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":99}}}Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":100},"contentChanges":[{"range":{"start":{"line":14,"character":18},"end":{"line":14,"character":18}},"rangeLength":0,"text":"()"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":157,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 582

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"severity":1,"code":"typecheck_call_too_few_args_at_least_one","source":"clang","message":"Too few arguments to function call, at least argument 'digits' must be specified\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:96:10:\nnote: 'blinkDisplay' declared here"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":157,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","id":158,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":19},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 183

{"id":158,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 690

{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"message":"Too few arguments to function call, at least argument 'digits' must be specified\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:96:10:\nnote: 'blinkDisplay' declared here","severity":1,"code":"typecheck_call_too_few_args_at_least_one","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":159,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":160,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":100}}}Content-Length: 259

{"jsonrpc":"2.0","id":161,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":19},"context":{"triggerKind":1}}}
>>>
Content-Length: 48620

{"id":161,"result":{"isIncomplete":true,"items":[{"label":" uint8_t","kind":8,"sortText":"3ebebaaeuint8_t","filterText":"uint8_t","insertText":"uint8_t","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"uint8_t"}},{"label":" void","kind":14,"sortText":"3ec00000void","filterText":"void","insertText":"void","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"void"}},{"label":" loop()","kind":3,"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3eceb9faloop","filterText":"loop","insertText":"loop()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"loop()"}},{"label":" MedianOf5(int s0, int s1, int s2, int s3, int s4)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"From `\"MultiFuncShield.h\"`  \nreturns median of 5 data samples."},"sortText":"3eebb271MedianOf5","filterText":"MedianOf5","insertText":"MedianOf5(${1:int s0}, ${2:int s1}, ${3:int s2}, ${4:int s3}, ${5:int s4})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"MedianOf5(${1:int s0}, ${2:int s1}, ${3:int s2}, ${4:int s3}, ${5:int s4})"}},{"label":" MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"From `\"MultiFuncShield.h\"`  \n\\---------------------------------------------------------------------------------------------------- Find the median value, given nine data samples."},"sortText":"3eebb271MedianOf9","filterText":"MedianOf9","insertText":"MedianOf9(${1:int s0}, ${2:int s1}, ${3:int s2}, ${4:int s3}, ${5:int s4}, ${6:int s5}, ${7:int s6}, ${8:int s7}, ${9:int s8})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"MedianOf9(${1:int s0}, ${2:int s1}, ${3:int s2}, ${4:int s3}, ${5:int s4}, ${6:int s5}, ${7:int s6}, ${8:int s7}, ${9:int s8})"}},{"label":" micros()","kind":3,"detail":"unsigned long","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3ef553e8micros","filterText":"micros","insertText":"micros()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"micros()"}},{"label":" strlen(const char *)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn size_t strlen(const char \\*src)  \n\\\\brief Calculate the length of a string.  \nThe strlen() function calculates the length of the string src, not including the terminating '\\\\\\\\0' character.  \n\\\\returns The strlen() function returns the number of characters in src."},"sortText":"3efe833dstrlen","filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlen(${1:const char *})"}},{"label":" alignof(type)","kind":15,"detail":"size_t","sortText":"3f000000alignof","filterText":"alignof","insertText":"alignof(${0:type})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"alignof(${0:type})"}},{"label":" auto","kind":14,"sortText":"3f000000auto","filterText":"auto","insertText":"auto","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"auto"}},{"label":" bool","kind":14,"sortText":"3f000000bool","filterText":"bool","insertText":"bool","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"bool"}},{"label":" char","kind":14,"sortText":"3f000000char","filterText":"char","insertText":"char","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"char"}},{"label":" char16_t","kind":14,"sortText":"3f000000char16_t","filterText":"char16_t","insertText":"char16_t","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"char16_t"}},{"label":" char32_t","kind":14,"sortText":"3f000000char32_t","filterText":"char32_t","insertText":"char32_t","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"char32_t"}},{"label":" class","kind":14,"sortText":"3f000000class","filterText":"class","insertText":"class","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"class"}},{"label":" const","kind":14,"sortText":"3f000000const","filterText":"const","insertText":"const","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"const"}},{"label":" const_cast\u003ctype\u003e(expression)","kind":15,"sortText":"3f000000const_cast","filterText":"const_cast","insertText":"const_cast\u003c${1:type}\u003e(${0:expression})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"const_cast\u003c${1:type}\u003e(${0:expression})"}},{"label":" decltype(expression)","kind":15,"sortText":"3f000000decltype","filterText":"decltype","insertText":"decltype(${0:expression})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"decltype(${0:expression})"}},{"label":" delete [] expression","kind":15,"detail":"void","sortText":"3f000000delete","filterText":"delete","insertText":"delete [] ${0:expression}","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"delete [] ${0:expression}"}},{"label":" delete expression","kind":15,"detail":"void","sortText":"3f000000delete","filterText":"delete","insertText":"delete ${0:expression}","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"delete ${0:expression}"}},{"label":" double","kind":14,"sortText":"3f000000double","filterText":"double","insertText":"double","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"double"}},{"label":" dynamic_cast\u003ctype\u003e(expression)","kind":15,"sortText":"3f000000dynamic_cast","filterText":"dynamic_cast","insertText":"dynamic_cast\u003c${1:type}\u003e(${0:expression})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"dynamic_cast\u003c${1:type}\u003e(${0:expression})"}},{"label":" enum","kind":14,"sortText":"3f000000enum","filterText":"enum","insertText":"enum","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"enum"}},{"label":" false","kind":15,"detail":"bool","sortText":"3f000000false","filterText":"false","insertText":"false","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"false"}},{"label":" float","kind":14,"sortText":"3f000000float","filterText":"float","insertText":"float","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"float"}},{"label":" int","kind":14,"sortText":"3f000000int","filterText":"int","insertText":"int","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"int"}},{"label":" long","kind":14,"sortText":"3f000000long","filterText":"long","insertText":"long","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"long"}},{"label":" new type[size](expressions)","kind":15,"sortText":"3f000000new","filterText":"new","insertText":"new ${1:type}[${2:size}](${0:expressions})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"new ${1:type}[${2:size}](${0:expressions})"}},{"label":" new type(expressions)","kind":15,"sortText":"3f000000new","filterText":"new","insertText":"new ${1:type}(${0:expressions})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"new ${1:type}(${0:expressions})"}},{"label":" noexcept(expression)","kind":15,"detail":"bool","sortText":"3f000000noexcept","filterText":"noexcept","insertText":"noexcept(${0:expression})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"noexcept(${0:expression})"}},{"label":" nullptr","kind":15,"detail":"std::nullptr_t","sortText":"3f000000nullptr","filterText":"nullptr","insertText":"nullptr","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"nullptr"}},{"label":" operator","kind":14,"sortText":"3f000000operator","filterText":"operator","insertText":"operator","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"operator"}},{"label":" reinterpret_cast\u003ctype\u003e(expression)","kind":15,"sortText":"3f000000reinterpret_cast","filterText":"reinterpret_cast","insertText":"reinterpret_cast\u003c${1:type}\u003e(${0:expression})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"reinterpret_cast\u003c${1:type}\u003e(${0:expression})"}},{"label":" short","kind":14,"sortText":"3f000000short","filterText":"short","insertText":"short","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"short"}},{"label":" signed","kind":14,"sortText":"3f000000signed","filterText":"signed","insertText":"signed","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"signed"}},{"label":" sizeof(expression-or-type)","kind":15,"detail":"size_t","sortText":"3f000000sizeof","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"sizeof(${0:expression-or-type})"}},{"label":" sizeof...(parameter-pack)","kind":15,"detail":"size_t","sortText":"3f000000sizeof...","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"sizeof...(${0:parameter-pack})"}},{"label":" static_cast\u003ctype\u003e(expression)","kind":15,"sortText":"3f000000static_cast","filterText":"static_cast","insertText":"static_cast\u003c${1:type}\u003e(${0:expression})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"static_cast\u003c${1:type}\u003e(${0:expression})"}},{"label":" struct","kind":14,"sortText":"3f000000struct","filterText":"struct","insertText":"struct","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"struct"}},{"label":" true","kind":15,"detail":"bool","sortText":"3f000000true","filterText":"true","insertText":"true","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"true"}},{"label":" typeid(expression-or-type)","kind":15,"detail":"std::type_info","sortText":"3f000000typeid","filterText":"typeid","insertText":"typeid(${0:expression-or-type})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"typeid(${0:expression-or-type})"}},{"label":" typename name","kind":15,"sortText":"3f000000typename","filterText":"typename","insertText":"typename ${0:name}","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"typename ${0:name}"}},{"label":" typeof(type)","kind":15,"sortText":"3f000000typeof","filterText":"typeof","insertText":"typeof(${0:type})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"typeof(${0:type})"}},{"label":" typeof expression","kind":15,"sortText":"3f000000typeof","filterText":"typeof","insertText":"typeof ${0:expression}","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"typeof ${0:expression}"}},{"label":" union","kind":14,"sortText":"3f000000union","filterText":"union","insertText":"union","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"union"}},{"label":" unsigned","kind":14,"sortText":"3f000000unsigned","filterText":"unsigned","insertText":"unsigned","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"unsigned"}},{"label":" volatile","kind":14,"sortText":"3f000000volatile","filterText":"volatile","insertText":"volatile","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"volatile"}},{"label":" wchar_t","kind":14,"sortText":"3f000000wchar_t","filterText":"wchar_t","insertText":"wchar_t","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"wchar_t"}},{"label":" abs(int __i)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The abs() function computes the absolute value of the integer \\\\c i.  \n\\\\note The abs() and labs() functions are builtins of gcc."},"sortText":"3f0f66edabs","filterText":"abs","insertText":"abs(${1:int __i})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"abs(${1:int __i})"}},{"label":" analogRead(uint8_t pin)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66edanalogRead","filterText":"analogRead","insertText":"analogRead(${1:uint8_t pin})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"analogRead(${1:uint8_t pin})"}},{"label":" atexit(void (*)())","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"dummy declarations for libstdc++ compatibility"},"sortText":"3f0f66edatexit","filterText":"atexit","insertText":"atexit(${1:void (*)()})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"atexit(${1:void (*)()})"}},{"label":" atoi(const char *__s)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The atoi() function converts the initial portion of the string pointed to by \\\\p s to integer representation. In contrast to  \n\\\\code (int)strtol(s, (char \\*\\*)NULL, 10); \\\\endcode  \nthis function does not detect overflow (\\\\c errno is not changed and the result value is not predictable), uses smaller memory (flash and stack) and works more quickly."},"sortText":"3f0f66edatoi","filterText":"atoi","insertText":"atoi(${1:const char *__s})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"atoi(${1:const char *__s})"}},{"label":" atol(const char *__s)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"The atol() function converts the initial portion of the string pointed to by \\\\p s to long integer representation. In contrast to  \n\\\\code strtol(s, (char \\*\\*)NULL, 10); \\\\endcode  \nthis function does not detect overflow (\\\\c errno is not changed and the result value is not predictable), uses smaller memory (flash and stack) and works more quickly."},"sortText":"3f0f66edatol","filterText":"atol","insertText":"atol(${1:const char *__s})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"atol(${1:const char *__s})"}},{"label":" digitalRead(uint8_t pin)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66eddigitalRead","filterText":"digitalRead","insertText":"digitalRead(${1:uint8_t pin})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"digitalRead(${1:uint8_t pin})"}},{"label":" ffs(int __val)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int ffs(int val);  \n\\\\brief This function finds the first (least significant) bit set in the input value.  \n\\\\returns The ffs() function returns the position of the first (least significant) bit set in the word val, or 0 if no bits are set.  \nThe least significant bit is position 1.  \n\\\\note For expressions that are constant at compile time, consider using the \\\\ref \\_FFS macro instead."},"sortText":"3f0f66edffs","filterText":"ffs","insertText":"ffs(${1:int __val})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"ffs(${1:int __val})"}},{"label":" ffsl(long __val)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int ffsl(long val);  \n\\\\brief Same as ffs(), for an argument of type long."},"sortText":"3f0f66edffsl","filterText":"ffsl","insertText":"ffsl(${1:long __val})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"ffsl(${1:long __val})"}},{"label":" ffsll(long long __val)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int ffsll(long long val);  \n\\\\brief Same as ffs(), for an argument of type long long."},"sortText":"3f0f66edffsll","filterText":"ffsll","insertText":"ffsll(${1:long long __val})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"ffsll(${1:long long __val})"}},{"label":" isfinite(double __x)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The isfinite() function returns a nonzero value if \\\\a \\_\\_x is finite:  \nnot plus or minus infinity, and not NaN."},"sortText":"3f0f66edisfinite","filterText":"isfinite","insertText":"isfinite(${1:double __x})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"isfinite(${1:double __x})"}},{"label":" isinf(double __x)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The function isinf() returns 1 if the argument \\\\a \\_\\_x is positive infinity, -1 if \\\\a \\_\\_x is negative infinity, and 0 otherwise.  \n\\\\note The GCC 4.3 can replace this function with inline code that returns the 1 value for both infinities (gcc bug #35509)."},"sortText":"3f0f66edisinf","filterText":"isinf","insertText":"isinf(${1:double __x})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"isinf(${1:double __x})"}},{"label":" isnan(double __x)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The function isnan() returns 1 if the argument \\\\a \\_\\_x represents a \"not-a-number\" (NaN) object, otherwise 0."},"sortText":"3f0f66edisnan","filterText":"isnan","insertText":"isnan(${1:double __x})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"isnan(${1:double __x})"}},{"label":" labs(long __i)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"The labs() function computes the absolute value of the long integer  \n\\\\c i.  \n\\\\note The abs() and labs() functions are builtins of gcc."},"sortText":"3f0f66edlabs","filterText":"labs","insertText":"labs(${1:long __i})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"labs(${1:long __i})"}},{"label":" lrint(double __x)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"The lrint() function rounds \\\\a \\_\\_x to the nearest integer, rounding the halfway cases to the even integer direction. (That is both 1.5 and 2.5 values are rounded to 2). This function is similar to rint() function,  \nbut it differs in type of return value and in that an overflow is possible.  \n\\\\return The rounded long integer value. If \\\\a \\_\\_x is not a finite number or an overflow was, this realization returns the \\\\c LONG_MIN value (0x80000000)."},"sortText":"3f0f66edlrint","filterText":"lrint","insertText":"lrint(${1:double __x})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"lrint(${1:double __x})"}},{"label":" lround(double __x)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"The lround() function rounds \\\\a \\_\\_x to the nearest integer, but rounds halfway cases away from zero (instead of to the nearest even integer).  \nThis function is similar to round() function, but it differs in type of return value and in that an overflow is possible.  \n\\\\return The rounded long integer value. If \\\\a \\_\\_x is not a finite number or an overflow was, this realization returns the \\\\c LONG_MIN value (0x80000000)."},"sortText":"3f0f66edlround","filterText":"lround","insertText":"lround(${1:double __x})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"lround(${1:double __x})"}},{"label":" map(long, long, long, long, long)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66edmap","filterText":"map","insertText":"map(${1:long}, ${2:long}, ${3:long}, ${4:long}, ${5:long})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"map(${1:long}, ${2:long}, ${3:long}, ${4:long}, ${5:long})"}},{"label":" memcmp(const void *, const void *, size_t)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int memcmp(const void \\*s1, const void \\*s2, size_t len)  \n\\\\brief Compare memory areas  \nThe memcmp() function compares the first len bytes of the memory areas s1 and s2. The comparision is performed using unsigned char operations.  \n\\\\returns The memcmp() function returns an integer less than, equal to, or greater than zero if the first len bytes of s1 is found, respectively, to be less than, to match, or be greater than the first len bytes of s2.  \n\\\\note Be sure to store the result in a 16 bit variable since you may get incorrect results if you use an unsigned char or char due to truncation.  \n\\\\warning This function is not -mint8 compatible, although if you only care about testing for equality, this function should be safe to use."},"sortText":"3f0f66edmemcmp","filterText":"memcmp","insertText":"memcmp(${1:const void *}, ${2:const void *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"memcmp(${1:const void *}, ${2:const void *}, ${3:size_t})"}},{"label":" memcmp_P(const void *, const void *, size_t)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn int memcmp_P(const void \\*s1, const void \\*s2, size_t len)  \n\\\\brief Compare memory areas  \nThe memcmp_P() function compares the first \\\\p len bytes of the memory areas \\\\p s1 and flash \\\\p s2. The comparision is performed using unsigned char operations.  \n\\\\returns The memcmp_P() function returns an integer less than, equal to, or greater than zero if the first \\\\p len bytes of \\\\p s1 is found,  \nrespectively, to be less than, to match, or be greater than the first  \n\\\\p len bytes of \\\\p s2."},"sortText":"3f0f66edmemcmp_P","filterText":"memcmp_P","insertText":"memcmp_P(${1:const void *}, ${2:const void *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"memcmp_P(${1:const void *}, ${2:const void *}, ${3:size_t})"}},{"label":" memcmp_PF(const void *, uint_farptr_t, size_t)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn int memcmp_PF(const void \\*s1, uint_farptr_t s2, size_t len)  \n\\\\brief Compare memory areas  \nThe memcmp_PF() function compares the first \\\\p len bytes of the memory areas \\\\p s1 and flash \\\\p s2. The comparision is performed using unsigned char operations. It is an equivalent of memcmp_P() function, except that it is capable working on all FLASH including the exteded area above 64kB.  \n\\\\returns The memcmp_PF() function returns an integer less than, equal to, or greater than zero if the first \\\\p len bytes of \\\\p s1 is found,  \nrespectively, to be less than, to match, or be greater than the first  \n\\\\p len bytes of \\\\p s2."},"sortText":"3f0f66edmemcmp_PF","filterText":"memcmp_PF","insertText":"memcmp_PF(${1:const void *}, ${2:uint_farptr_t}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"memcmp_PF(${1:const void *}, ${2:uint_farptr_t}, ${3:size_t})"}},{"label":" millis()","kind":3,"detail":"unsigned long","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66edmillis","filterText":"millis","insertText":"millis()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"millis()"}},{"label":" pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)","kind":3,"detail":"unsigned long","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`  \nMeasures the length (in microseconds) of a pulse on the pin; state is HIGH or LOW, the type of pulse to measure. Works on pulses from 2-3 microseconds to 3 minutes in length, but must be called at least a few dozen microseconds before the start of the pulse.  \nThis function performs better with short pulses in noInterrupt() context"},"sortText":"3f0f66edpulseIn","filterText":"pulseIn","insertText":"pulseIn(${1:uint8_t pin}, ${2:uint8_t state}, ${3:unsigned long timeout})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"pulseIn(${1:uint8_t pin}, ${2:uint8_t state}, ${3:unsigned long timeout})"}},{"label":" pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout)","kind":3,"detail":"unsigned long","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66edpulseInLong","filterText":"pulseInLong","insertText":"pulseInLong(${1:uint8_t pin}, ${2:uint8_t state}, ${3:unsigned long timeout})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"pulseInLong(${1:uint8_t pin}, ${2:uint8_t state}, ${3:unsigned long timeout})"}},{"label":" rand()","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The rand() function computes a sequence of pseudo-random integers in the range of 0 to \\\\c RAND_MAX (as defined by the header file \u003cstdlib.h\u003e).  \nThe srand() function sets its argument \\\\c seed as the seed for a new sequence of pseudo-random numbers to be returned by rand(). These sequences are repeatable by calling srand() with the same seed value.  \nIf no seed value is provided, the functions are automatically seeded with a value of 1.  \nIn compliance with the C standard, these functions operate on  \n\\\\c int arguments. Since the underlying algorithm already uses 32-bit calculations, this causes a loss of precision. See  \n\\\\c random() for an alternate set of functions that retains full 32-bit precision."},"sortText":"3f0f66edrand","filterText":"rand","insertText":"rand()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"rand()"}},{"label":" rand_r(unsigned long *__ctx)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"Variant of rand() that stores the context in the user-supplied variable located at \\\\c ctx instead of a static library variable so the function becomes re-entrant."},"sortText":"3f0f66edrand_r","filterText":"rand_r","insertText":"rand_r(${1:unsigned long *__ctx})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"rand_r(${1:unsigned long *__ctx})"}},{"label":" random(…)","kind":3,"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"WMath prototypes"},"sortText":"3f0f66edrandom","filterText":"random","insertText":"random($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"random($0)"}},{"label":" random(long, long)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66edrandom","filterText":"random","insertText":"random(${1:long}, ${2:long})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"random(${1:long}, ${2:long})"}},{"label":" random_r(unsigned long *__ctx)","kind":3,"detail":"long","documentation":{"kind":"markdown","value":"\\\\ingroup avr_stdlib Variant of random() that stores the context in the user-supplied variable located at \\\\c ctx instead of a static library variable so the function becomes re-entrant."},"sortText":"3f0f66edrandom_r","filterText":"random_r","insertText":"random_r(${1:unsigned long *__ctx})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"random_r(${1:unsigned long *__ctx})"}},{"label":" shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)","kind":3,"detail":"uint8_t","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"sortText":"3f0f66edshiftIn","filterText":"shiftIn","insertText":"shiftIn(${1:uint8_t dataPin}, ${2:uint8_t clockPin}, ${3:uint8_t bitOrder})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"shiftIn(${1:uint8_t dataPin}, ${2:uint8_t clockPin}, ${3:uint8_t bitOrder})"}},{"label":" signbit(double __x)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"The signbit() function returns a nonzero value if the value of \\\\a \\_\\_x has its sign bit set. This is not the same as \\`\\\\a \\_\\_x \u003c 0.0',  \nbecause IEEE 754 floating point allows zero to be signed. The comparison \\`-0.0 \u003c 0.0' is false, but \\`signbit (-0.0)' will return a nonzero value."},"sortText":"3f0f66edsignbit","filterText":"signbit","insertText":"signbit(${1:double __x})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"signbit(${1:double __x})"}},{"label":" strcasecmp(const char *, const char *)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int strcasecmp(const char \\*s1, const char \\*s2)  \n\\\\brief Compare two strings ignoring case.  \nThe strcasecmp() function compares the two strings \\\\p s1 and \\\\p s2,  \nignoring the case of the characters.  \n\\\\returns The strcasecmp() function returns an integer less than,  \nequal to, or greater than zero if \\\\p s1 is found, respectively, to be less than, to match, or be greater than \\\\p s2. A consequence of the ordering used by strcasecmp() is that if \\\\p s1 is an initial substring of \\\\p s2, then \\\\p s1 is considered to be \"less than\"  \n\\\\p s2."},"sortText":"3f0f66edstrcasecmp","filterText":"strcasecmp","insertText":"strcasecmp(${1:const char *}, ${2:const char *})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcasecmp(${1:const char *}, ${2:const char *})"}},{"label":" strcasecmp_P(const char *, const char *)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn int strcasecmp_P(const char \\*s1, const char \\*s2)  \n\\\\brief Compare two strings ignoring case.  \nThe strcasecmp_P() function compares the two strings \\\\p s1 and \\\\p s2,  \nignoring the case of the characters.  \n\\\\param s1 A pointer to a string in the devices SRAM.  \n\\\\param s2 A pointer to a string in the devices Flash.  \n\\\\returns The strcasecmp_P() function returns an integer less than,  \nequal to, or greater than zero if \\\\p s1 is found, respectively, to be less than, to match, or be greater than \\\\p s2. A consequence of the ordering used by strcasecmp_P() is that if \\\\p s1 is an initial substring of \\\\p s2, then \\\\p s1 is considered to be \"less than\" \\\\p s2."},"sortText":"3f0f66edstrcasecmp_P","filterText":"strcasecmp_P","insertText":"strcasecmp_P(${1:const char *}, ${2:const char *})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcasecmp_P(${1:const char *}, ${2:const char *})"}},{"label":" strcasecmp_PF(const char *s1, uint_farptr_t s2)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn int strcasecmp_PF(const char \\*s1, uint_farptr_t s2)  \n\\\\brief Compare two strings ignoring case  \nThe strcasecmp_PF() function compares the two strings \\\\e s1 and \\\\e s2, ignoring the case of the characters.  \n\\\\param s1 A pointer to the first string in SRAM  \n\\\\param s2 A far pointer to the second string in Flash  \n\\\\returns The strcasecmp_PF() function returns an integer less than, equal to, or greater than zero if \\\\e s1 is found, respectively, to be less than, to match, or be greater than \\\\e s2. The contents of RAMPZ SFR are undefined when the function returns."},"sortText":"3f0f66edstrcasecmp_PF","filterText":"strcasecmp_PF","insertText":"strcasecmp_PF(${1:const char *s1}, ${2:uint_farptr_t s2})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcasecmp_PF(${1:const char *s1}, ${2:uint_farptr_t s2})"}},{"label":" strcmp(const char *, const char *)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int strcmp(const char \\*s1, const char \\*s2)  \n\\\\brief Compare two strings.  \nThe strcmp() function compares the two strings \\\\p s1 and \\\\p s2.  \n\\\\returns The strcmp() function returns an integer less than, equal to, or greater than zero if \\\\p s1 is found, respectively, to be less than, to match, or be greater than \\\\p s2. A consequence of the ordering used by strcmp() is that if \\\\p s1 is an initial substring of \\\\p s2, then \\\\p s1 is considered to be \"less than\" \\\\p s2."},"sortText":"3f0f66edstrcmp","filterText":"strcmp","insertText":"strcmp(${1:const char *}, ${2:const char *})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcmp(${1:const char *}, ${2:const char *})"}},{"label":" strcmp_P(const char *, const char *)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn int strcmp_P(const char \\*s1, const char \\*s2)  \nThe strcmp_P() function is similar to strcmp() except that \\\\p s2 is pointer to a string in program space.  \n\\\\returns The strcmp_P() function returns an integer less than, equal to, or greater than zero if \\\\p s1 is found, respectively, to be less than, to match, or be greater than \\\\p s2. A consequence of the ordering used by strcmp_P() is that if \\\\p s1 is an initial substring of \\\\p s2, then \\\\p s1 is considered to be \"less than\" \\\\p s2."},"sortText":"3f0f66edstrcmp_P","filterText":"strcmp_P","insertText":"strcmp_P(${1:const char *}, ${2:const char *})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcmp_P(${1:const char *}, ${2:const char *})"}},{"label":" strcmp_PF(const char *s1, uint_farptr_t s2)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn int strcmp_PF(const char \\*s1, uint_farptr_t s2)  \n\\\\brief Compares two strings  \nThe strcmp_PF() function is similar to strcmp() except that \\\\e s2 is a far pointer to a string in program space.  \n\\\\param s1 A pointer to the first string in SRAM  \n\\\\param s2 A far pointer to the second string in Flash  \n\\\\returns The strcmp_PF() function returns an integer less than, equal to,  \nor greater than zero if \\\\e s1 is found, respectively, to be less than, to match, or be greater than \\\\e s2. The contents of RAMPZ SFR are undefined when the function returns."},"sortText":"3f0f66edstrcmp_PF","filterText":"strcmp_PF","insertText":"strcmp_PF(${1:const char *s1}, ${2:uint_farptr_t s2})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcmp_PF(${1:const char *s1}, ${2:uint_farptr_t s2})"}},{"label":" strcoll(const char *s1, const char *s2)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"libstdc++ compatibility, dummy declarations"},"sortText":"3f0f66edstrcoll","filterText":"strcoll","insertText":"strcoll(${1:const char *s1}, ${2:const char *s2})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcoll(${1:const char *s1}, ${2:const char *s2})"}},{"label":" strcspn(const char *__s, const char *__reject)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn size_t strcspn(const char \\*s, const char \\*reject)  \nThe strcspn() function calculates the length of the initial segment of \\\\p s which consists entirely of characters not in \\\\p reject.  \n\\\\return The strcspn() function returns the number of characters in the initial segment of \\\\p s which are not in the string \\\\p reject.  \nThe terminating zero is not considered as a part of string."},"sortText":"3f0f66edstrcspn","filterText":"strcspn","insertText":"strcspn(${1:const char *__s}, ${2:const char *__reject})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcspn(${1:const char *__s}, ${2:const char *__reject})"}},{"label":" strcspn_P(const char *__s, const char *__reject)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn size_t strcspn_P(const char \\*s, const char \\*reject)  \nThe strcspn_P() function calculates the length of the initial segment of \\\\p s which consists entirely of characters not in \\\\p reject. This function is similar to strcspn() except that \\\\p reject is a pointer to a string in program space.  \n\\\\return The strcspn_P() function returns the number of characters in the initial segment of \\\\p s which are not in the string \\\\p reject.  \nThe terminating zero is not considered as a part of string."},"sortText":"3f0f66edstrcspn_P","filterText":"strcspn_P","insertText":"strcspn_P(${1:const char *__s}, ${2:const char *__reject})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strcspn_P(${1:const char *__s}, ${2:const char *__reject})"}},{"label":" strlcat(char *, const char *, size_t)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn size_t strlcat(char \\*dst, const char \\*src, size_t siz)  \n\\\\brief Concatenate two strings.  \nAppends \\\\p src to string \\\\p dst of size \\\\p siz (unlike strncat(),  \n\\\\p siz is the full size of \\\\p dst, not space left). At most \\\\p siz-1 characters will be copied. Always NULL terminates (unless \\\\p siz \u003c=  \n\\\\p strlen(dst)).  \n\\\\returns The strlcat() function returns strlen(src) + MIN(siz,  \nstrlen(initial dst)). If retval \u003e= siz, truncation occurred."},"sortText":"3f0f66edstrlcat","filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})"}},{"label":" strlcat_P(char *, const char *, size_t)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn size_t strlcat_P(char \\*dst, const char \\*src, size_t siz)  \n\\\\brief Concatenate two strings.  \nThe strlcat_P() function is similar to strlcat(), except that the \\\\p src string must be located in program space (flash).  \nAppends \\\\p src to string \\\\p dst of size \\\\p siz (unlike strncat(),  \n\\\\p siz is the full size of \\\\p dst, not space left). At most \\\\p siz-1 characters will be copied. Always NULL terminates (unless \\\\p siz \u003c=  \n\\\\p strlen(dst)).  \n\\\\returns The strlcat_P() function returns strlen(src) + MIN(siz,  \nstrlen(initial dst)). If retval \u003e= siz, truncation occurred."},"sortText":"3f0f66edstrlcat_P","filterText":"strlcat_P","insertText":"strlcat_P(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlcat_P(${1:char *}, ${2:const char *}, ${3:size_t})"}},{"label":" strlcat_PF(char *dst, uint_farptr_t src, size_t siz)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn size_t strlcat_PF(char \\*dst, uint_farptr_t src, size_t n)  \n\\\\brief Concatenate two strings  \nThe strlcat_PF() function is similar to strlcat(), except that the \\\\e src string must be located in program space (flash) and is addressed using a far pointer.  \nAppends src to string dst of size \\\\e n (unlike strncat(), \\\\e n is the full size of \\\\e dst, not space left). At most \\\\e n-1 characters will be copied. Always NULL terminates (unless \\\\e n \u003c= strlen(\\\\e dst)).  \n\\\\param dst A pointer to the destination string in SRAM  \n\\\\param src A far pointer to the source string in Flash  \n\\\\param n The total number of bytes allocated to the destination string  \n\\\\returns The strlcat_PF() function returns strlen(\\\\e src) + MIN(\\\\e n,  \nstrlen(initial \\\\e dst)). If retval \u003e= \\\\e n, truncation occurred. The contents of RAMPZ SFR are undefined when the funcion returns."},"sortText":"3f0f66edstrlcat_PF","filterText":"strlcat_PF","insertText":"strlcat_PF(${1:char *dst}, ${2:uint_farptr_t src}, ${3:size_t siz})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlcat_PF(${1:char *dst}, ${2:uint_farptr_t src}, ${3:size_t siz})"}},{"label":" strlcpy(char *, const char *, size_t)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn size_t strlcpy(char \\*dst, const char \\*src, size_t siz)  \n\\\\brief Copy a string.  \nCopy \\\\p src to string \\\\p dst of size \\\\p siz. At most \\\\p siz-1 characters will be copied. Always NULL terminates (unless \\\\p siz == 0).  \n\\\\returns The strlcpy() function returns strlen(src). If retval \u003e= siz,  \ntruncation occurred."},"sortText":"3f0f66edstrlcpy","filterText":"strlcpy","insertText":"strlcpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlcpy(${1:char *}, ${2:const char *}, ${3:size_t})"}},{"label":" strlcpy_P(char *, const char *, size_t)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn size_t strlcpy_P(char \\*dst, const char \\*src, size_t siz)  \n\\\\brief Copy a string from progmem to RAM.  \nCopy \\\\p src to string \\\\p dst of size \\\\p siz. At most \\\\p siz-1 characters will be copied. Always NULL terminates (unless \\\\p siz == 0).  \nThe strlcpy_P() function is similar to strlcpy() except that the  \n\\\\p src is pointer to a string in memory space.  \n\\\\returns The strlcpy_P() function returns strlen(src). If retval \u003e= siz, truncation occurred."},"sortText":"3f0f66edstrlcpy_P","filterText":"strlcpy_P","insertText":"strlcpy_P(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlcpy_P(${1:char *}, ${2:const char *}, ${3:size_t})"}},{"label":" strlcpy_PF(char *dst, uint_farptr_t src, size_t siz)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn size_t strlcpy_PF(char \\*dst, uint_farptr_t src, size_t siz)  \n\\\\brief Copy a string from progmem to RAM.  \nCopy src to string dst of size siz. At most siz-1 characters will be copied. Always NULL terminates (unless siz == 0).  \n\\\\returns The strlcpy_PF() function returns strlen(src). If retval \u003e= siz,  \ntruncation occurred. The contents of RAMPZ SFR are undefined when the function returns."},"sortText":"3f0f66edstrlcpy_PF","filterText":"strlcpy_PF","insertText":"strlcpy_PF(${1:char *dst}, ${2:uint_farptr_t src}, ${3:size_t siz})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlcpy_PF(${1:char *dst}, ${2:uint_farptr_t src}, ${3:size_t siz})"}},{"label":" strlen_P(const char *s)","kind":3,"detail":"size_t","sortText":"3f0f66edstrlen_P","filterText":"strlen_P","insertText":"strlen_P(${1:const char *s})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlen_P(${1:const char *s})"}},{"label":" strlen_PF(uint_farptr_t src)","kind":3,"detail":"size_t","documentation":{"kind":"markdown","value":"\\\\ingroup avr_pgmspace  \n\\\\fn size_t strlen_PF(uint_farptr_t s)  \n\\\\brief Obtain the length of a string  \nThe strlen_PF() function is similar to strlen(), except that \\\\e s is a far pointer to a string in program space.  \n\\\\param s A far pointer to the string in flash  \n\\\\returns The strlen_PF() function returns the number of characters in  \n\\\\e s. The contents of RAMPZ SFR are undefined when the function returns."},"sortText":"3f0f66edstrlen_PF","filterText":"strlen_PF","insertText":"strlen_PF(${1:uint_farptr_t src})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strlen_PF(${1:uint_farptr_t src})"}},{"label":" strncasecmp(const char *, const char *, size_t)","kind":3,"detail":"int","documentation":{"kind":"markdown","value":"\\\\ingroup avr_string  \n\\\\fn int strncasecmp(const char \\*s1, const char \\*s2, size_t len)  \n\\\\brief Compare two strings ignoring case.  \nThe strncasecmp() function is similar to strcasecmp(), except it only compares the first \\\\p len characters of \\\\p s1.  \n\\\\returns The strncasecmp() function returns an integer less than,  \nequal to, or greater than zero if \\\\p s1 (or the first \\\\p len bytes thereof) is found, respectively, to be less than, to match, or be greater than \\\\p s2. A consequence of the ordering used by strncasecmp() is that if \\\\p s1 is an initial substring of \\\\p s2,  \nthen \\\\p s1 is considered to be \"less than\" \\\\p s2."},"sortText":"3f0f66edstrncasecmp","filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})"}}]},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":162,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":18}}}Content-Length: 259

{"jsonrpc":"2.0","id":163,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":18},"context":{"triggerKind":1}}}
>>>
Content-Length: 125

{"id":162,"result":[{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":18}},"kind":1}],"jsonrpc":"2.0"}Content-Length: 377

{"id":163,"result":{"isIncomplete":false,"items":[{"label":" blinkDisplay(byte digits, byte enabled = ON)","kind":2,"detail":"void","sortText":"3e651eb8blinkDisplay","filterText":"blinkDisplay","insertText":"blinkDisplay","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":18}},"newText":"blinkDisplay"}}]},"jsonrpc":"2.0"}
<<<
Content-Length: 259

{"jsonrpc":"2.0","id":164,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":17},"context":{"triggerKind":1}}}
>>>
Content-Length: 413

{"id":164,"result":{"isIncomplete":false,"items":[{"label":" blinkDisplay(byte digits, byte enabled = ON)","kind":2,"detail":"void","sortText":"3ee51eb8blinkDisplay","filterText":"blinkDisplay","insertText":"blinkDisplay(${1:byte digits})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":17}},"newText":"blinkDisplay(${1:byte digits})"}}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":17},"end":{"line":14,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":165,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 259

{"jsonrpc":"2.0","id":166,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":16},"context":{"triggerKind":1}}}
>>>
Content-Length: 413

{"id":166,"result":{"isIncomplete":false,"items":[{"label":" blinkDisplay(byte digits, byte enabled = ON)","kind":2,"detail":"void","sortText":"3ee51eb8blinkDisplay","filterText":"blinkDisplay","insertText":"blinkDisplay(${1:byte digits})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":16}},"newText":"blinkDisplay(${1:byte digits})"}}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":167,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":16},"end":{"line":14,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":167,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 690

{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"message":"Too few arguments to function call, at least argument 'digits' must be specified\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:96:10:\nnote: 'blinkDisplay' declared here","severity":1,"code":"typecheck_call_too_few_args_at_least_one","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":168,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":101},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":169,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":169,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":170,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":170,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":171,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":101}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":102},"contentChanges":[{"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"rangeLength":0,"text":","}]}}Content-Length: 197

{"jsonrpc":"2.0","id":172,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":172,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","id":173,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":21},"context":{"isRetrigger":false,"triggerCharacter":",","triggerKind":2}}}
>>>
Content-Length: 183

{"id":173,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 470

{"jsonrpc":"2.0","id":175,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":22}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":174,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":175,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":102}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":103},"contentChanges":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":21}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":176,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":22}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 't'"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":176,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":104},"contentChanges":[{"range":{"start":{"line":14,"character":22},"end":{"line":14,"character":22}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":176}}Content-Length: 197

{"jsonrpc":"2.0","id":177,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tr'"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":177,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":105},"contentChanges":[{"range":{"start":{"line":14,"character":23},"end":{"line":14,"character":23}},"rangeLength":0,"text":"u"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":178,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tru'"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":178,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":106},"contentChanges":[{"range":{"start":{"line":14,"character":24},"end":{"line":14,"character":24}},"rangeLength":0,"text":"e"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":178}}Content-Length: 197

{"jsonrpc":"2.0","id":179,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":180,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":179,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 38

{"id":180,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":181,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":182,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":25},"end":{"line":14,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":181,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":182,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":106}}}Content-Length: 300

{"jsonrpc":"2.0","id":183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":27},"end":{"line":14,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":183,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":184,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":25}}}
>>>
Content-Length: 125

{"id":184,"result":[{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":18}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":185,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":20}}}
>>>
Content-Length: 125

{"id":185,"result":[{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":18}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":186,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":107},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":187,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":187,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":108},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"rangeLength":0,"text":"2"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":188,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":188,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":189,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":190,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":189,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":190,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":108}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":109},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":191,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":191,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":192,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 470

{"jsonrpc":"2.0","id":193,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":192,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":193,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":110},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"rangeLength":0,"text":"0"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":194,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":194,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":195,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":196,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":195,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":196,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":110}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":111},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":197,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 779

{"id":197,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":198,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 470

{"jsonrpc":"2.0","id":199,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":20}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":198,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":199,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":112},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":200,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 779

{"id":200,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":113},"contentChanges":[{"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"rangeLength":0,"text":"0"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":201,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":201,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":202,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":202,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":203,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":21},"end":{"line":14,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":203,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":113}}}Content-Length: 299

{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":204,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":114},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":28}},"rangeLength":28,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":205,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":114}}}Content-Length: 299

{"jsonrpc":"2.0","id":206,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":48}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":206,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":115},"contentChanges":[{"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":48}},"rangeLength":48,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":207,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":207,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":116},"contentChanges":[{"range":{"start":{"line":12,"character":13},"end":{"line":13,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":208,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 779

{"id":208,"result":[{"name":"setup","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":11}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":4,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":4,"character":5},"end":{"line":4,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":209,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":209,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":116}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":21},"end":{"line":8,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 38

{"id":210,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":117},"contentChanges":[{"range":{"start":{"line":8,"character":21},"end":{"line":8,"character":21}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":210}}Content-Length: 197

{"jsonrpc":"2.0","id":211,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 424

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":118},"contentChanges":[{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"rangeLength":0,"text":"\n  "},{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":211}}Content-Length: 197

{"jsonrpc":"2.0","id":212,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":211,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 410

{"id":212,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":118}}}Content-Length: 348

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":119},"contentChanges":[{"range":{"start":{"line":10,"character":2},"end":{"line":10,"character":2}},"rangeLength":0,"text":"  MFS.blinkDisplay(10,true);"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":213,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":213,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":214,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":119}}}Content-Length: 226

{"jsonrpc":"2.0","id":215,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":21}}}
>>>
Content-Length: 40

{"id":215,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":216,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":22}}}
>>>
Content-Length: 38

{"id":216,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":217,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":217,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":120},"contentChanges":[{"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":23}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":218,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":4,"jsonrpc":"2.0"}Content-Length: 410

{"id":218,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":120}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":121},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":219,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":219,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":122},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":21}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":220,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":220,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":123},"contentChanges":[{"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":22}},"rangeLength":0,"text":"2"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":221,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":222,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 410

{"id":221,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 38

{"id":222,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":223,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":224,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":223,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":224,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":124},"contentChanges":[{"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":23}},"rangeLength":0,"text":"3"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":225,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":225,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":226,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":24},"end":{"line":10,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":226,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":124}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":125},"contentChanges":[{"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":24}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":227,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":227,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":228,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":126},"contentChanges":[{"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":23}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":229,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":229,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":230,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":126}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":127},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":231,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":231,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":232,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 470

{"jsonrpc":"2.0","id":233,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":232,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":233,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":127}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":128},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":21}},"rangeLength":0,"text":"3"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":234,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 410

{"id":234,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":235,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":236,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":235,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":236,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":128}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":129},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":237,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":237,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":238,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 470

{"jsonrpc":"2.0","id":239,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":22}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":238,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":239,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":129}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":130},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":21}},"rangeLength":0,"text":"9"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":240,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":240,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":241,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":242,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":241,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":242,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":130}}}Content-Length: 225

{"jsonrpc":"2.0","id":243,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":7}}}
>>>
Content-Length: 416

{"id":243,"result":{"contents":{"kind":"markdown","value":"### instance-method `blinkDisplay`  \n\n---\n→ `void`  \nParameters:  \n- `byte digits`\n- `byte enabled = 1`\n\nBlinks the digits on the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void blinkDisplay(byte digits, byte enabled = 1)\n```"},"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":244,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":8}}}
>>>
Content-Length: 417

{"id":244,"result":{"contents":{"kind":"markdown","value":"### instance-method `blinkDisplay`  \n\n---\n→ `void`  \nParameters:  \n- `byte digits`\n- `byte enabled = 1`\n\nBlinks the digits on the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void blinkDisplay(byte digits, byte enabled = 1)\n```"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":245,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":8}}}
>>>
Content-Length: 125

{"id":245,"result":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":20}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":246,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":246,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":247,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":247,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":248,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":23}}}
>>>
Content-Length: 40

{"id":248,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":131},"contentChanges":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":29}},"rangeLength":21,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":249,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":249,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":132},"contentChanges":[{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":250,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":250,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":251,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":252,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":251,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":252,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":133},"contentChanges":[{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":7}},"rangeLength":0,"text":"."}]}}Content-Length: 281

{"jsonrpc":"2.0","id":253,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":8},"context":{"triggerKind":2,"triggerCharacter":"."}}}Content-Length: 197

{"jsonrpc":"2.0","id":254,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 8800

{"id":253,"result":{"isIncomplete":false,"items":[{"label":" beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1, unsigned int loopDelayPeriod = 0)","kind":2,"detail":"void","sortText":"3ee51eb8beep","filterText":"beep","insertText":"beep()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"beep()"}},{"label":" blinkDisplay(byte digits, byte enabled = ON)","kind":2,"detail":"void","sortText":"3ee51eb8blinkDisplay","filterText":"blinkDisplay","insertText":"blinkDisplay(${1:byte digits})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"blinkDisplay(${1:byte digits})"}},{"label":" blinkLeds(byte leds, byte enabled = ON)","kind":2,"detail":"void","sortText":"3ee51eb8blinkLeds","filterText":"blinkLeds","insertText":"blinkLeds(${1:byte leds})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"blinkLeds(${1:byte leds})"}},{"label":" disablePulseInCounter()","kind":2,"detail":"void","sortText":"3ee51eb8disablePulseInCounter","filterText":"disablePulseInCounter","insertText":"disablePulseInCounter()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"disablePulseInCounter()"}},{"label":" getButton()","kind":2,"detail":"byte","sortText":"3ee51eb8getButton","filterText":"getButton","insertText":"getButton()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"getButton()"}},{"label":" getLM35Data()","kind":2,"detail":"int","sortText":"3ee51eb8getLM35Data","filterText":"getLM35Data","insertText":"getLM35Data()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"getLM35Data()"}},{"label":" getPulseInPeriod()","kind":2,"detail":"unsigned int","sortText":"3ee51eb8getPulseInPeriod","filterText":"getPulseInPeriod","insertText":"getPulseInPeriod()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"getPulseInPeriod()"}},{"label":" getPulseInTotalCount()","kind":2,"detail":"unsigned long","sortText":"3ee51eb8getPulseInTotalCount","filterText":"getPulseInTotalCount","insertText":"getPulseInTotalCount()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"getPulseInTotalCount()"}},{"label":" getSonarDataCm(byte triggerPin, byte echoPin)","kind":2,"detail":"unsigned int","sortText":"3ee51eb8getSonarDataCm","filterText":"getSonarDataCm","insertText":"getSonarDataCm(${1:byte triggerPin}, ${2:byte echoPin})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"getSonarDataCm(${1:byte triggerPin}, ${2:byte echoPin})"}},{"label":" getTimer()","kind":2,"detail":"unsigned long","sortText":"3ee51eb8getTimer","filterText":"getTimer","insertText":"getTimer()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"getTimer()"}},{"label":" initLM35(byte level = SMOOTHING_MODERATE)","kind":2,"detail":"void","sortText":"3ee51eb8initLM35","filterText":"initLM35","insertText":"initLM35()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"initLM35()"}},{"label":" initPulseInCounter(byte pin = BUTTON_1_PIN, unsigned int timeOut = 3000, byte trigger = LOW)","kind":2,"detail":"void","sortText":"3ee51eb8initPulseInCounter","filterText":"initPulseInCounter","insertText":"initPulseInCounter()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"initPulseInCounter()"}},{"label":" initSonar(byte level = SMOOTHING_MODERATE)","kind":2,"detail":"void","sortText":"3ee51eb8initSonar","filterText":"initSonar","insertText":"initSonar()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"initSonar()"}},{"label":" initialize()","kind":2,"detail":"void","sortText":"3ee51eb8initialize","filterText":"initialize","insertText":"initialize()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"initialize()"}},{"label":" isrCallBack()","kind":2,"detail":"void","sortText":"3ee51eb8isrCallBack","filterText":"isrCallBack","insertText":"isrCallBack()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"isrCallBack()"}},{"label":" manualButtonHandler()","kind":2,"detail":"void","sortText":"3ee51eb8manualButtonHandler","filterText":"manualButtonHandler","insertText":"manualButtonHandler()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"manualButtonHandler()"}},{"label":" manualDisplayRefresh()","kind":2,"detail":"void","sortText":"3ee51eb8manualDisplayRefresh","filterText":"manualDisplayRefresh","insertText":"manualDisplayRefresh()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"manualDisplayRefresh()"}},{"label":" queueButton(byte button)","kind":2,"detail":"void","sortText":"3ee51eb8queueButton","filterText":"queueButton","insertText":"queueButton(${1:byte button})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"queueButton(${1:byte button})"}},{"label":" resetPulseInTotalCount()","kind":2,"detail":"void","sortText":"3ee51eb8resetPulseInTotalCount","filterText":"resetPulseInTotalCount","insertText":"resetPulseInTotalCount()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"resetPulseInTotalCount()"}},{"label":" setBeepOffPeriod(unsigned int offPeriod)","kind":2,"detail":"void","sortText":"3ee51eb8setBeepOffPeriod","filterText":"setBeepOffPeriod","insertText":"setBeepOffPeriod(${1:unsigned int offPeriod})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"setBeepOffPeriod(${1:unsigned int offPeriod})"}},{"label":" setDisplayBrightness(byte level)","kind":2,"detail":"void","sortText":"3ee51eb8setDisplayBrightness","filterText":"setDisplayBrightness","insertText":"setDisplayBrightness(${1:byte level})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"setDisplayBrightness(${1:byte level})"}},{"label":" setPulseInTimeOut(unsigned int timeOut)","kind":2,"detail":"void","sortText":"3ee51eb8setPulseInTimeOut","filterText":"setPulseInTimeOut","insertText":"setPulseInTimeOut(${1:unsigned int timeOut})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"setPulseInTimeOut(${1:unsigned int timeOut})"}},{"label":" setTimer(unsigned long thousandths)","kind":2,"detail":"void","sortText":"3ee51eb8setTimer","filterText":"setTimer","insertText":"setTimer(${1:unsigned long thousandths})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"setTimer(${1:unsigned long thousandths})"}},{"label":" userInterrupt","kind":5,"detail":"void (*)()","sortText":"3ee51eb8userInterrupt","filterText":"userInterrupt","insertText":"userInterrupt","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"userInterrupt"}},{"label":" wait(unsigned long thousandths)","kind":2,"detail":"void","sortText":"3ee51eb8wait","filterText":"wait","insertText":"wait(${1:unsigned long thousandths})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"wait(${1:unsigned long thousandths})"}},{"label":" write(…)","kind":2,"detail":"[3 overloads]","sortText":"3ee51eb8write","filterText":"write","insertText":"write($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"write($0)"}},{"label":" writeLeds(byte leds, byte lit)","kind":2,"detail":"void","sortText":"3ee51eb8writeLeds","filterText":"writeLeds","insertText":"writeLeds(${1:byte leds}, ${2:byte lit})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"newText":"writeLeds(${1:byte leds}, ${2:byte lit})"}}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":254,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":255,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":256,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":255,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":256,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":133}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":134},"contentChanges":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":257,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":257,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":135},"contentChanges":[{"range":{"start":{"line":10,"character":9},"end":{"line":10,"character":9}},"rangeLength":0,"text":"e"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":257}}Content-Length: 197

{"jsonrpc":"2.0","id":258,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 571

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":9}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'l' in 'MultiFuncShield'"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":258,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 573

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":10}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'le' in 'MultiFuncShield'"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":259,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 481

{"jsonrpc":"2.0","id":260,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":10},"end":{"line":10,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":10}},"message":"No member named 'le' in 'MultiFuncShield'","severity":1,"code":"no_member","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":259,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":260,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":135}}}Content-Length: 351

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":136},"contentChanges":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":10}},"rangeLength":2,"text":"writeLeds(byte leds, byte lit)"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":261,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":261,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 589

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":22}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"},{"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":33}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":262,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 498

{"jsonrpc":"2.0","id":263,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":22}},"message":"Unexpected type name 'byte': expected expression","severity":1,"code":"unexpected_typedef","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":262,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":263,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":136}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":137},"contentChanges":[{"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":27}},"rangeLength":9,"text":"B"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":264,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":264,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 573

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":25}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"},{"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 482

{"jsonrpc":"2.0","id":266,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":19},"end":{"line":10,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":19}},"message":"Use of undeclared identifier 'B'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":265,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":266,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":137}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":138},"contentChanges":[{"range":{"start":{"line":10,"character":19},"end":{"line":10,"character":19}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":267,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":6,"jsonrpc":"2.0"}Content-Length: 410

{"id":267,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":268,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":20},"end":{"line":10,"character":20}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":138}}}Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
>>>
Content-Length: 390

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":26}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"}]},"jsonrpc":"2.0"}Content-Length: 389

{"id":268,"result":[{"title":"Expand macro 'B1'","kind":"refactor","command":{"title":"Expand macro 'B1'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":17,"character":20},"end":{"line":17,"character":20}}}]}}],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":269,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":270,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":20},"end":{"line":10,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":269,"result":[],"jsonrpc":"2.0"}Content-Length: 389

{"id":270,"result":[{"title":"Expand macro 'B1'","kind":"refactor","command":{"title":"Expand macro 'B1'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":17,"character":20},"end":{"line":17,"character":20}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":139},"contentChanges":[{"range":{"start":{"line":10,"character":20},"end":{"line":10,"character":20}},"rangeLength":0,"text":"0"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":271,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":271,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 390

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":27}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":140},"contentChanges":[{"range":{"start":{"line":10,"character":21},"end":{"line":10,"character":21}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":272,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":272,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 390

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":24},"end":{"line":10,"character":28}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":273,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":141},"contentChanges":[{"range":{"start":{"line":10,"character":22},"end":{"line":10,"character":22}},"rangeLength":0,"text":"0"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":274,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":274,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":275,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 390

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":29}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'byte': expected expression"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":275,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":276,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":277,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":276,"result":[],"jsonrpc":"2.0"}Content-Length: 395

{"id":277,"result":[{"title":"Expand macro 'B1010'","kind":"refactor","command":{"title":"Expand macro 'B1010'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":17,"character":23},"end":{"line":17,"character":23}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":141}}}Content-Length: 238

{"jsonrpc":"2.0","id":278,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":25}}}
>>>
Content-Length: 38

{"id":278,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 498

{"jsonrpc":"2.0","id":279,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":26},"end":{"line":10,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":29}},"message":"Unexpected type name 'byte': expected expression","severity":1,"code":"unexpected_typedef","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":279,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 498

{"jsonrpc":"2.0","id":280,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":29}},"message":"Unexpected type name 'byte': expected expression","severity":1,"code":"unexpected_typedef","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":280,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 498

{"jsonrpc":"2.0","id":281,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":33}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":29}},"message":"Unexpected type name 'byte': expected expression","severity":1,"code":"unexpected_typedef","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":281,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":142},"contentChanges":[{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":33}},"rangeLength":8,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":282,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":282,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 574

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":26}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 't'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":143},"contentChanges":[{"range":{"start":{"line":10,"character":26},"end":{"line":10,"character":26}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":283,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":283,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 575

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tr'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":144},"contentChanges":[{"range":{"start":{"line":10,"character":27},"end":{"line":10,"character":27}},"rangeLength":0,"text":"u"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":284,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":284,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":145},"contentChanges":[{"range":{"start":{"line":10,"character":28},"end":{"line":10,"character":28}},"rangeLength":0,"text":"e"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":284}}Content-Length: 197

{"jsonrpc":"2.0","id":285,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 576

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tru'"}]},"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":285,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":286,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":287,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":286,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":287,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":145}}}Content-Length: 300

{"jsonrpc":"2.0","id":288,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":288,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":146},"contentChanges":[{"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"rangeLength":0,"text":";"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":289,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 410

{"id":289,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":290,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 300

{"jsonrpc":"2.0","id":291,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":290,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":291,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":146}}}Content-Length: 226

{"jsonrpc":"2.0","id":292,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":12}}}
>>>
Content-Length: 369

{"id":292,"result":{"contents":{"kind":"markdown","value":"### instance-method `writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":293,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":10}}}
>>>
Content-Length: 125

{"id":293,"result":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":17}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":294,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":10},"end":{"line":10,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":294,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":295,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":11}}}
>>>
Content-Length: 369

{"id":295,"result":{"contents":{"kind":"markdown","value":"### instance-method `writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":296,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":13}}}
>>>
Content-Length: 222

{"id":296,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":297,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":13}}}
>>>
Content-Length: 222

{"id":297,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":298,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":298,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":299,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":13},"end":{"line":10,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":299,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":300,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":23}}}
>>>
Content-Length: 40

{"id":300,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":301,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":7}}}
>>>
Content-Length: 315

{"id":301,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":417,"character":4},"end":{"line":417,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":302,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":8}}}
>>>
Content-Length: 763

{"id":302,"result":[{"range":{"start":{"line":417,"character":4},"end":{"line":417,"character":12}},"kind":3},{"range":{"start":{"line":417,"character":15},"end":{"line":417,"character":23}},"kind":2},{"range":{"start":{"line":422,"character":4},"end":{"line":422,"character":12}},"kind":3},{"range":{"start":{"line":422,"character":15},"end":{"line":422,"character":23}},"kind":2},{"range":{"start":{"line":680,"character":25},"end":{"line":680,"character":33}},"kind":2},{"range":{"start":{"line":680,"character":85},"end":{"line":680,"character":93}},"kind":2},{"range":{"start":{"line":691,"character":49},"end":{"line":691,"character":57}},"kind":2},{"range":{"start":{"line":696,"character":31},"end":{"line":696,"character":39}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":303,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":37}}}
>>>
Content-Length: 40

{"id":303,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":304,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":31}}}
>>>
Content-Length: 40

{"id":304,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":305,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":9}}}
>>>
Content-Length: 219

{"id":305,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":306,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":9}}}
>>>
Content-Length: 315

{"id":306,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":417,"character":4},"end":{"line":417,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":307,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":9}}}
>>>
Content-Length: 219

{"id":307,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":308,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 15044

{"id":308,"result":[{"name":"MultiFuncShield","kind":5,"range":{"start":{"line":63,"character":0},"end":{"line":212,"character":1}},"selectionRange":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}},"children":[{"name":"userInterrupt","kind":8,"range":{"start":{"line":68,"character":4},"end":{"line":68,"character":34}},"selectionRange":{"start":{"line":68,"character":11},"end":{"line":68,"character":24}}},{"name":"initialize","kind":6,"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":21}},"selectionRange":{"start":{"line":71,"character":9},"end":{"line":71,"character":19}}},{"name":"isrCallBack","kind":6,"range":{"start":{"line":74,"character":4},"end":{"line":74,"character":22}},"selectionRange":{"start":{"line":74,"character":9},"end":{"line":74,"character":20}}},{"name":"setTimer","kind":6,"range":{"start":{"line":77,"character":4},"end":{"line":77,"character":45}},"selectionRange":{"start":{"line":77,"character":9},"end":{"line":77,"character":17}}},{"name":"getTimer","kind":6,"range":{"start":{"line":80,"character":4},"end":{"line":80,"character":28}},"selectionRange":{"start":{"line":80,"character":18},"end":{"line":80,"character":26}}},{"name":"wait","kind":6,"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":40}},"selectionRange":{"start":{"line":83,"character":9},"end":{"line":83,"character":13}}},{"name":"write","kind":6,"range":{"start":{"line":86,"character":4},"end":{"line":86,"character":60}},"selectionRange":{"start":{"line":86,"character":9},"end":{"line":86,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":87,"character":4},"end":{"line":87,"character":27}},"selectionRange":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":88,"character":4},"end":{"line":88,"character":52}},"selectionRange":{"start":{"line":88,"character":9},"end":{"line":88,"character":14}}},{"name":"manualDisplayRefresh","kind":6,"range":{"start":{"line":92,"character":4},"end":{"line":92,"character":31}},"selectionRange":{"start":{"line":92,"character":9},"end":{"line":92,"character":29}}},{"name":"blinkDisplay","kind":6,"range":{"start":{"line":95,"character":4},"end":{"line":97,"character":21}},"selectionRange":{"start":{"line":95,"character":9},"end":{"line":95,"character":21}}},{"name":"setDisplayBrightness","kind":6,"range":{"start":{"line":99,"character":4},"end":{"line":99,"character":41}},"selectionRange":{"start":{"line":99,"character":9},"end":{"line":99,"character":29}}},{"name":"writeLeds","kind":6,"range":{"start":{"line":102,"character":4},"end":{"line":104,"character":20}},"selectionRange":{"start":{"line":102,"character":9},"end":{"line":102,"character":18}}},{"name":"blinkLeds","kind":6,"range":{"start":{"line":107,"character":4},"end":{"line":109,"character":20}},"selectionRange":{"start":{"line":107,"character":9},"end":{"line":107,"character":18}}},{"name":"beep","kind":6,"range":{"start":{"line":112,"character":4},"end":{"line":112,"character":169}},"selectionRange":{"start":{"line":112,"character":9},"end":{"line":112,"character":13}}},{"name":"setBeepOffPeriod","kind":6,"range":{"start":{"line":115,"character":4},"end":{"line":115,"character":49}},"selectionRange":{"start":{"line":115,"character":9},"end":{"line":115,"character":25}}},{"name":"queueButton","kind":6,"range":{"start":{"line":118,"character":4},"end":{"line":118,"character":34}},"selectionRange":{"start":{"line":118,"character":9},"end":{"line":118,"character":20}}},{"name":"getButton","kind":6,"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":20}},"selectionRange":{"start":{"line":121,"character":9},"end":{"line":121,"character":18}}},{"name":"manualButtonHandler","kind":6,"range":{"start":{"line":125,"character":4},"end":{"line":125,"character":30}},"selectionRange":{"start":{"line":125,"character":9},"end":{"line":125,"character":28}}},{"name":"initPulseInCounter","kind":6,"range":{"start":{"line":128,"character":4},"end":{"line":131,"character":29}},"selectionRange":{"start":{"line":128,"character":9},"end":{"line":128,"character":27}}},{"name":"disablePulseInCounter","kind":6,"range":{"start":{"line":133,"character":4},"end":{"line":133,"character":32}},"selectionRange":{"start":{"line":133,"character":9},"end":{"line":133,"character":30}}},{"name":"getPulseInPeriod","kind":6,"range":{"start":{"line":136,"character":4},"end":{"line":136,"character":35}},"selectionRange":{"start":{"line":136,"character":17},"end":{"line":136,"character":33}}},{"name":"getPulseInTotalCount","kind":6,"range":{"start":{"line":139,"character":4},"end":{"line":139,"character":40}},"selectionRange":{"start":{"line":139,"character":18},"end":{"line":139,"character":38}}},{"name":"resetPulseInTotalCount","kind":6,"range":{"start":{"line":142,"character":4},"end":{"line":142,"character":33}},"selectionRange":{"start":{"line":142,"character":9},"end":{"line":142,"character":31}}},{"name":"setPulseInTimeOut","kind":6,"range":{"start":{"line":145,"character":4},"end":{"line":145,"character":48}},"selectionRange":{"start":{"line":145,"character":9},"end":{"line":145,"character":26}}},{"name":"initSonar","kind":6,"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":51}},"selectionRange":{"start":{"line":148,"character":9},"end":{"line":148,"character":18}}},{"name":"getSonarDataCm","kind":6,"range":{"start":{"line":151,"character":4},"end":{"line":151,"character":62}},"selectionRange":{"start":{"line":151,"character":17},"end":{"line":151,"character":31}}},{"name":"initLM35","kind":6,"range":{"start":{"line":154,"character":4},"end":{"line":154,"character":50}},"selectionRange":{"start":{"line":154,"character":9},"end":{"line":154,"character":17}}},{"name":"getLM35Data","kind":6,"range":{"start":{"line":157,"character":4},"end":{"line":157,"character":21}},"selectionRange":{"start":{"line":157,"character":8},"end":{"line":157,"character":19}}},{"name":"timerReadInProgress","kind":8,"range":{"start":{"line":160,"character":4},"end":{"line":160,"character":41}},"selectionRange":{"start":{"line":160,"character":18},"end":{"line":160,"character":37}}},{"name":"timerWriteInProgress","kind":8,"range":{"start":{"line":161,"character":4},"end":{"line":161,"character":42}},"selectionRange":{"start":{"line":161,"character":18},"end":{"line":161,"character":38}}},{"name":"buttonBuffer","kind":8,"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":48}},"selectionRange":{"start":{"line":165,"character":18},"end":{"line":165,"character":30}}},{"name":"buttonBufferCount","kind":8,"range":{"start":{"line":166,"character":4},"end":{"line":166,"character":39}},"selectionRange":{"start":{"line":166,"character":18},"end":{"line":166,"character":35}}},{"name":"button_write_pos","kind":8,"range":{"start":{"line":167,"character":4},"end":{"line":167,"character":38}},"selectionRange":{"start":{"line":167,"character":18},"end":{"line":167,"character":34}}},{"name":"button_read_pos","kind":8,"range":{"start":{"line":168,"character":4},"end":{"line":168,"character":37}},"selectionRange":{"start":{"line":168,"character":18},"end":{"line":168,"character":33}}},{"name":"buttonSampleIntervalCounter","kind":8,"range":{"start":{"line":170,"character":4},"end":{"line":170,"character":47}},"selectionRange":{"start":{"line":170,"character":17},"end":{"line":170,"character":44}}},{"name":"buttonState","kind":8,"range":{"start":{"line":171,"character":4},"end":{"line":171,"character":44}},"selectionRange":{"start":{"line":171,"character":9},"end":{"line":171,"character":20}}},{"name":"buttonPressTime","kind":8,"range":{"start":{"line":172,"character":4},"end":{"line":172,"character":56}},"selectionRange":{"start":{"line":172,"character":17},"end":{"line":172,"character":32}}},{"name":"timer_volatile","kind":8,"range":{"start":{"line":174,"character":4},"end":{"line":174,"character":45}},"selectionRange":{"start":{"line":174,"character":27},"end":{"line":174,"character":41}}},{"name":"timer_safe","kind":8,"range":{"start":{"line":175,"character":4},"end":{"line":175,"character":41}},"selectionRange":{"start":{"line":175,"character":27},"end":{"line":175,"character":37}}},{"name":"beeperModifyInProgress","kind":8,"range":{"start":{"line":177,"character":4},"end":{"line":177,"character":44}},"selectionRange":{"start":{"line":177,"character":18},"end":{"line":177,"character":40}}},{"name":"beeperState","kind":8,"range":{"start":{"line":178,"character":4},"end":{"line":178,"character":32}},"selectionRange":{"start":{"line":178,"character":18},"end":{"line":178,"character":29}}},{"name":"beeperOnPeriodReloadValue","kind":8,"range":{"start":{"line":179,"character":4},"end":{"line":179,"character":54}},"selectionRange":{"start":{"line":179,"character":26},"end":{"line":179,"character":51}}},{"name":"beeperOffPeriodReloadValue","kind":8,"range":{"start":{"line":180,"character":4},"end":{"line":180,"character":55}},"selectionRange":{"start":{"line":180,"character":26},"end":{"line":180,"character":52}}},{"name":"beeperPeriodCounter","kind":8,"range":{"start":{"line":181,"character":4},"end":{"line":181,"character":49}},"selectionRange":{"start":{"line":181,"character":26},"end":{"line":181,"character":45}}},{"name":"beeperCycleReloadValue","kind":8,"range":{"start":{"line":182,"character":4},"end":{"line":182,"character":44}},"selectionRange":{"start":{"line":182,"character":18},"end":{"line":182,"character":40}}},{"name":"beeperCycleCounter","kind":8,"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":39}},"selectionRange":{"start":{"line":183,"character":18},"end":{"line":183,"character":36}}},{"name":"beeperLoopCycleCounter","kind":8,"range":{"start":{"line":184,"character":4},"end":{"line":184,"character":51}},"selectionRange":{"start":{"line":184,"character":26},"end":{"line":184,"character":48}}},{"name":"beeperLoopDelayPeriodReloadValue","kind":8,"range":{"start":{"line":185,"character":4},"end":{"line":185,"character":61}},"selectionRange":{"start":{"line":185,"character":26},"end":{"line":185,"character":58}}},{"name":"displayIdx","kind":8,"range":{"start":{"line":187,"character":4},"end":{"line":187,"character":23}},"selectionRange":{"start":{"line":187,"character":9},"end":{"line":187,"character":19}}},{"name":"blinkEnabled","kind":8,"range":{"start":{"line":188,"character":4},"end":{"line":188,"character":25}},"selectionRange":{"start":{"line":188,"character":9},"end":{"line":188,"character":21}}},{"name":"blinkState","kind":8,"range":{"start":{"line":189,"character":4},"end":{"line":189,"character":23}},"selectionRange":{"start":{"line":189,"character":9},"end":{"line":189,"character":19}}},{"name":"blinkCounter","kind":8,"range":{"start":{"line":190,"character":4},"end":{"line":190,"character":25}},"selectionRange":{"start":{"line":190,"character":9},"end":{"line":190,"character":21}}},{"name":"ledState","kind":8,"range":{"start":{"line":192,"character":4},"end":{"line":192,"character":20}},"selectionRange":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},{"name":"ledBlinkEnabled","kind":8,"range":{"start":{"line":193,"character":4},"end":{"line":193,"character":27}},"selectionRange":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},{"name":"ledOutput","kind":8,"range":{"start":{"line":194,"character":4},"end":{"line":194,"character":20}},"selectionRange":{"start":{"line":194,"character":9},"end":{"line":194,"character":18}}},{"name":"pulseInEnabled","kind":8,"range":{"start":{"line":196,"character":4},"end":{"line":196,"character":40}},"selectionRange":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}}},{"name":"pulseInReadInProgress","kind":8,"range":{"start":{"line":197,"character":4},"end":{"line":197,"character":42}},"selectionRange":{"start":{"line":197,"character":18},"end":{"line":197,"character":39}}},{"name":"pulseInWriteInProgress","kind":8,"range":{"start":{"line":198,"character":4},"end":{"line":198,"character":43}},"selectionRange":{"start":{"line":198,"character":18},"end":{"line":198,"character":40}}},{"name":"pulseInTimeOut","kind":8,"range":{"start":{"line":200,"character":4},"end":{"line":200,"character":47}},"selectionRange":{"start":{"line":200,"character":26},"end":{"line":200,"character":40}}},{"name":"pulseInPin","kind":8,"range":{"start":{"line":201,"character":4},"end":{"line":201,"character":43}},"selectionRange":{"start":{"line":201,"character":18},"end":{"line":201,"character":28}}},{"name":"pulseInPeriodCounter","kind":8,"range":{"start":{"line":202,"character":4},"end":{"line":202,"character":53}},"selectionRange":{"start":{"line":202,"character":26},"end":{"line":202,"character":46}}},{"name":"pulseInTrigger","kind":8,"range":{"start":{"line":203,"character":4},"end":{"line":203,"character":38}},"selectionRange":{"start":{"line":203,"character":18},"end":{"line":203,"character":32}}},{"name":"pulseInPeriod_volatile","kind":8,"range":{"start":{"line":204,"character":4},"end":{"line":204,"character":51}},"selectionRange":{"start":{"line":204,"character":26},"end":{"line":204,"character":48}}},{"name":"pulseInPeriod_safe","kind":8,"range":{"start":{"line":205,"character":4},"end":{"line":205,"character":47}},"selectionRange":{"start":{"line":205,"character":26},"end":{"line":205,"character":44}}},{"name":"pulseInState","kind":8,"range":{"start":{"line":206,"character":4},"end":{"line":206,"character":33}},"selectionRange":{"start":{"line":206,"character":18},"end":{"line":206,"character":30}}},{"name":"pulseInTotalCount_volatile","kind":8,"range":{"start":{"line":207,"character":4},"end":{"line":207,"character":57}},"selectionRange":{"start":{"line":207,"character":27},"end":{"line":207,"character":53}}},{"name":"pulseInTotalCount_safe","kind":8,"range":{"start":{"line":208,"character":4},"end":{"line":208,"character":53}},"selectionRange":{"start":{"line":208,"character":27},"end":{"line":208,"character":49}}},{"name":"sonarSmoothingLevel","kind":8,"range":{"start":{"line":210,"character":4},"end":{"line":210,"character":49}},"selectionRange":{"start":{"line":210,"character":9},"end":{"line":210,"character":28}}},{"name":"lm35SmoothingLevel","kind":8,"range":{"start":{"line":211,"character":4},"end":{"line":211,"character":48}},"selectionRange":{"start":{"line":211,"character":9},"end":{"line":211,"character":27}}}]},{"name":"MFS","kind":13,"range":{"start":{"line":214,"character":0},"end":{"line":214,"character":26}},"selectionRange":{"start":{"line":214,"character":23},"end":{"line":214,"character":26}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":217,"character":0},"end":{"line":217,"character":60}},"selectionRange":{"start":{"line":217,"character":11},"end":{"line":217,"character":20}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":220,"character":0},"end":{"line":220,"character":92}},"selectionRange":{"start":{"line":220,"character":11},"end":{"line":220,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":309,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":198,"character":18}}}
>>>
Content-Length: 220

{"id":309,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":198,"character":18},"end":{"line":198,"character":40}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":310,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":13}}}
>>>
Content-Length: 351

{"id":310,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":311,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":13}}}
>>>
Content-Length: 127

{"id":311,"result":[{"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":312,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":194,"character":9}}}
>>>
Content-Length: 369

{"id":312,"result":{"contents":{"kind":"markdown","value":"### field `ledOutput`  \n\n---\nType: `byte`  \nOffset: 52 bytes  \nSize: 1 byte  \ncurrent led outputs (taking into consideration blink)  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledOutput = 0\n```"},"range":{"start":{"line":194,"character":9},"end":{"line":194,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":313,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":196,"character":40}}}
>>>
Content-Length: 40

{"id":313,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":314,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":196,"character":24}}}
>>>
Content-Length: 128

{"id":314,"result":[{"range":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":315,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":12}}}
>>>
Content-Length: 127

{"id":315,"result":[{"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":194,"character":6}}}
>>>
Content-Length: 222

{"id":316,"result":{"contents":{"kind":"markdown","value":"### type-alias `byte`  \n\n---\n```cpp\ntypedef uint8_t byte\n```"},"range":{"start":{"line":194,"character":4},"end":{"line":194,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":317,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":194,"character":5}}}
>>>
Content-Length: 222

{"id":317,"result":{"contents":{"kind":"markdown","value":"### type-alias `byte`  \n\n---\n```cpp\ntypedef uint8_t byte\n```"},"range":{"start":{"line":194,"character":4},"end":{"line":194,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":318,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":196,"character":22}}}
>>>
Content-Length: 345

{"id":318,"result":{"contents":{"kind":"markdown","value":"### field `pulseInEnabled`  \n\n---\nType: `volatile byte`  \nOffset: 53 bytes  \nSize: 1 byte  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: volatile byte pulseInEnabled = false\n```"},"range":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":319,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":196,"character":25}}}
>>>
Content-Length: 128

{"id":319,"result":[{"range":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":320,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":13}}}
>>>
Content-Length: 127

{"id":320,"result":[{"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":321,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":198,"character":34}}}
>>>
Content-Length: 357

{"id":321,"result":{"contents":{"kind":"markdown","value":"### field `pulseInWriteInProgress`  \n\n---\nType: `volatile byte`  \nOffset: 55 bytes  \nSize: 1 byte  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: volatile byte pulseInWriteInProgress = 0\n```"},"range":{"start":{"line":198,"character":18},"end":{"line":198,"character":40}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":322,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":208,"character":25}}}
>>>
Content-Length: 40

{"id":322,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":323,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":207,"character":26}}}
>>>
Content-Length: 40

{"id":323,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":324,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":207,"character":26}}}
>>>
Content-Length: 40

{"id":324,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":325,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":206,"character":27}}}
>>>
Content-Length: 337

{"id":325,"result":{"contents":{"kind":"markdown","value":"### field `pulseInState`  \n\n---\nType: `volatile byte`  \nOffset: 66 bytes  \nSize: 1 byte  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: volatile byte pulseInState = 0\n```"},"range":{"start":{"line":206,"character":18},"end":{"line":206,"character":30}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":326,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":193,"character":15}}}
>>>
Content-Length: 365

{"id":326,"result":{"contents":{"kind":"markdown","value":"### field `ledBlinkEnabled`  \n\n---\nType: `byte`  \nOffset: 51 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledBlinkEnabled = 0\n```"},"range":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":327,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":193,"character":14}}}
>>>
Content-Length: 365

{"id":327,"result":{"contents":{"kind":"markdown","value":"### field `ledBlinkEnabled`  \n\n---\nType: `byte`  \nOffset: 51 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledBlinkEnabled = 0\n```"},"range":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":328,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":196,"character":12}}}
>>>
Content-Length: 128

{"id":328,"result":[{"range":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":329,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":196,"character":4}}}
>>>
Content-Length: 344

{"id":329,"result":{"contents":{"kind":"markdown","value":"### field `pulseInEnabled`  \n\n---\nType: `volatile byte`  \nOffset: 53 bytes  \nSize: 1 byte  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: volatile byte pulseInEnabled = false\n```"},"range":{"start":{"line":196,"character":4},"end":{"line":196,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":330,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":193,"character":11}}}
>>>
Content-Length: 365

{"id":330,"result":{"contents":{"kind":"markdown","value":"### field `ledBlinkEnabled`  \n\n---\nType: `byte`  \nOffset: 51 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledBlinkEnabled = 0\n```"},"range":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":331,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":12}}}
>>>
Content-Length: 351

{"id":331,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":332,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":12}}}
>>>
Content-Length: 127

{"id":332,"result":[{"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":333,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":12}}}
>>>
Content-Length: 351

{"id":333,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":334,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":12}}}
>>>
Content-Length: 351

{"id":334,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":335,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":193,"character":12}}}
>>>
Content-Length: 219

{"id":335,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":336,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":193,"character":12}}}
>>>
Content-Length: 365

{"id":336,"result":{"contents":{"kind":"markdown","value":"### field `ledBlinkEnabled`  \n\n---\nType: `byte`  \nOffset: 51 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledBlinkEnabled = 0\n```"},"range":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":337,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":194,"character":70}}}
>>>
Content-Length: 40

{"id":337,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":338,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":193,"character":17}}}
>>>
Content-Length: 365

{"id":338,"result":{"contents":{"kind":"markdown","value":"### field `ledBlinkEnabled`  \n\n---\nType: `byte`  \nOffset: 51 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledBlinkEnabled = 0\n```"},"range":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":339,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":14}}}
>>>
Content-Length: 351

{"id":339,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":340,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":13}}}
>>>
Content-Length: 351

{"id":340,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":341,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":14}}}
>>>
Content-Length: 127

{"id":341,"result":[{"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":342,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":14}}}
>>>
Content-Length: 219

{"id":342,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":343,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":25}}}
>>>
Content-Length: 40

{"id":343,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":344,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":15}}}
>>>
Content-Length: 351

{"id":344,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":345,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 15044

{"id":345,"result":[{"name":"MultiFuncShield","kind":5,"range":{"start":{"line":63,"character":0},"end":{"line":212,"character":1}},"selectionRange":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}},"children":[{"name":"userInterrupt","kind":8,"range":{"start":{"line":68,"character":4},"end":{"line":68,"character":34}},"selectionRange":{"start":{"line":68,"character":11},"end":{"line":68,"character":24}}},{"name":"initialize","kind":6,"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":21}},"selectionRange":{"start":{"line":71,"character":9},"end":{"line":71,"character":19}}},{"name":"isrCallBack","kind":6,"range":{"start":{"line":74,"character":4},"end":{"line":74,"character":22}},"selectionRange":{"start":{"line":74,"character":9},"end":{"line":74,"character":20}}},{"name":"setTimer","kind":6,"range":{"start":{"line":77,"character":4},"end":{"line":77,"character":45}},"selectionRange":{"start":{"line":77,"character":9},"end":{"line":77,"character":17}}},{"name":"getTimer","kind":6,"range":{"start":{"line":80,"character":4},"end":{"line":80,"character":28}},"selectionRange":{"start":{"line":80,"character":18},"end":{"line":80,"character":26}}},{"name":"wait","kind":6,"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":40}},"selectionRange":{"start":{"line":83,"character":9},"end":{"line":83,"character":13}}},{"name":"write","kind":6,"range":{"start":{"line":86,"character":4},"end":{"line":86,"character":60}},"selectionRange":{"start":{"line":86,"character":9},"end":{"line":86,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":87,"character":4},"end":{"line":87,"character":27}},"selectionRange":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":88,"character":4},"end":{"line":88,"character":52}},"selectionRange":{"start":{"line":88,"character":9},"end":{"line":88,"character":14}}},{"name":"manualDisplayRefresh","kind":6,"range":{"start":{"line":92,"character":4},"end":{"line":92,"character":31}},"selectionRange":{"start":{"line":92,"character":9},"end":{"line":92,"character":29}}},{"name":"blinkDisplay","kind":6,"range":{"start":{"line":95,"character":4},"end":{"line":97,"character":21}},"selectionRange":{"start":{"line":95,"character":9},"end":{"line":95,"character":21}}},{"name":"setDisplayBrightness","kind":6,"range":{"start":{"line":99,"character":4},"end":{"line":99,"character":41}},"selectionRange":{"start":{"line":99,"character":9},"end":{"line":99,"character":29}}},{"name":"writeLeds","kind":6,"range":{"start":{"line":102,"character":4},"end":{"line":104,"character":20}},"selectionRange":{"start":{"line":102,"character":9},"end":{"line":102,"character":18}}},{"name":"blinkLeds","kind":6,"range":{"start":{"line":107,"character":4},"end":{"line":109,"character":20}},"selectionRange":{"start":{"line":107,"character":9},"end":{"line":107,"character":18}}},{"name":"beep","kind":6,"range":{"start":{"line":112,"character":4},"end":{"line":112,"character":169}},"selectionRange":{"start":{"line":112,"character":9},"end":{"line":112,"character":13}}},{"name":"setBeepOffPeriod","kind":6,"range":{"start":{"line":115,"character":4},"end":{"line":115,"character":49}},"selectionRange":{"start":{"line":115,"character":9},"end":{"line":115,"character":25}}},{"name":"queueButton","kind":6,"range":{"start":{"line":118,"character":4},"end":{"line":118,"character":34}},"selectionRange":{"start":{"line":118,"character":9},"end":{"line":118,"character":20}}},{"name":"getButton","kind":6,"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":20}},"selectionRange":{"start":{"line":121,"character":9},"end":{"line":121,"character":18}}},{"name":"manualButtonHandler","kind":6,"range":{"start":{"line":125,"character":4},"end":{"line":125,"character":30}},"selectionRange":{"start":{"line":125,"character":9},"end":{"line":125,"character":28}}},{"name":"initPulseInCounter","kind":6,"range":{"start":{"line":128,"character":4},"end":{"line":131,"character":29}},"selectionRange":{"start":{"line":128,"character":9},"end":{"line":128,"character":27}}},{"name":"disablePulseInCounter","kind":6,"range":{"start":{"line":133,"character":4},"end":{"line":133,"character":32}},"selectionRange":{"start":{"line":133,"character":9},"end":{"line":133,"character":30}}},{"name":"getPulseInPeriod","kind":6,"range":{"start":{"line":136,"character":4},"end":{"line":136,"character":35}},"selectionRange":{"start":{"line":136,"character":17},"end":{"line":136,"character":33}}},{"name":"getPulseInTotalCount","kind":6,"range":{"start":{"line":139,"character":4},"end":{"line":139,"character":40}},"selectionRange":{"start":{"line":139,"character":18},"end":{"line":139,"character":38}}},{"name":"resetPulseInTotalCount","kind":6,"range":{"start":{"line":142,"character":4},"end":{"line":142,"character":33}},"selectionRange":{"start":{"line":142,"character":9},"end":{"line":142,"character":31}}},{"name":"setPulseInTimeOut","kind":6,"range":{"start":{"line":145,"character":4},"end":{"line":145,"character":48}},"selectionRange":{"start":{"line":145,"character":9},"end":{"line":145,"character":26}}},{"name":"initSonar","kind":6,"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":51}},"selectionRange":{"start":{"line":148,"character":9},"end":{"line":148,"character":18}}},{"name":"getSonarDataCm","kind":6,"range":{"start":{"line":151,"character":4},"end":{"line":151,"character":62}},"selectionRange":{"start":{"line":151,"character":17},"end":{"line":151,"character":31}}},{"name":"initLM35","kind":6,"range":{"start":{"line":154,"character":4},"end":{"line":154,"character":50}},"selectionRange":{"start":{"line":154,"character":9},"end":{"line":154,"character":17}}},{"name":"getLM35Data","kind":6,"range":{"start":{"line":157,"character":4},"end":{"line":157,"character":21}},"selectionRange":{"start":{"line":157,"character":8},"end":{"line":157,"character":19}}},{"name":"timerReadInProgress","kind":8,"range":{"start":{"line":160,"character":4},"end":{"line":160,"character":41}},"selectionRange":{"start":{"line":160,"character":18},"end":{"line":160,"character":37}}},{"name":"timerWriteInProgress","kind":8,"range":{"start":{"line":161,"character":4},"end":{"line":161,"character":42}},"selectionRange":{"start":{"line":161,"character":18},"end":{"line":161,"character":38}}},{"name":"buttonBuffer","kind":8,"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":48}},"selectionRange":{"start":{"line":165,"character":18},"end":{"line":165,"character":30}}},{"name":"buttonBufferCount","kind":8,"range":{"start":{"line":166,"character":4},"end":{"line":166,"character":39}},"selectionRange":{"start":{"line":166,"character":18},"end":{"line":166,"character":35}}},{"name":"button_write_pos","kind":8,"range":{"start":{"line":167,"character":4},"end":{"line":167,"character":38}},"selectionRange":{"start":{"line":167,"character":18},"end":{"line":167,"character":34}}},{"name":"button_read_pos","kind":8,"range":{"start":{"line":168,"character":4},"end":{"line":168,"character":37}},"selectionRange":{"start":{"line":168,"character":18},"end":{"line":168,"character":33}}},{"name":"buttonSampleIntervalCounter","kind":8,"range":{"start":{"line":170,"character":4},"end":{"line":170,"character":47}},"selectionRange":{"start":{"line":170,"character":17},"end":{"line":170,"character":44}}},{"name":"buttonState","kind":8,"range":{"start":{"line":171,"character":4},"end":{"line":171,"character":44}},"selectionRange":{"start":{"line":171,"character":9},"end":{"line":171,"character":20}}},{"name":"buttonPressTime","kind":8,"range":{"start":{"line":172,"character":4},"end":{"line":172,"character":56}},"selectionRange":{"start":{"line":172,"character":17},"end":{"line":172,"character":32}}},{"name":"timer_volatile","kind":8,"range":{"start":{"line":174,"character":4},"end":{"line":174,"character":45}},"selectionRange":{"start":{"line":174,"character":27},"end":{"line":174,"character":41}}},{"name":"timer_safe","kind":8,"range":{"start":{"line":175,"character":4},"end":{"line":175,"character":41}},"selectionRange":{"start":{"line":175,"character":27},"end":{"line":175,"character":37}}},{"name":"beeperModifyInProgress","kind":8,"range":{"start":{"line":177,"character":4},"end":{"line":177,"character":44}},"selectionRange":{"start":{"line":177,"character":18},"end":{"line":177,"character":40}}},{"name":"beeperState","kind":8,"range":{"start":{"line":178,"character":4},"end":{"line":178,"character":32}},"selectionRange":{"start":{"line":178,"character":18},"end":{"line":178,"character":29}}},{"name":"beeperOnPeriodReloadValue","kind":8,"range":{"start":{"line":179,"character":4},"end":{"line":179,"character":54}},"selectionRange":{"start":{"line":179,"character":26},"end":{"line":179,"character":51}}},{"name":"beeperOffPeriodReloadValue","kind":8,"range":{"start":{"line":180,"character":4},"end":{"line":180,"character":55}},"selectionRange":{"start":{"line":180,"character":26},"end":{"line":180,"character":52}}},{"name":"beeperPeriodCounter","kind":8,"range":{"start":{"line":181,"character":4},"end":{"line":181,"character":49}},"selectionRange":{"start":{"line":181,"character":26},"end":{"line":181,"character":45}}},{"name":"beeperCycleReloadValue","kind":8,"range":{"start":{"line":182,"character":4},"end":{"line":182,"character":44}},"selectionRange":{"start":{"line":182,"character":18},"end":{"line":182,"character":40}}},{"name":"beeperCycleCounter","kind":8,"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":39}},"selectionRange":{"start":{"line":183,"character":18},"end":{"line":183,"character":36}}},{"name":"beeperLoopCycleCounter","kind":8,"range":{"start":{"line":184,"character":4},"end":{"line":184,"character":51}},"selectionRange":{"start":{"line":184,"character":26},"end":{"line":184,"character":48}}},{"name":"beeperLoopDelayPeriodReloadValue","kind":8,"range":{"start":{"line":185,"character":4},"end":{"line":185,"character":61}},"selectionRange":{"start":{"line":185,"character":26},"end":{"line":185,"character":58}}},{"name":"displayIdx","kind":8,"range":{"start":{"line":187,"character":4},"end":{"line":187,"character":23}},"selectionRange":{"start":{"line":187,"character":9},"end":{"line":187,"character":19}}},{"name":"blinkEnabled","kind":8,"range":{"start":{"line":188,"character":4},"end":{"line":188,"character":25}},"selectionRange":{"start":{"line":188,"character":9},"end":{"line":188,"character":21}}},{"name":"blinkState","kind":8,"range":{"start":{"line":189,"character":4},"end":{"line":189,"character":23}},"selectionRange":{"start":{"line":189,"character":9},"end":{"line":189,"character":19}}},{"name":"blinkCounter","kind":8,"range":{"start":{"line":190,"character":4},"end":{"line":190,"character":25}},"selectionRange":{"start":{"line":190,"character":9},"end":{"line":190,"character":21}}},{"name":"ledState","kind":8,"range":{"start":{"line":192,"character":4},"end":{"line":192,"character":20}},"selectionRange":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},{"name":"ledBlinkEnabled","kind":8,"range":{"start":{"line":193,"character":4},"end":{"line":193,"character":27}},"selectionRange":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},{"name":"ledOutput","kind":8,"range":{"start":{"line":194,"character":4},"end":{"line":194,"character":20}},"selectionRange":{"start":{"line":194,"character":9},"end":{"line":194,"character":18}}},{"name":"pulseInEnabled","kind":8,"range":{"start":{"line":196,"character":4},"end":{"line":196,"character":40}},"selectionRange":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}}},{"name":"pulseInReadInProgress","kind":8,"range":{"start":{"line":197,"character":4},"end":{"line":197,"character":42}},"selectionRange":{"start":{"line":197,"character":18},"end":{"line":197,"character":39}}},{"name":"pulseInWriteInProgress","kind":8,"range":{"start":{"line":198,"character":4},"end":{"line":198,"character":43}},"selectionRange":{"start":{"line":198,"character":18},"end":{"line":198,"character":40}}},{"name":"pulseInTimeOut","kind":8,"range":{"start":{"line":200,"character":4},"end":{"line":200,"character":47}},"selectionRange":{"start":{"line":200,"character":26},"end":{"line":200,"character":40}}},{"name":"pulseInPin","kind":8,"range":{"start":{"line":201,"character":4},"end":{"line":201,"character":43}},"selectionRange":{"start":{"line":201,"character":18},"end":{"line":201,"character":28}}},{"name":"pulseInPeriodCounter","kind":8,"range":{"start":{"line":202,"character":4},"end":{"line":202,"character":53}},"selectionRange":{"start":{"line":202,"character":26},"end":{"line":202,"character":46}}},{"name":"pulseInTrigger","kind":8,"range":{"start":{"line":203,"character":4},"end":{"line":203,"character":38}},"selectionRange":{"start":{"line":203,"character":18},"end":{"line":203,"character":32}}},{"name":"pulseInPeriod_volatile","kind":8,"range":{"start":{"line":204,"character":4},"end":{"line":204,"character":51}},"selectionRange":{"start":{"line":204,"character":26},"end":{"line":204,"character":48}}},{"name":"pulseInPeriod_safe","kind":8,"range":{"start":{"line":205,"character":4},"end":{"line":205,"character":47}},"selectionRange":{"start":{"line":205,"character":26},"end":{"line":205,"character":44}}},{"name":"pulseInState","kind":8,"range":{"start":{"line":206,"character":4},"end":{"line":206,"character":33}},"selectionRange":{"start":{"line":206,"character":18},"end":{"line":206,"character":30}}},{"name":"pulseInTotalCount_volatile","kind":8,"range":{"start":{"line":207,"character":4},"end":{"line":207,"character":57}},"selectionRange":{"start":{"line":207,"character":27},"end":{"line":207,"character":53}}},{"name":"pulseInTotalCount_safe","kind":8,"range":{"start":{"line":208,"character":4},"end":{"line":208,"character":53}},"selectionRange":{"start":{"line":208,"character":27},"end":{"line":208,"character":49}}},{"name":"sonarSmoothingLevel","kind":8,"range":{"start":{"line":210,"character":4},"end":{"line":210,"character":49}},"selectionRange":{"start":{"line":210,"character":9},"end":{"line":210,"character":28}}},{"name":"lm35SmoothingLevel","kind":8,"range":{"start":{"line":211,"character":4},"end":{"line":211,"character":48}},"selectionRange":{"start":{"line":211,"character":9},"end":{"line":211,"character":27}}}]},{"name":"MFS","kind":13,"range":{"start":{"line":214,"character":0},"end":{"line":214,"character":26}},"selectionRange":{"start":{"line":214,"character":23},"end":{"line":214,"character":26}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":217,"character":0},"end":{"line":217,"character":60}},"selectionRange":{"start":{"line":217,"character":11},"end":{"line":217,"character":20}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":220,"character":0},"end":{"line":220,"character":92}},"selectionRange":{"start":{"line":220,"character":11},"end":{"line":220,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":346,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":192,"character":10}}}
>>>
Content-Length: 351

{"id":346,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nOffset: 50 bytes  \nSize: 1 byte  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":347,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":200,"character":57}}}
>>>
Content-Length: 40

{"id":347,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":348,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":348,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":349,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":17}}}
>>>
Content-Length: 233

{"id":349,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":413,"character":5},"end":{"line":413,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":350,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":20}}}
>>>
Content-Length: 233

{"id":350,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":413,"character":5},"end":{"line":413,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":351,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":17}}}
>>>
Content-Length: 233

{"id":351,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":413,"character":5},"end":{"line":413,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":352,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":23}}}
>>>
Content-Length: 406

{"id":352,"result":{"contents":{"kind":"markdown","value":"### instance-method `MultiFuncShield::writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void MultiFuncShield::writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":353,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":24}}}
>>>
Content-Length: 406

{"id":353,"result":{"contents":{"kind":"markdown","value":"### instance-method `MultiFuncShield::writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void MultiFuncShield::writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":354,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":5}}}
>>>
Content-Length: 315

{"id":354,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":417,"character":4},"end":{"line":417,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":355,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":26}}}
>>>
Content-Length: 406

{"id":355,"result":{"contents":{"kind":"markdown","value":"### instance-method `MultiFuncShield::writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void MultiFuncShield::writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":356,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":41}}}
>>>
Content-Length: 40

{"id":356,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":357,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":413,"character":17}}}
>>>
Content-Length: 233

{"id":357,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":413,"character":5},"end":{"line":413,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":358,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":13}}}
>>>
Content-Length: 40

{"id":358,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":359,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":8}}}
>>>
Content-Length: 315

{"id":359,"result":{"contents":{"kind":"markdown","value":"### field `ledState`  \n\n---\nType: `byte`  \nleast significant bits mapped to LEDs  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte ledState = 0\n```"},"range":{"start":{"line":417,"character":4},"end":{"line":417,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":360,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":9}}}
>>>
Content-Length: 219

{"id":360,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":361,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":9}}}
>>>
Content-Length: 38

{"id":361,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":362,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":8}}}
>>>
Content-Length: 40

{"id":362,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":363,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":10}}}
>>>
Content-Length: 40

{"id":363,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":364,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":14}}}
>>>
Content-Length: 40

{"id":364,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":365,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":14}}}
>>>
Content-Length: 38

{"id":365,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":366,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":14}}}
>>>
Content-Length: 38

{"id":366,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":367,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":418,"character":14}}}
>>>
Content-Length: 40

{"id":367,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":368,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":15}}}
>>>
Content-Length: 219

{"id":368,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":369,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":417,"character":14}}}
>>>
Content-Length: 40

{"id":369,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":370,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":655,"character":9}}}
>>>
Content-Length: 334

{"id":370,"result":{"contents":{"kind":"markdown","value":"### field `blinkEnabled`  \n\n---\nType: `byte`  \nleast significant bits mapped to display digits.  \n\n---\n```cpp\n// In MultiFuncShield\nprivate: byte blinkEnabled = 0\n```"},"range":{"start":{"line":655,"character":8},"end":{"line":655,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":371,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":616,"character":23}}}
>>>
Content-Length: 40

{"id":371,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":372,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":22}}}
>>>
Content-Length: 393

{"id":372,"result":{"contents":{"kind":"markdown","value":"### function `WriteValueToSegment`  \n\n---\n→ `void`  \nParameters:  \n- `byte Segment`\n- `byte Value`\n\nWrite a value to one of the 4 digits of the display  \n\n---\n```cpp\nvoid WriteValueToSegment(byte Segment, byte Value)\n```"},"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":373,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":684,"character":21}}}
>>>
Content-Length: 293

{"id":373,"result":{"contents":{"kind":"markdown","value":"### variable `ledIdx`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\n// In MultiFuncShield::isrCallBack\nbyte ledIdx = 0\n```"},"range":{"start":{"line":684,"character":16},"end":{"line":684,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":374,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":690,"character":28}}}
>>>
Content-Length: 40

{"id":374,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":375,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":691,"character":16}}}
>>>
Content-Length: 223

{"id":375,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":376,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":691,"character":16}}}
>>>
Content-Length: 313

{"id":376,"result":{"contents":{"kind":"markdown","value":"### function `writeLed`  \n\n---\n→ `void`  \nParameters:  \n- `byte ledIdx`\n- `byte value`\n\n---\n```cpp\nvoid writeLed(byte ledIdx, byte value)\n```"},"range":{"start":{"line":691,"character":12},"end":{"line":691,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":377,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":691,"character":16}}}Content-Length: 233

{"jsonrpc":"2.0","id":378,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":691,"character":16}}}
>>>
Content-Length: 399

{"id":377,"result":[{"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}},"kind":1},{"range":{"start":{"line":691,"character":12},"end":{"line":691,"character":20}},"kind":1},{"range":{"start":{"line":696,"character":12},"end":{"line":696,"character":20}},"kind":1},{"range":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}},"kind":1}],"jsonrpc":"2.0"}Content-Length: 223

{"id":378,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":379,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":27}}}
>>>
Content-Length: 251

{"id":379,"result":{"contents":{"kind":"markdown","value":"### param `value`  \n\n---\nType: `byte`  \n\n---\n```cpp\n// In writeLed\nbyte value\n```"},"range":{"start":{"line":1220,"character":25},"end":{"line":1220,"character":30}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":380,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":15}}}
>>>
Content-Length: 230

{"id":380,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1220,"character":15},"end":{"line":1220,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":381,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":10}}}
>>>
Content-Length: 345

{"id":381,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":1220,"character":6},"end":{"line":1220,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":382,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":16}}}
>>>
Content-Length: 230

{"id":382,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1220,"character":15},"end":{"line":1220,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":383,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":9}}}
>>>
Content-Length: 233

{"id":383,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}Content-Length: 228

{"jsonrpc":"2.0","id":384,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":9}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 345

{"id":384,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":1220,"character":6},"end":{"line":1220,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":385,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":9}}}
>>>
Content-Length: 233

{"id":385,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":386,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":9}}}
>>>
Content-Length: 345

{"id":386,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":1220,"character":6},"end":{"line":1220,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 241

{"jsonrpc":"2.0","id":387,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":11}}}
>>>
Content-Length: 38

{"id":387,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","id":388,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":11}}}
>>>
Content-Length: 233

{"id":388,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 210

{"jsonrpc":"2.0","id":389,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 8197

{"id":389,"result":[{"name":"yield","kind":12,"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":16}},"selectionRange":{"start":{"line":37,"character":5},"end":{"line":37,"character":10}}},{"name":"word","kind":5,"range":{"start":{"line":121,"character":0},"end":{"line":121,"character":25}},"selectionRange":{"start":{"line":121,"character":21},"end":{"line":121,"character":25}}},{"name":"boolean","kind":5,"range":{"start":{"line":125,"character":0},"end":{"line":125,"character":20}},"selectionRange":{"start":{"line":125,"character":13},"end":{"line":125,"character":20}}},{"name":"byte","kind":5,"range":{"start":{"line":126,"character":0},"end":{"line":126,"character":20}},"selectionRange":{"start":{"line":126,"character":16},"end":{"line":126,"character":20}}},{"name":"init","kind":12,"range":{"start":{"line":128,"character":0},"end":{"line":128,"character":15}},"selectionRange":{"start":{"line":128,"character":5},"end":{"line":128,"character":9}}},{"name":"initVariant","kind":12,"range":{"start":{"line":129,"character":0},"end":{"line":129,"character":22}},"selectionRange":{"start":{"line":129,"character":5},"end":{"line":129,"character":16}}},{"name":"atexit","kind":12,"range":{"start":{"line":131,"character":0},"end":{"line":131,"character":48}},"selectionRange":{"start":{"line":131,"character":4},"end":{"line":131,"character":10}}},{"name":"pinMode","kind":12,"range":{"start":{"line":133,"character":0},"end":{"line":133,"character":39}},"selectionRange":{"start":{"line":133,"character":5},"end":{"line":133,"character":12}}},{"name":"digitalWrite","kind":12,"range":{"start":{"line":134,"character":0},"end":{"line":134,"character":43}},"selectionRange":{"start":{"line":134,"character":5},"end":{"line":134,"character":17}}},{"name":"digitalRead","kind":12,"range":{"start":{"line":135,"character":0},"end":{"line":135,"character":28}},"selectionRange":{"start":{"line":135,"character":4},"end":{"line":135,"character":15}}},{"name":"analogRead","kind":12,"range":{"start":{"line":136,"character":0},"end":{"line":136,"character":27}},"selectionRange":{"start":{"line":136,"character":4},"end":{"line":136,"character":14}}},{"name":"analogReference","kind":12,"range":{"start":{"line":137,"character":0},"end":{"line":137,"character":34}},"selectionRange":{"start":{"line":137,"character":5},"end":{"line":137,"character":20}}},{"name":"analogWrite","kind":12,"range":{"start":{"line":138,"character":0},"end":{"line":138,"character":38}},"selectionRange":{"start":{"line":138,"character":5},"end":{"line":138,"character":16}}},{"name":"millis","kind":12,"range":{"start":{"line":140,"character":0},"end":{"line":140,"character":26}},"selectionRange":{"start":{"line":140,"character":14},"end":{"line":140,"character":20}}},{"name":"micros","kind":12,"range":{"start":{"line":141,"character":0},"end":{"line":141,"character":26}},"selectionRange":{"start":{"line":141,"character":14},"end":{"line":141,"character":20}}},{"name":"delay","kind":12,"range":{"start":{"line":142,"character":0},"end":{"line":142,"character":28}},"selectionRange":{"start":{"line":142,"character":5},"end":{"line":142,"character":10}}},{"name":"delayMicroseconds","kind":12,"range":{"start":{"line":143,"character":0},"end":{"line":143,"character":39}},"selectionRange":{"start":{"line":143,"character":5},"end":{"line":143,"character":22}}},{"name":"pulseIn","kind":12,"range":{"start":{"line":144,"character":0},"end":{"line":144,"character":72}},"selectionRange":{"start":{"line":144,"character":14},"end":{"line":144,"character":21}}},{"name":"pulseInLong","kind":12,"range":{"start":{"line":145,"character":0},"end":{"line":145,"character":76}},"selectionRange":{"start":{"line":145,"character":14},"end":{"line":145,"character":25}}},{"name":"shiftOut","kind":12,"range":{"start":{"line":147,"character":0},"end":{"line":147,"character":79}},"selectionRange":{"start":{"line":147,"character":5},"end":{"line":147,"character":13}}},{"name":"shiftIn","kind":12,"range":{"start":{"line":148,"character":0},"end":{"line":148,"character":68}},"selectionRange":{"start":{"line":148,"character":8},"end":{"line":148,"character":15}}},{"name":"attachInterrupt","kind":12,"range":{"start":{"line":150,"character":0},"end":{"line":150,"character":76}},"selectionRange":{"start":{"line":150,"character":5},"end":{"line":150,"character":20}}},{"name":"detachInterrupt","kind":12,"range":{"start":{"line":151,"character":0},"end":{"line":151,"character":42}},"selectionRange":{"start":{"line":151,"character":5},"end":{"line":151,"character":20}}},{"name":"setup","kind":12,"range":{"start":{"line":153,"character":0},"end":{"line":153,"character":16}},"selectionRange":{"start":{"line":153,"character":5},"end":{"line":153,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":154,"character":0},"end":{"line":154,"character":15}},"selectionRange":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}},{"name":"port_to_mode_PGM","kind":13,"range":{"start":{"line":163,"character":0},"end":{"line":163,"character":48}},"selectionRange":{"start":{"line":163,"character":30},"end":{"line":163,"character":46}}},{"name":"port_to_input_PGM","kind":13,"range":{"start":{"line":164,"character":0},"end":{"line":164,"character":49}},"selectionRange":{"start":{"line":164,"character":30},"end":{"line":164,"character":47}}},{"name":"port_to_output_PGM","kind":13,"range":{"start":{"line":165,"character":0},"end":{"line":165,"character":50}},"selectionRange":{"start":{"line":165,"character":30},"end":{"line":165,"character":48}}},{"name":"digital_pin_to_port_PGM","kind":13,"range":{"start":{"line":167,"character":0},"end":{"line":167,"character":54}},"selectionRange":{"start":{"line":167,"character":29},"end":{"line":167,"character":52}}},{"name":"digital_pin_to_bit_mask_PGM","kind":13,"range":{"start":{"line":169,"character":0},"end":{"line":169,"character":58}},"selectionRange":{"start":{"line":169,"character":29},"end":{"line":169,"character":56}}},{"name":"digital_pin_to_timer_PGM","kind":13,"range":{"start":{"line":170,"character":0},"end":{"line":170,"character":55}},"selectionRange":{"start":{"line":170,"character":29},"end":{"line":170,"character":53}}},{"name":"makeWord","kind":12,"range":{"start":{"line":238,"character":0},"end":{"line":238,"character":29}},"selectionRange":{"start":{"line":238,"character":9},"end":{"line":238,"character":17}}},{"name":"makeWord","kind":12,"range":{"start":{"line":239,"character":0},"end":{"line":239,"character":33}},"selectionRange":{"start":{"line":239,"character":9},"end":{"line":239,"character":17}}},{"name":"pulseIn","kind":12,"range":{"start":{"line":243,"character":0},"end":{"line":243,"character":83}},"selectionRange":{"start":{"line":243,"character":14},"end":{"line":243,"character":21}}},{"name":"pulseInLong","kind":12,"range":{"start":{"line":244,"character":0},"end":{"line":244,"character":87}},"selectionRange":{"start":{"line":244,"character":14},"end":{"line":244,"character":25}}},{"name":"tone","kind":12,"range":{"start":{"line":246,"character":0},"end":{"line":246,"character":75}},"selectionRange":{"start":{"line":246,"character":5},"end":{"line":246,"character":9}}},{"name":"noTone","kind":12,"range":{"start":{"line":247,"character":0},"end":{"line":247,"character":25}},"selectionRange":{"start":{"line":247,"character":5},"end":{"line":247,"character":11}}},{"name":"random","kind":12,"range":{"start":{"line":250,"character":0},"end":{"line":250,"character":17}},"selectionRange":{"start":{"line":250,"character":5},"end":{"line":250,"character":11}}},{"name":"random","kind":12,"range":{"start":{"line":251,"character":0},"end":{"line":251,"character":23}},"selectionRange":{"start":{"line":251,"character":5},"end":{"line":251,"character":11}}},{"name":"randomSeed","kind":12,"range":{"start":{"line":252,"character":0},"end":{"line":252,"character":30}},"selectionRange":{"start":{"line":252,"character":5},"end":{"line":252,"character":15}}},{"name":"map","kind":12,"range":{"start":{"line":253,"character":0},"end":{"line":253,"character":38}},"selectionRange":{"start":{"line":253,"character":5},"end":{"line":253,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 245

{"jsonrpc":"2.0","id":390,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"},"position":{"line":114,"character":15}}}
>>>
Content-Length: 233

{"id":390,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":391,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"},"position":{"line":114,"character":14}}}
>>>
Content-Length: 343

{"id":391,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":392,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"},"position":{"line":114,"character":13}}}
>>>
Content-Length: 343

{"id":392,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":393,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"},"position":{"line":114,"character":13}}}
>>>
Content-Length: 343

{"id":393,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}Content-Length: 198

{"jsonrpc":"2.0","id":394,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 13264

{"id":394,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":395,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":16}}}
>>>
Content-Length: 230

{"id":395,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1220,"character":15},"end":{"line":1220,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":396,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":8}}}
>>>
Content-Length: 345

{"id":396,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":1220,"character":6},"end":{"line":1220,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":397,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":8}}}
>>>
Content-Length: 345

{"id":397,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":1220,"character":6},"end":{"line":1220,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":398,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":9}}}
>>>
Content-Length: 233

{"id":398,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":114,"character":8},"end":{"line":114,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":399,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":8}}}
>>>
Content-Length: 345

{"id":399,"result":{"contents":{"kind":"markdown","value":"### macro `bitWrite`  \n\n---\n```cpp\n#define bitWrite(value, bit, bitvalue)                                         \\\n  ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n```"},"range":{"start":{"line":1220,"character":6},"end":{"line":1220,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":400,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":16}}}
>>>
Content-Length: 230

{"id":400,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":1220,"character":15},"end":{"line":1220,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 241

{"jsonrpc":"2.0","id":401,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":16}}}
>>>
Content-Length: 38

{"id":401,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","id":402,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1220,"character":16}}}
>>>
Content-Length: 254

{"id":402,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/iom328p.h","range":{"start":{"line":73,"character":8},"end":{"line":73,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 22641

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/iom328p.h","languageId":"cpp","version":1,"text":"/* Copyright (c) 2007 Atmel Corporation\r\n   All rights reserved.\r\n\r\n   Redistribution and use in source and binary forms, with or without\r\n   modification, are permitted provided that the following conditions are met:\r\n\r\n   * Redistributions of source code must retain the above copyright\r\n     notice, this list of conditions and the following disclaimer.\r\n\r\n   * Redistributions in binary form must reproduce the above copyright\r\n     notice, this list of conditions and the following disclaimer in\r\n     the documentation and/or other materials provided with the\r\n     distribution.\r\n\r\n   * Neither the name of the copyright holders nor the names of\r\n     contributors may be used to endorse or promote products derived\r\n     from this software without specific prior written permission.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n  POSSIBILITY OF SUCH DAMAGE. \r\n*/\r\n\r\n/* $Id: iom328p.h 2444 2014-08-11 22:10:47Z joerg_wunsch $ */\r\n\r\n/* avr/iom328p.h - definitions for ATmega328P. */\r\n\r\n/* This file should only be included from <avr/io.h>, never directly. */\r\n\r\n#ifndef _AVR_IO_H_\r\n#  error \"Include <avr/io.h> instead of this file.\"\r\n#endif\r\n\r\n#ifndef _AVR_IOXXX_H_\r\n#  define _AVR_IOXXX_H_ \"iom328p.h\"\r\n#else\r\n#  error \"Attempt to include more than one <avr/ioXXX.h> file.\"\r\n#endif \r\n\r\n\r\n#ifndef _AVR_IOM328P_H_\r\n#define _AVR_IOM328P_H_ 1\r\n\r\n/* Registers and associated bit numbers */\r\n\r\n#define PINB _SFR_IO8(0x03)\r\n#define PINB0 0\r\n#define PINB1 1\r\n#define PINB2 2\r\n#define PINB3 3\r\n#define PINB4 4\r\n#define PINB5 5\r\n#define PINB6 6\r\n#define PINB7 7\r\n\r\n#define DDRB _SFR_IO8(0x04)\r\n#define DDB0 0\r\n#define DDB1 1\r\n#define DDB2 2\r\n#define DDB3 3\r\n#define DDB4 4\r\n#define DDB5 5\r\n#define DDB6 6\r\n#define DDB7 7\r\n\r\n#define PORTB _SFR_IO8(0x05)\r\n#define PORTB0 0\r\n#define PORTB1 1\r\n#define PORTB2 2\r\n#define PORTB3 3\r\n#define PORTB4 4\r\n#define PORTB5 5\r\n#define PORTB6 6\r\n#define PORTB7 7\r\n\r\n#define PINC _SFR_IO8(0x06)\r\n#define PINC0 0\r\n#define PINC1 1\r\n#define PINC2 2\r\n#define PINC3 3\r\n#define PINC4 4\r\n#define PINC5 5\r\n#define PINC6 6\r\n\r\n#define DDRC _SFR_IO8(0x07)\r\n#define DDC0 0\r\n#define DDC1 1\r\n#define DDC2 2\r\n#define DDC3 3\r\n#define DDC4 4\r\n#define DDC5 5\r\n#define DDC6 6\r\n\r\n#define PORTC _SFR_IO8(0x08)\r\n#define PORTC0 0\r\n#define PORTC1 1\r\n#define PORTC2 2\r\n#define PORTC3 3\r\n#define PORTC4 4\r\n#define PORTC5 5\r\n#define PORTC6 6\r\n\r\n#define PIND _SFR_IO8(0x09)\r\n#define PIND0 0\r\n#define PIND1 1\r\n#define PIND2 2\r\n#define PIND3 3\r\n#define PIND4 4\r\n#define PIND5 5\r\n#define PIND6 6\r\n#define PIND7 7\r\n\r\n#define DDRD _SFR_IO8(0x0A)\r\n#define DDD0 0\r\n#define DDD1 1\r\n#define DDD2 2\r\n#define DDD3 3\r\n#define DDD4 4\r\n#define DDD5 5\r\n#define DDD6 6\r\n#define DDD7 7\r\n\r\n#define PORTD _SFR_IO8(0x0B)\r\n#define PORTD0 0\r\n#define PORTD1 1\r\n#define PORTD2 2\r\n#define PORTD3 3\r\n#define PORTD4 4\r\n#define PORTD5 5\r\n#define PORTD6 6\r\n#define PORTD7 7\r\n\r\n#define TIFR0 _SFR_IO8(0x15)\r\n#define TOV0 0\r\n#define OCF0A 1\r\n#define OCF0B 2\r\n\r\n#define TIFR1 _SFR_IO8(0x16)\r\n#define TOV1 0\r\n#define OCF1A 1\r\n#define OCF1B 2\r\n#define ICF1 5\r\n\r\n#define TIFR2 _SFR_IO8(0x17)\r\n#define TOV2 0\r\n#define OCF2A 1\r\n#define OCF2B 2\r\n\r\n#define PCIFR _SFR_IO8(0x1B)\r\n#define PCIF0 0\r\n#define PCIF1 1\r\n#define PCIF2 2\r\n\r\n#define EIFR _SFR_IO8(0x1C)\r\n#define INTF0 0\r\n#define INTF1 1\r\n\r\n#define EIMSK _SFR_IO8(0x1D)\r\n#define INT0 0\r\n#define INT1 1\r\n\r\n#define GPIOR0 _SFR_IO8(0x1E)\r\n#define GPIOR00 0\r\n#define GPIOR01 1\r\n#define GPIOR02 2\r\n#define GPIOR03 3\r\n#define GPIOR04 4\r\n#define GPIOR05 5\r\n#define GPIOR06 6\r\n#define GPIOR07 7\r\n\r\n#define EECR _SFR_IO8(0x1F)\r\n#define EERE 0\r\n#define EEPE 1\r\n#define EEMPE 2\r\n#define EERIE 3\r\n#define EEPM0 4\r\n#define EEPM1 5\r\n\r\n#define EEDR _SFR_IO8(0x20)\r\n#define EEDR0 0\r\n#define EEDR1 1\r\n#define EEDR2 2\r\n#define EEDR3 3\r\n#define EEDR4 4\r\n#define EEDR5 5\r\n#define EEDR6 6\r\n#define EEDR7 7\r\n\r\n#define EEAR _SFR_IO16(0x21)\r\n\r\n#define EEARL _SFR_IO8(0x21)\r\n#define EEAR0 0\r\n#define EEAR1 1\r\n#define EEAR2 2\r\n#define EEAR3 3\r\n#define EEAR4 4\r\n#define EEAR5 5\r\n#define EEAR6 6\r\n#define EEAR7 7\r\n\r\n#define EEARH _SFR_IO8(0x22)\r\n#define EEAR8 0\r\n#define EEAR9 1\r\n\r\n#define _EEPROM_REG_LOCATIONS_ 1F2021\r\n\r\n#define GTCCR _SFR_IO8(0x23)\r\n#define PSRSYNC 0\r\n#define PSRASY 1\r\n#define TSM 7\r\n\r\n#define TCCR0A _SFR_IO8(0x24)\r\n#define WGM00 0\r\n#define WGM01 1\r\n#define COM0B0 4\r\n#define COM0B1 5\r\n#define COM0A0 6\r\n#define COM0A1 7\r\n\r\n#define TCCR0B _SFR_IO8(0x25)\r\n#define CS00 0\r\n#define CS01 1\r\n#define CS02 2\r\n#define WGM02 3\r\n#define FOC0B 6\r\n#define FOC0A 7\r\n\r\n#define TCNT0 _SFR_IO8(0x26)\r\n#define TCNT0_0 0\r\n#define TCNT0_1 1\r\n#define TCNT0_2 2\r\n#define TCNT0_3 3\r\n#define TCNT0_4 4\r\n#define TCNT0_5 5\r\n#define TCNT0_6 6\r\n#define TCNT0_7 7\r\n\r\n#define OCR0A _SFR_IO8(0x27)\r\n#define OCR0A_0 0\r\n#define OCR0A_1 1\r\n#define OCR0A_2 2\r\n#define OCR0A_3 3\r\n#define OCR0A_4 4\r\n#define OCR0A_5 5\r\n#define OCR0A_6 6\r\n#define OCR0A_7 7\r\n\r\n#define OCR0B _SFR_IO8(0x28)\r\n#define OCR0B_0 0\r\n#define OCR0B_1 1\r\n#define OCR0B_2 2\r\n#define OCR0B_3 3\r\n#define OCR0B_4 4\r\n#define OCR0B_5 5\r\n#define OCR0B_6 6\r\n#define OCR0B_7 7\r\n\r\n#define GPIOR1 _SFR_IO8(0x2A)\r\n#define GPIOR10 0\r\n#define GPIOR11 1\r\n#define GPIOR12 2\r\n#define GPIOR13 3\r\n#define GPIOR14 4\r\n#define GPIOR15 5\r\n#define GPIOR16 6\r\n#define GPIOR17 7\r\n\r\n#define GPIOR2 _SFR_IO8(0x2B)\r\n#define GPIOR20 0\r\n#define GPIOR21 1\r\n#define GPIOR22 2\r\n#define GPIOR23 3\r\n#define GPIOR24 4\r\n#define GPIOR25 5\r\n#define GPIOR26 6\r\n#define GPIOR27 7\r\n\r\n#define SPCR _SFR_IO8(0x2C)\r\n#define SPR0 0\r\n#define SPR1 1\r\n#define CPHA 2\r\n#define CPOL 3\r\n#define MSTR 4\r\n#define DORD 5\r\n#define SPE 6\r\n#define SPIE 7\r\n\r\n#define SPSR _SFR_IO8(0x2D)\r\n#define SPI2X 0\r\n#define WCOL 6\r\n#define SPIF 7\r\n\r\n#define SPDR _SFR_IO8(0x2E)\r\n#define SPDR0 0\r\n#define SPDR1 1\r\n#define SPDR2 2\r\n#define SPDR3 3\r\n#define SPDR4 4\r\n#define SPDR5 5\r\n#define SPDR6 6\r\n#define SPDR7 7\r\n\r\n#define ACSR _SFR_IO8(0x30)\r\n#define ACIS0 0\r\n#define ACIS1 1\r\n#define ACIC 2\r\n#define ACIE 3\r\n#define ACI 4\r\n#define ACO 5\r\n#define ACBG 6\r\n#define ACD 7\r\n\r\n#define SMCR _SFR_IO8(0x33)\r\n#define SE 0\r\n#define SM0 1\r\n#define SM1 2\r\n#define SM2 3\r\n\r\n#define MCUSR _SFR_IO8(0x34)\r\n#define PORF 0\r\n#define EXTRF 1\r\n#define BORF 2\r\n#define WDRF 3\r\n\r\n#define MCUCR _SFR_IO8(0x35)\r\n#define IVCE 0\r\n#define IVSEL 1\r\n#define PUD 4\r\n#define BODSE 5\r\n#define BODS 6\r\n\r\n#define SPMCSR _SFR_IO8(0x37)\r\n#define SELFPRGEN 0 /* only for backwards compatibility with previous\r\n\t\t     * avr-libc versions; not an official name */\r\n#define SPMEN 0\r\n#define PGERS 1\r\n#define PGWRT 2\r\n#define BLBSET 3\r\n#define RWWSRE 4\r\n#define SIGRD 5\r\n#define RWWSB 6\r\n#define SPMIE 7\r\n\r\n#define WDTCSR _SFR_MEM8(0x60)\r\n#define WDP0 0\r\n#define WDP1 1\r\n#define WDP2 2\r\n#define WDE 3\r\n#define WDCE 4\r\n#define WDP3 5\r\n#define WDIE 6\r\n#define WDIF 7\r\n\r\n#define CLKPR _SFR_MEM8(0x61)\r\n#define CLKPS0 0\r\n#define CLKPS1 1\r\n#define CLKPS2 2\r\n#define CLKPS3 3\r\n#define CLKPCE 7\r\n\r\n#define PRR _SFR_MEM8(0x64)\r\n#define PRADC 0\r\n#define PRUSART0 1\r\n#define PRSPI 2\r\n#define PRTIM1 3\r\n#define PRTIM0 5\r\n#define PRTIM2 6\r\n#define PRTWI 7\r\n\r\n#define __AVR_HAVE_PRR\t((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI))\r\n#define __AVR_HAVE_PRR_PRADC\r\n#define __AVR_HAVE_PRR_PRUSART0\r\n#define __AVR_HAVE_PRR_PRSPI\r\n#define __AVR_HAVE_PRR_PRTIM1\r\n#define __AVR_HAVE_PRR_PRTIM0\r\n#define __AVR_HAVE_PRR_PRTIM2\r\n#define __AVR_HAVE_PRR_PRTWI\r\n\r\n#define OSCCAL _SFR_MEM8(0x66)\r\n#define CAL0 0\r\n#define CAL1 1\r\n#define CAL2 2\r\n#define CAL3 3\r\n#define CAL4 4\r\n#define CAL5 5\r\n#define CAL6 6\r\n#define CAL7 7\r\n\r\n#define PCICR _SFR_MEM8(0x68)\r\n#define PCIE0 0\r\n#define PCIE1 1\r\n#define PCIE2 2\r\n\r\n#define EICRA _SFR_MEM8(0x69)\r\n#define ISC00 0\r\n#define ISC01 1\r\n#define ISC10 2\r\n#define ISC11 3\r\n\r\n#define PCMSK0 _SFR_MEM8(0x6B)\r\n#define PCINT0 0\r\n#define PCINT1 1\r\n#define PCINT2 2\r\n#define PCINT3 3\r\n#define PCINT4 4\r\n#define PCINT5 5\r\n#define PCINT6 6\r\n#define PCINT7 7\r\n\r\n#define PCMSK1 _SFR_MEM8(0x6C)\r\n#define PCINT8 0\r\n#define PCINT9 1\r\n#define PCINT10 2\r\n#define PCINT11 3\r\n#define PCINT12 4\r\n#define PCINT13 5\r\n#define PCINT14 6\r\n\r\n#define PCMSK2 _SFR_MEM8(0x6D)\r\n#define PCINT16 0\r\n#define PCINT17 1\r\n#define PCINT18 2\r\n#define PCINT19 3\r\n#define PCINT20 4\r\n#define PCINT21 5\r\n#define PCINT22 6\r\n#define PCINT23 7\r\n\r\n#define TIMSK0 _SFR_MEM8(0x6E)\r\n#define TOIE0 0\r\n#define OCIE0A 1\r\n#define OCIE0B 2\r\n\r\n#define TIMSK1 _SFR_MEM8(0x6F)\r\n#define TOIE1 0\r\n#define OCIE1A 1\r\n#define OCIE1B 2\r\n#define ICIE1 5\r\n\r\n#define TIMSK2 _SFR_MEM8(0x70)\r\n#define TOIE2 0\r\n#define OCIE2A 1\r\n#define OCIE2B 2\r\n\r\n#ifndef __ASSEMBLER__\r\n#define ADC     _SFR_MEM16(0x78)\r\n#endif\r\n#define ADCW    _SFR_MEM16(0x78)\r\n\r\n#define ADCL _SFR_MEM8(0x78)\r\n#define ADCL0 0\r\n#define ADCL1 1\r\n#define ADCL2 2\r\n#define ADCL3 3\r\n#define ADCL4 4\r\n#define ADCL5 5\r\n#define ADCL6 6\r\n#define ADCL7 7\r\n\r\n#define ADCH _SFR_MEM8(0x79)\r\n#define ADCH0 0\r\n#define ADCH1 1\r\n#define ADCH2 2\r\n#define ADCH3 3\r\n#define ADCH4 4\r\n#define ADCH5 5\r\n#define ADCH6 6\r\n#define ADCH7 7\r\n\r\n#define ADCSRA _SFR_MEM8(0x7A)\r\n#define ADPS0 0\r\n#define ADPS1 1\r\n#define ADPS2 2\r\n#define ADIE 3\r\n#define ADIF 4\r\n#define ADATE 5\r\n#define ADSC 6\r\n#define ADEN 7\r\n\r\n#define ADCSRB _SFR_MEM8(0x7B)\r\n#define ADTS0 0\r\n#define ADTS1 1\r\n#define ADTS2 2\r\n#define ACME 6\r\n\r\n#define ADMUX _SFR_MEM8(0x7C)\r\n#define MUX0 0\r\n#define MUX1 1\r\n#define MUX2 2\r\n#define MUX3 3\r\n#define ADLAR 5\r\n#define REFS0 6\r\n#define REFS1 7\r\n\r\n#define DIDR0 _SFR_MEM8(0x7E)\r\n#define ADC0D 0\r\n#define ADC1D 1\r\n#define ADC2D 2\r\n#define ADC3D 3\r\n#define ADC4D 4\r\n#define ADC5D 5\r\n\r\n#define DIDR1 _SFR_MEM8(0x7F)\r\n#define AIN0D 0\r\n#define AIN1D 1\r\n\r\n#define TCCR1A _SFR_MEM8(0x80)\r\n#define WGM10 0\r\n#define WGM11 1\r\n#define COM1B0 4\r\n#define COM1B1 5\r\n#define COM1A0 6\r\n#define COM1A1 7\r\n\r\n#define TCCR1B _SFR_MEM8(0x81)\r\n#define CS10 0\r\n#define CS11 1\r\n#define CS12 2\r\n#define WGM12 3\r\n#define WGM13 4\r\n#define ICES1 6\r\n#define ICNC1 7\r\n\r\n#define TCCR1C _SFR_MEM8(0x82)\r\n#define FOC1B 6\r\n#define FOC1A 7\r\n\r\n#define TCNT1 _SFR_MEM16(0x84)\r\n\r\n#define TCNT1L _SFR_MEM8(0x84)\r\n#define TCNT1L0 0\r\n#define TCNT1L1 1\r\n#define TCNT1L2 2\r\n#define TCNT1L3 3\r\n#define TCNT1L4 4\r\n#define TCNT1L5 5\r\n#define TCNT1L6 6\r\n#define TCNT1L7 7\r\n\r\n#define TCNT1H _SFR_MEM8(0x85)\r\n#define TCNT1H0 0\r\n#define TCNT1H1 1\r\n#define TCNT1H2 2\r\n#define TCNT1H3 3\r\n#define TCNT1H4 4\r\n#define TCNT1H5 5\r\n#define TCNT1H6 6\r\n#define TCNT1H7 7\r\n\r\n#define ICR1 _SFR_MEM16(0x86)\r\n\r\n#define ICR1L _SFR_MEM8(0x86)\r\n#define ICR1L0 0\r\n#define ICR1L1 1\r\n#define ICR1L2 2\r\n#define ICR1L3 3\r\n#define ICR1L4 4\r\n#define ICR1L5 5\r\n#define ICR1L6 6\r\n#define ICR1L7 7\r\n\r\n#define ICR1H _SFR_MEM8(0x87)\r\n#define ICR1H0 0\r\n#define ICR1H1 1\r\n#define ICR1H2 2\r\n#define ICR1H3 3\r\n#define ICR1H4 4\r\n#define ICR1H5 5\r\n#define ICR1H6 6\r\n#define ICR1H7 7\r\n\r\n#define OCR1A _SFR_MEM16(0x88)\r\n\r\n#define OCR1AL _SFR_MEM8(0x88)\r\n#define OCR1AL0 0\r\n#define OCR1AL1 1\r\n#define OCR1AL2 2\r\n#define OCR1AL3 3\r\n#define OCR1AL4 4\r\n#define OCR1AL5 5\r\n#define OCR1AL6 6\r\n#define OCR1AL7 7\r\n\r\n#define OCR1AH _SFR_MEM8(0x89)\r\n#define OCR1AH0 0\r\n#define OCR1AH1 1\r\n#define OCR1AH2 2\r\n#define OCR1AH3 3\r\n#define OCR1AH4 4\r\n#define OCR1AH5 5\r\n#define OCR1AH6 6\r\n#define OCR1AH7 7\r\n\r\n#define OCR1B _SFR_MEM16(0x8A)\r\n\r\n#define OCR1BL _SFR_MEM8(0x8A)\r\n#define OCR1BL0 0\r\n#define OCR1BL1 1\r\n#define OCR1BL2 2\r\n#define OCR1BL3 3\r\n#define OCR1BL4 4\r\n#define OCR1BL5 5\r\n#define OCR1BL6 6\r\n#define OCR1BL7 7\r\n\r\n#define OCR1BH _SFR_MEM8(0x8B)\r\n#define OCR1BH0 0\r\n#define OCR1BH1 1\r\n#define OCR1BH2 2\r\n#define OCR1BH3 3\r\n#define OCR1BH4 4\r\n#define OCR1BH5 5\r\n#define OCR1BH6 6\r\n#define OCR1BH7 7\r\n\r\n#define TCCR2A _SFR_MEM8(0xB0)\r\n#define WGM20 0\r\n#define WGM21 1\r\n#define COM2B0 4\r\n#define COM2B1 5\r\n#define COM2A0 6\r\n#define COM2A1 7\r\n\r\n#define TCCR2B _SFR_MEM8(0xB1)\r\n#define CS20 0\r\n#define CS21 1\r\n#define CS22 2\r\n#define WGM22 3\r\n#define FOC2B 6\r\n#define FOC2A 7\r\n\r\n#define TCNT2 _SFR_MEM8(0xB2)\r\n#define TCNT2_0 0\r\n#define TCNT2_1 1\r\n#define TCNT2_2 2\r\n#define TCNT2_3 3\r\n#define TCNT2_4 4\r\n#define TCNT2_5 5\r\n#define TCNT2_6 6\r\n#define TCNT2_7 7\r\n\r\n#define OCR2A _SFR_MEM8(0xB3)\r\n#define OCR2_0 0\r\n#define OCR2_1 1\r\n#define OCR2_2 2\r\n#define OCR2_3 3\r\n#define OCR2_4 4\r\n#define OCR2_5 5\r\n#define OCR2_6 6\r\n#define OCR2_7 7\r\n\r\n#define OCR2B _SFR_MEM8(0xB4)\r\n#define OCR2_0 0\r\n#define OCR2_1 1\r\n#define OCR2_2 2\r\n#define OCR2_3 3\r\n#define OCR2_4 4\r\n#define OCR2_5 5\r\n#define OCR2_6 6\r\n#define OCR2_7 7\r\n\r\n#define ASSR _SFR_MEM8(0xB6)\r\n#define TCR2BUB 0\r\n#define TCR2AUB 1\r\n#define OCR2BUB 2\r\n#define OCR2AUB 3\r\n#define TCN2UB 4\r\n#define AS2 5\r\n#define EXCLK 6\r\n\r\n#define TWBR _SFR_MEM8(0xB8)\r\n#define TWBR0 0\r\n#define TWBR1 1\r\n#define TWBR2 2\r\n#define TWBR3 3\r\n#define TWBR4 4\r\n#define TWBR5 5\r\n#define TWBR6 6\r\n#define TWBR7 7\r\n\r\n#define TWSR _SFR_MEM8(0xB9)\r\n#define TWPS0 0\r\n#define TWPS1 1\r\n#define TWS3 3\r\n#define TWS4 4\r\n#define TWS5 5\r\n#define TWS6 6\r\n#define TWS7 7\r\n\r\n#define TWAR _SFR_MEM8(0xBA)\r\n#define TWGCE 0\r\n#define TWA0 1\r\n#define TWA1 2\r\n#define TWA2 3\r\n#define TWA3 4\r\n#define TWA4 5\r\n#define TWA5 6\r\n#define TWA6 7\r\n\r\n#define TWDR _SFR_MEM8(0xBB)\r\n#define TWD0 0\r\n#define TWD1 1\r\n#define TWD2 2\r\n#define TWD3 3\r\n#define TWD4 4\r\n#define TWD5 5\r\n#define TWD6 6\r\n#define TWD7 7\r\n\r\n#define TWCR _SFR_MEM8(0xBC)\r\n#define TWIE 0\r\n#define TWEN 2\r\n#define TWWC 3\r\n#define TWSTO 4\r\n#define TWSTA 5\r\n#define TWEA 6\r\n#define TWINT 7\r\n\r\n#define TWAMR _SFR_MEM8(0xBD)\r\n#define TWAM0 0\r\n#define TWAM1 1\r\n#define TWAM2 2\r\n#define TWAM3 3\r\n#define TWAM4 4\r\n#define TWAM5 5\r\n#define TWAM6 6\r\n\r\n#define UCSR0A _SFR_MEM8(0xC0)\r\n#define MPCM0 0\r\n#define U2X0 1\r\n#define UPE0 2\r\n#define DOR0 3\r\n#define FE0 4\r\n#define UDRE0 5\r\n#define TXC0 6\r\n#define RXC0 7\r\n\r\n#define UCSR0B _SFR_MEM8(0xC1)\r\n#define TXB80 0\r\n#define RXB80 1\r\n#define UCSZ02 2\r\n#define TXEN0 3\r\n#define RXEN0 4\r\n#define UDRIE0 5\r\n#define TXCIE0 6\r\n#define RXCIE0 7\r\n\r\n#define UCSR0C _SFR_MEM8(0xC2)\r\n#define UCPOL0 0\r\n#define UCSZ00 1\r\n#define UCPHA0 1\r\n#define UCSZ01 2\r\n#define UDORD0 2\r\n#define USBS0 3\r\n#define UPM00 4\r\n#define UPM01 5\r\n#define UMSEL00 6\r\n#define UMSEL01 7\r\n\r\n#define UBRR0 _SFR_MEM16(0xC4)\r\n\r\n#define UBRR0L _SFR_MEM8(0xC4)\r\n#define UBRR0_0 0\r\n#define UBRR0_1 1\r\n#define UBRR0_2 2\r\n#define UBRR0_3 3\r\n#define UBRR0_4 4\r\n#define UBRR0_5 5\r\n#define UBRR0_6 6\r\n#define UBRR0_7 7\r\n\r\n#define UBRR0H _SFR_MEM8(0xC5)\r\n#define UBRR0_8 0\r\n#define UBRR0_9 1\r\n#define UBRR0_10 2\r\n#define UBRR0_11 3\r\n\r\n#define UDR0 _SFR_MEM8(0xC6)\r\n#define UDR0_0 0\r\n#define UDR0_1 1\r\n#define UDR0_2 2\r\n#define UDR0_3 3\r\n#define UDR0_4 4\r\n#define UDR0_5 5\r\n#define UDR0_6 6\r\n#define UDR0_7 7\r\n\r\n\r\n\r\n/* Interrupt Vectors */\r\n/* Interrupt Vector 0 is the reset vector. */\r\n\r\n#define INT0_vect_num     1\r\n#define INT0_vect         _VECTOR(1)   /* External Interrupt Request 0 */\r\n\r\n#define INT1_vect_num     2\r\n#define INT1_vect         _VECTOR(2)   /* External Interrupt Request 1 */\r\n\r\n#define PCINT0_vect_num   3\r\n#define PCINT0_vect       _VECTOR(3)   /* Pin Change Interrupt Request 0 */\r\n\r\n#define PCINT1_vect_num   4\r\n#define PCINT1_vect       _VECTOR(4)   /* Pin Change Interrupt Request 0 */\r\n\r\n#define PCINT2_vect_num   5\r\n#define PCINT2_vect       _VECTOR(5)   /* Pin Change Interrupt Request 1 */\r\n\r\n#define WDT_vect_num      6\r\n#define WDT_vect          _VECTOR(6)   /* Watchdog Time-out Interrupt */\r\n\r\n#define TIMER2_COMPA_vect_num 7\r\n#define TIMER2_COMPA_vect _VECTOR(7)   /* Timer/Counter2 Compare Match A */\r\n\r\n#define TIMER2_COMPB_vect_num 8\r\n#define TIMER2_COMPB_vect _VECTOR(8)   /* Timer/Counter2 Compare Match A */\r\n\r\n#define TIMER2_OVF_vect_num   9\r\n#define TIMER2_OVF_vect   _VECTOR(9)   /* Timer/Counter2 Overflow */\r\n\r\n#define TIMER1_CAPT_vect_num  10\r\n#define TIMER1_CAPT_vect  _VECTOR(10)  /* Timer/Counter1 Capture Event */\r\n\r\n#define TIMER1_COMPA_vect_num 11\r\n#define TIMER1_COMPA_vect _VECTOR(11)  /* Timer/Counter1 Compare Match A */\r\n\r\n#define TIMER1_COMPB_vect_num 12\r\n#define TIMER1_COMPB_vect _VECTOR(12)  /* Timer/Counter1 Compare Match B */ \r\n\r\n#define TIMER1_OVF_vect_num   13\r\n#define TIMER1_OVF_vect   _VECTOR(13)  /* Timer/Counter1 Overflow */\r\n\r\n#define TIMER0_COMPA_vect_num 14\r\n#define TIMER0_COMPA_vect _VECTOR(14)  /* TimerCounter0 Compare Match A */\r\n\r\n#define TIMER0_COMPB_vect_num 15\r\n#define TIMER0_COMPB_vect _VECTOR(15)  /* TimerCounter0 Compare Match B */\r\n\r\n#define TIMER0_OVF_vect_num  16\r\n#define TIMER0_OVF_vect   _VECTOR(16)  /* Timer/Couner0 Overflow */\r\n\r\n#define SPI_STC_vect_num  17\r\n#define SPI_STC_vect      _VECTOR(17)  /* SPI Serial Transfer Complete */\r\n\r\n#define USART_RX_vect_num 18\r\n#define USART_RX_vect     _VECTOR(18)  /* USART Rx Complete */\r\n\r\n#define USART_UDRE_vect_num   19\r\n#define USART_UDRE_vect   _VECTOR(19)  /* USART, Data Register Empty */\r\n\r\n#define USART_TX_vect_num 20\r\n#define USART_TX_vect     _VECTOR(20)  /* USART Tx Complete */\r\n\r\n#define ADC_vect_num      21\r\n#define ADC_vect          _VECTOR(21)  /* ADC Conversion Complete */\r\n\r\n#define EE_READY_vect_num 22\r\n#define EE_READY_vect     _VECTOR(22)  /* EEPROM Ready */\r\n\r\n#define ANALOG_COMP_vect_num  23\r\n#define ANALOG_COMP_vect  _VECTOR(23)  /* Analog Comparator */\r\n\r\n#define TWI_vect_num      24\r\n#define TWI_vect          _VECTOR(24)  /* Two-wire Serial Interface */\r\n\r\n#define SPM_READY_vect_num    25\r\n#define SPM_READY_vect    _VECTOR(25)  /* Store Program Memory Read */\r\n\r\n#define _VECTORS_SIZE (26 * 4)\r\n\r\n\r\n\r\n/* Constants */\r\n#define SPM_PAGESIZE 128\r\n#define RAMSTART     (0x100)\r\n#define RAMEND       0x8FF     /* Last On-Chip SRAM Location */\r\n#define XRAMSIZE     0\r\n#define XRAMEND      RAMEND\r\n#define E2END        0x3FF\r\n#define E2PAGESIZE   4\r\n#define FLASHEND     0x7FFF\r\n\r\n\r\n\r\n/* Fuses */\r\n#define FUSE_MEMORY_SIZE 3\r\n\r\n/* Low Fuse Byte */\r\n#define FUSE_CKSEL0 (unsigned char)~_BV(0)  /* Select Clock Source */\r\n#define FUSE_CKSEL1 (unsigned char)~_BV(1)  /* Select Clock Source */\r\n#define FUSE_CKSEL2 (unsigned char)~_BV(2)  /* Select Clock Source */\r\n#define FUSE_CKSEL3 (unsigned char)~_BV(3)  /* Select Clock Source */\r\n#define FUSE_SUT0   (unsigned char)~_BV(4)  /* Select start-up time */\r\n#define FUSE_SUT1   (unsigned char)~_BV(5)  /* Select start-up time */\r\n#define FUSE_CKOUT  (unsigned char)~_BV(6)  /* Clock output */\r\n#define FUSE_CKDIV8 (unsigned char)~_BV(7) /* Divide clock by 8 */\r\n#define LFUSE_DEFAULT (FUSE_CKSEL0 & FUSE_CKSEL2 & FUSE_CKSEL3 & FUSE_SUT0 & FUSE_CKDIV8)\r\n\r\n/* High Fuse Byte */\r\n#define FUSE_BOOTRST (unsigned char)~_BV(0)\r\n#define FUSE_BOOTSZ0 (unsigned char)~_BV(1)\r\n#define FUSE_BOOTSZ1 (unsigned char)~_BV(2)\r\n#define FUSE_EESAVE    (unsigned char)~_BV(3)  /* EEPROM memory is preserved through chip erase */\r\n#define FUSE_WDTON     (unsigned char)~_BV(4)  /* Watchdog Timer Always On */\r\n#define FUSE_SPIEN     (unsigned char)~_BV(5)  /* Enable Serial programming and Data Downloading */\r\n#define FUSE_DWEN      (unsigned char)~_BV(6)  /* debugWIRE Enable */\r\n#define FUSE_RSTDISBL  (unsigned char)~_BV(7)  /* External reset disable */\r\n#define HFUSE_DEFAULT (FUSE_BOOTSZ0 & FUSE_BOOTSZ1 & FUSE_SPIEN)\r\n\r\n/* Extended Fuse Byte */\r\n#define FUSE_BODLEVEL0 (unsigned char)~_BV(0)  /* Brown-out Detector trigger level */\r\n#define FUSE_BODLEVEL1 (unsigned char)~_BV(1)  /* Brown-out Detector trigger level */\r\n#define FUSE_BODLEVEL2 (unsigned char)~_BV(2)  /* Brown-out Detector trigger level */\r\n#define EFUSE_DEFAULT  (0xFF)\r\n\r\n\r\n\r\n/* Lock Bits */\r\n#define __LOCK_BITS_EXIST\r\n#define __BOOT_LOCK_BITS_0_EXIST\r\n#define __BOOT_LOCK_BITS_1_EXIST \r\n\r\n\r\n/* Signature */\r\n#define SIGNATURE_0 0x1E\r\n#define SIGNATURE_1 0x95\r\n#if defined(__AVR_ATmega328__)\r\n#  define SIGNATURE_2 0x14\r\n#else /* ATmega328P */\r\n#  define SIGNATURE_2 0x0F\r\n#endif\r\n\r\n#define SLEEP_MODE_IDLE (0x00<<1)\r\n#define SLEEP_MODE_ADC (0x01<<1)\r\n#define SLEEP_MODE_PWR_DOWN (0x02<<1)\r\n#define SLEEP_MODE_PWR_SAVE (0x03<<1)\r\n#define SLEEP_MODE_STANDBY (0x06<<1)\r\n#define SLEEP_MODE_EXT_STANDBY (0x07<<1)\r\n\r\n#endif  /* _AVR_IOM328P_H_ */\r\n"}}}Content-Length: 218

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/iom328p.h"}}}
>>>
Content-Length: 226

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/iom328p.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":403,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":403,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":404,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":404,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":147},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"S"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":405,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":405,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 563

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'S'"},{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":148},"contentChanges":[{"range":{"start":{"line":9,"character":1},"end":{"line":9,"character":1}},"rangeLength":0,"text":"e"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":406,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":406,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":149},"contentChanges":[{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":406}}Content-Length: 197

{"jsonrpc":"2.0","id":407,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 564

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Se'"},{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":407,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 565

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Ser'"},{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":150},"contentChanges":[{"range":{"start":{"line":9,"character":3},"end":{"line":9,"character":3}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":408,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":151},"contentChanges":[{"range":{"start":{"line":9,"character":4},"end":{"line":9,"character":4}},"rangeLength":0,"text":"a"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":408}}Content-Length: 197

{"jsonrpc":"2.0","id":409,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":408,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 566

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":4}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Seri'"},{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":409,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":152},"contentChanges":[{"range":{"start":{"line":9,"character":5},"end":{"line":9,"character":5}},"rangeLength":0,"text":"l"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":409}}Content-Length: 197

{"jsonrpc":"2.0","id":410,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 782

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":5}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:143:25:\nnote: 'Serial' declared here"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":410,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":411,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":411,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":153},"contentChanges":[{"range":{"start":{"line":9,"character":6},"end":{"line":9,"character":6}},"rangeLength":0,"text":"."}]}}Content-Length: 280

{"jsonrpc":"2.0","id":412,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":7},"context":{"triggerKind":2,"triggerCharacter":"."}}}Content-Length: 197

{"jsonrpc":"2.0","id":413,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 6519

{"id":412,"result":{"isIncomplete":false,"items":[{"label":" begin(…)","kind":2,"detail":"[2 overloads]","sortText":"3e97ae13begin","filterText":"begin","insertText":"begin($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"begin($0)"}},{"label":" available()","kind":2,"detail":"int","sortText":"3ee51eb8available","filterText":"available","insertText":"available()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"available()"}},{"label":" availableForWrite()","kind":2,"detail":"int","sortText":"3ee51eb8availableForWrite","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"availableForWrite()"}},{"label":" end()","kind":2,"detail":"void","sortText":"3ee51eb8end","filterText":"end","insertText":"end()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"end()"}},{"label":" flush()","kind":2,"detail":"void","sortText":"3ee51eb8flush","filterText":"flush","insertText":"flush()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"flush()"}},{"label":" peek()","kind":2,"detail":"int","sortText":"3ee51eb8peek","filterText":"peek","insertText":"peek()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"peek()"}},{"label":" read()","kind":2,"detail":"int","sortText":"3ee51eb8read","filterText":"read","insertText":"read()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"read()"}},{"label":" write(…)","kind":2,"detail":"[3 overloads]","sortText":"3ee51eb8write","filterText":"write","insertText":"write($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"write($0)"}},{"label":" write(…)","kind":2,"detail":"[5 overloads]","sortText":"3ee51eb8write","filterText":"write","insertText":"write($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"write($0)"}},{"label":" clearWriteError()","kind":2,"detail":"void","sortText":"3f651eb8clearWriteError","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"clearWriteError()"}},{"label":" find(…)","kind":2,"detail":"[5 overloads]","sortText":"3f651eb8find","filterText":"find","insertText":"find($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"find($0)"}},{"label":" findUntil(…)","kind":2,"detail":"[4 overloads]","sortText":"3f651eb8findUntil","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"findUntil($0)"}},{"label":" getTimeout()","kind":2,"detail":"unsigned long","sortText":"3f651eb8getTimeout","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"getTimeout()"}},{"label":" getWriteError()","kind":2,"detail":"int","sortText":"3f651eb8getWriteError","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"getWriteError()"}},{"label":" parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","kind":2,"detail":"float","sortText":"3f651eb8parseFloat","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"parseFloat()"}},{"label":" parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","kind":2,"detail":"long","sortText":"3f651eb8parseInt","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"parseInt()"}},{"label":" print(…)","kind":2,"detail":"[11 overloads]","sortText":"3f651eb8print","filterText":"print","insertText":"print($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"print($0)"}},{"label":" println(…)","kind":2,"detail":"[12 overloads]","sortText":"3f651eb8println","filterText":"println","insertText":"println($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"println($0)"}},{"label":" readBytes(…)","kind":2,"detail":"[2 overloads]","sortText":"3f651eb8readBytes","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"readBytes($0)"}},{"label":" readBytesUntil(…)","kind":2,"detail":"[2 overloads]","sortText":"3f651eb8readBytesUntil","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"readBytesUntil($0)"}},{"label":" readString()","kind":2,"detail":"String","sortText":"3f651eb8readString","filterText":"readString","insertText":"readString()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"readString()"}},{"label":" readStringUntil(char terminator)","kind":2,"detail":"String","sortText":"3f651eb8readStringUntil","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"readStringUntil(${1:char terminator})"}},{"label":" setTimeout(unsigned long timeout)","kind":2,"detail":"void","sortText":"3f651eb8setTimeout","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"newText":"setTimeout(${1:unsigned long timeout})"}}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":413,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'MFS' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":414,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":414,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":154},"contentChanges":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"rangeLength":0,"text":"w"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":415,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":415,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":155},"contentChanges":[{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":8}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":415}}Content-Length: 197

{"jsonrpc":"2.0","id":416,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 568

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":8}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'w' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":416,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":417,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 569

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":9}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'wr' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":417,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":156},"contentChanges":[{"range":{"start":{"line":9,"character":9},"end":{"line":9,"character":9}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":418,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":418,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 571

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":10}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'wri' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":157},"contentChanges":[{"range":{"start":{"line":9,"character":10},"end":{"line":9,"character":10}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":419,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":419,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 572

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":11}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'writ' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":158},"contentChanges":[{"range":{"start":{"line":9,"character":11},"end":{"line":9,"character":11}},"rangeLength":0,"text":"e"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":420,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":420,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1862

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:129:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:130:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:131:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:132:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:133:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:52:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:56:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:57:12:\nnote: possible target for call"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":421,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 1768

{"jsonrpc":"2.0","id":422,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":12},"end":{"line":9,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"message":"Reference to non-static member function must be called\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:129:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:130:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:131:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:132:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:133:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:52:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:56:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:57:12:\nnote: possible target for call","severity":1,"code":"bound_member_function","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":421,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":422,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":158}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":159},"contentChanges":[{"range":{"start":{"line":9,"character":12},"end":{"line":9,"character":12}},"rangeLength":0,"text":"="}]}}Content-Length: 197

{"jsonrpc":"2.0","id":423,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":160},"contentChanges":[{"range":{"start":{"line":9,"character":12},"end":{"line":9,"character":13}},"rangeLength":1,"text":""}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":423}}Content-Length: 197

{"jsonrpc":"2.0","id":424,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":423,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1662

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:129:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:130:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:131:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:132:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:133:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:52:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:56:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:57:12:\nnote: possible target for call"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":424,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1862

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:129:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:130:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:131:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:132:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:133:19:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:52:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:56:20:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:57:12:\nnote: possible target for call"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":161},"contentChanges":[{"range":{"start":{"line":9,"character":11},"end":{"line":9,"character":12}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":425,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":426,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 410

{"id":425,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 572

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":11}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'writ' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":426,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":162},"contentChanges":[{"range":{"start":{"line":9,"character":10},"end":{"line":9,"character":11}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":427,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":427,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 571

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":10}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'wri' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":163},"contentChanges":[{"range":{"start":{"line":9,"character":9},"end":{"line":9,"character":10}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":428,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":428,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 569

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":9}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'wr' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":164},"contentChanges":[{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":429,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":429,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 568

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":8}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'w' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":165},"contentChanges":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":430,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":430,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'MFS' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":431,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 296

{"jsonrpc":"2.0","id":432,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":431,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":432,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":165}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":166},"contentChanges":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":7}},"rangeLength":0,"text":"p"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":433,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":433,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":167},"contentChanges":[{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":8}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":433}}Content-Length: 197

{"jsonrpc":"2.0","id":434,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 568

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":8}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'p' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":434,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 569

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":9}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'pr' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":168},"contentChanges":[{"range":{"start":{"line":9,"character":9},"end":{"line":9,"character":9}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":435,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":435,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":169},"contentChanges":[{"range":{"start":{"line":9,"character":10},"end":{"line":9,"character":10}},"rangeLength":0,"text":"n"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":435}}Content-Length: 197

{"jsonrpc":"2.0","id":436,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 571

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":10}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'pri' in 'HardwareSerial'"},{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":436,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":170},"contentChanges":[{"range":{"start":{"line":9,"character":11},"end":{"line":9,"character":11}},"rangeLength":0,"text":"t"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":436}}Content-Length: 197

{"jsonrpc":"2.0","id":437,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 572

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":11}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'prin' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":437,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2268

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:65:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:66:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:67:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:68:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:69:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:70:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:71:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:72:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:73:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:74:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:75:12:\nnote: possible target for call"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":438,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 2174

{"jsonrpc":"2.0","id":439,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":12},"end":{"line":9,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":12}},"message":"Reference to non-static member function must be called\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:65:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:66:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:67:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:68:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:69:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:70:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:71:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:72:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:73:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:74:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:75:12:\nnote: possible target for call","severity":1,"code":"bound_member_function","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":438,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":439,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":170}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":171},"contentChanges":[{"range":{"start":{"line":9,"character":12},"end":{"line":9,"character":12}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":440,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":440,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":172},"contentChanges":[{"range":{"start":{"line":9,"character":13},"end":{"line":9,"character":13}},"rangeLength":0,"text":"m"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":440}}Content-Length: 197

{"jsonrpc":"2.0","id":441,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 574

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":13}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'printl' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":441,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 575

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":14}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'printlm' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":173},"contentChanges":[{"range":{"start":{"line":9,"character":13},"end":{"line":9,"character":14}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":442,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":442,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":443,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 574

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":7},"end":{"line":9,"character":13}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'printl' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":443,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":174},"contentChanges":[{"range":{"start":{"line":9,"character":13},"end":{"line":9,"character":13}},"rangeLength":0,"text":"n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":444,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":444,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2480

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":14}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:77:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:78:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:79:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:80:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:81:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:82:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:83:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:84:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:85:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:86:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:87:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:88:12:\nnote: possible target for call"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":445,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 2386

{"jsonrpc":"2.0","id":446,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":14},"end":{"line":9,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":14}},"message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:77:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:78:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:79:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:80:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:81:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:82:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:83:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:84:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:85:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:86:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:87:12:\nnote: possible target for call\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Print.h:88:12:\nnote: possible target for call","severity":1,"code":"bound_member_function","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":445,"result":[],"jsonrpc":"2.0"}Content-Length: 190

{"id":446,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":175},"contentChanges":[{"range":{"start":{"line":9,"character":14},"end":{"line":9,"character":14}},"rangeLength":0,"text":"()"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":447,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":447,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","id":448,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":15},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 183

{"id":448,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":449,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":450,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":15},"end":{"line":9,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":449,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":450,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":175}}}Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":176},"contentChanges":[{"range":{"start":{"line":9,"character":15},"end":{"line":9,"character":15}},"rangeLength":0,"text":"\"\""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":451,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":451,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":452,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":453,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":452,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":453,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":176}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":177},"contentChanges":[{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":454,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":454,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":178},"contentChanges":[{"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"rangeLength":0,"text":":"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":455,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":18},"context":{"triggerKind":2,"triggerCharacter":":"}}}Content-Length: 197

{"jsonrpc":"2.0","id":456,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 69

{"id":455,"result":{"isIncomplete":false,"items":[]},"jsonrpc":"2.0"}Content-Length: 410

{"id":456,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":457,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":457,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":179},"contentChanges":[{"range":{"start":{"line":9,"character":18},"end":{"line":9,"character":18}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":458,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":458,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":180},"contentChanges":[{"range":{"start":{"line":9,"character":19},"end":{"line":9,"character":19}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":459,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":459,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":460,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":461,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":20},"end":{"line":9,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":460,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":461,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":180}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":181},"contentChanges":[{"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":21}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":462,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":462,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":463,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":464,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":22},"end":{"line":9,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":463,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":464,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":182},"contentChanges":[{"range":{"start":{"line":9,"character":22},"end":{"line":9,"character":22}},"rangeLength":0,"text":"+"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":465,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":465,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":23},"end":{"line":9,"character":24}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":183},"contentChanges":[{"range":{"start":{"line":9,"character":23},"end":{"line":9,"character":23}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":466,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":466,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":25}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":467,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 466

{"jsonrpc":"2.0","id":468,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":25}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":467,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":468,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":183}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":184},"contentChanges":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":24}},"rangeLength":0,"text":"S"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":469,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":469,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 572

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'S'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":470,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 478

{"jsonrpc":"2.0","id":471,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":25},"end":{"line":9,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":25}},"message":"Use of undeclared identifier 'S'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":470,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":471,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":184}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":185},"contentChanges":[{"range":{"start":{"line":9,"character":25},"end":{"line":9,"character":25}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":472,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":472,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 573

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":26}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'St'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":186},"contentChanges":[{"range":{"start":{"line":9,"character":26},"end":{"line":9,"character":26}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":473,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":473,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 574

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Str'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":474,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":187},"contentChanges":[{"range":{"start":{"line":9,"character":27},"end":{"line":9,"character":27}},"rangeLength":0,"text":"i"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":474}}Content-Length: 197

{"jsonrpc":"2.0","id":475,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 38

{"id":474,"result":[],"jsonrpc":"2.0"}Content-Length: 410

{"id":475,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":188},"contentChanges":[{"range":{"start":{"line":9,"character":28},"end":{"line":9,"character":28}},"rangeLength":0,"text":"n"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":475}}Content-Length: 197

{"jsonrpc":"2.0","id":476,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 575

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Stri'"}]},"jsonrpc":"2.0"}Content-Length: 576

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Strin'"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":476,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":189},"contentChanges":[{"range":{"start":{"line":9,"character":29},"end":{"line":9,"character":29}},"rangeLength":0,"text":"g"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":477,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":477,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 511

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":30}},"severity":1,"code":"ref_non_value","source":"clang","message":"'String' does not refer to a value\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":190},"contentChanges":[{"range":{"start":{"line":9,"character":30},"end":{"line":9,"character":30}},"rangeLength":0,"text":"()"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":478,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":478,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":479,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":479,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","id":480,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":31},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 183

{"id":480,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":481,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":482,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":481,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":482,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":190}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":191},"contentChanges":[{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":31}},"rangeLength":0,"text":"P"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":483,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":483,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'P'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":192},"contentChanges":[{"range":{"start":{"line":9,"character":32},"end":{"line":9,"character":32}},"rangeLength":0,"text":"O"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":484,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 373

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":33}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PO'"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":484,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":485,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":485,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":193},"contentChanges":[{"range":{"start":{"line":9,"character":33},"end":{"line":9,"character":33}},"rangeLength":0,"text":"R"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":486,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":486,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'POR'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":194},"contentChanges":[{"range":{"start":{"line":9,"character":34},"end":{"line":9,"character":34}},"rangeLength":0,"text":"T"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":487,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":487,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORT'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":488,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 481

{"jsonrpc":"2.0","id":489,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":35},"end":{"line":9,"character":35}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":35}},"message":"Use of undeclared identifier 'PORT'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":488,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":489,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":194}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":195},"contentChanges":[{"range":{"start":{"line":9,"character":35},"end":{"line":9,"character":35}},"rangeLength":0,"text":"B"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":490,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":490,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":491,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":492,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":36},"end":{"line":9,"character":36}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":491,"result":[],"jsonrpc":"2.0"}Content-Length: 395

{"id":492,"result":[{"title":"Expand macro 'PORTB'","kind":"refactor","command":{"title":"Expand macro 'PORTB'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":16,"character":36},"end":{"line":16,"character":36}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":196},"contentChanges":[{"range":{"start":{"line":9,"character":36},"end":{"line":9,"character":36}},"rangeLength":0,"text":","}]}}Content-Length: 197

{"jsonrpc":"2.0","id":493,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":493,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":197},"contentChanges":[{"range":{"start":{"line":9,"character":37},"end":{"line":9,"character":37}},"rangeLength":0,"text":" "}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":493}}Content-Length: 197

{"jsonrpc":"2.0","id":494,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":37},"end":{"line":9,"character":38}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":494,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":39}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","id":495,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":38},"context":{"isRetrigger":false,"triggerCharacter":",","triggerKind":2}}}
>>>
Content-Length: 183

{"id":495,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":496,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 466

{"jsonrpc":"2.0","id":497,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":38}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":39}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":496,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":497,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":197}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":198},"contentChanges":[{"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":38}},"rangeLength":0,"text":"B"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":498,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":39}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B'"}]},"jsonrpc":"2.0"}Content-Length: 410

{"id":498,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":499,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 478

{"jsonrpc":"2.0","id":500,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":39},"end":{"line":9,"character":39}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":39}},"message":"Use of undeclared identifier 'B'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":499,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":500,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":198}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":199},"contentChanges":[{"range":{"start":{"line":9,"character":39},"end":{"line":9,"character":39}},"rangeLength":0,"text":"I"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":501,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":501,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 373

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":9,"character":38},"end":{"line":9,"character":40}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BI'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":200},"contentChanges":[{"range":{"start":{"line":9,"character":40},"end":{"line":9,"character":40}},"rangeLength":0,"text":"N"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":502,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":502,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":7}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":503,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":504,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":41},"end":{"line":9,"character":41}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":503,"result":[],"jsonrpc":"2.0"}Content-Length: 391

{"id":504,"result":[{"title":"Expand macro 'BIN'","kind":"refactor","command":{"title":"Expand macro 'BIN'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":16,"character":41},"end":{"line":16,"character":41}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":200}}}Content-Length: 298

{"jsonrpc":"2.0","id":505,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":43},"end":{"line":9,"character":43}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":505,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":201},"contentChanges":[{"range":{"start":{"line":9,"character":43},"end":{"line":9,"character":43}},"rangeLength":0,"text":";"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":506,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":506,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":507,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":508,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":44},"end":{"line":9,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":507,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":508,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":201}}}Content-Length: 300

{"jsonrpc":"2.0","id":509,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":509,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 328

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":202},"contentChanges":[{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":31}},"rangeLength":0,"text":"\n    "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":510,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":510,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 472

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":203},"contentChanges":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":4}},"rangeLength":4,"text":""},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"rangeLength":0,"text":"Serial.println(\"1:  \" + String(PORTB, BIN));\n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":511,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":511,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":203}}}Content-Length: 300

{"jsonrpc":"2.0","id":512,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":43},"end":{"line":11,"character":43}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":512,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":513,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":42},"end":{"line":11,"character":42}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":513,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":514,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":41}}}
>>>
Content-Length: 213

{"id":514,"result":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":30}},"kind":1},{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":30}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":515,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":39},"end":{"line":11,"character":39}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 391

{"id":515,"result":[{"title":"Expand macro 'BIN'","kind":"refactor","command":{"title":"Expand macro 'BIN'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":18,"character":39},"end":{"line":18,"character":39}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":516,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":37},"end":{"line":11,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":516,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":517,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":36}}}
>>>
Content-Length: 213

{"id":517,"result":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":30}},"kind":1},{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":30}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":518,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":30}}}
>>>
Content-Length: 213

{"id":518,"result":[{"range":{"start":{"line":9,"character":24},"end":{"line":9,"character":30}},"kind":1},{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":30}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":519,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":17}}}
>>>
Content-Length: 38

{"id":519,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":520,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":520,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":521,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":521,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":204},"contentChanges":[{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":17}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":522,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":522,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":205},"contentChanges":[{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":16}},"rangeLength":0,"text":"2"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":523,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 410

{"id":523,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":524,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":524,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":205}}}Content-Length: 226

{"jsonrpc":"2.0","id":525,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":15}}}
>>>
Content-Length: 369

{"id":525,"result":{"contents":{"kind":"markdown","value":"### instance-method `writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":526,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":18}}}
>>>
Content-Length: 214

{"id":526,"result":{"contents":{"kind":"markdown","value":"### macro `B1010`  \n\n---\n```cpp\n#define B1010 10\n```"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":23}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":527,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":19}}}
>>>
Content-Length: 214

{"id":527,"result":{"contents":{"kind":"markdown","value":"### macro `B1010`  \n\n---\n```cpp\n#define B1010 10\n```"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":23}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":528,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":19}}}
>>>
Content-Length: 38

{"id":528,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":529,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":19},"end":{"line":10,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 774

{"id":529,"result":[{"title":"Expand macro 'B1010'","kind":"refactor","command":{"title":"Expand macro 'B1010'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":17,"character":19},"end":{"line":17,"character":22}}}]}},{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":10,"character":19},"end":{"line":10,"character":22}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":530,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":19},"end":{"line":10,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 774

{"id":530,"result":[{"title":"Expand macro 'B1010'","kind":"refactor","command":{"title":"Expand macro 'B1010'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server435482587/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":17,"character":19},"end":{"line":17,"character":23}}}]}},{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":10,"character":19},"end":{"line":10,"character":23}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":531,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":531,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":532,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":532,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":533,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":4}}}
>>>
Content-Length: 218

{"id":533,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":534,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":3}}}
>>>
Content-Length: 40

{"id":534,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":535,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":4}}}
>>>
Content-Length: 218

{"id":535,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":536,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":19}}}
>>>
Content-Length: 326

{"id":536,"result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud)\n```"},"range":{"start":{"line":8,"character":19},"end":{"line":8,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":537,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":20}}}
>>>
Content-Length: 326

{"id":537,"result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud)\n```"},"range":{"start":{"line":8,"character":20},"end":{"line":8,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":538,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":21},"end":{"line":8,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":538,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":206},"contentChanges":[{"range":{"start":{"line":8,"character":21},"end":{"line":8,"character":21}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":539,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34452,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 592

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":206,"text":"#include <MultiFuncShield.h>\n\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n  \nSerial.println(\"1:  \" + String(PORTB, BIN));\n    MFS.writeLeds(B1010, true);\nSerial.println(\"2:  \" + String(PORTB, BIN));\n\n}\n\n\nvoid loop() {\n\n}\n"}}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":206}}}Content-Length: 345

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":207},"contentChanges":[{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"rangeLength":0,"text":"MFS.writeLeds(B1010, true);"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":29},"end":{"line":9,"character":29}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":207}}}Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 408

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 408

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":27}}}
>>>
Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":21}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":208},"contentChanges":[{"range":{"start":{"line":9,"character":20},"end":{"line":9,"character":21}},"rangeLength":1,"text":""}]}}Content-Length: 195

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 113

{"id":8,"error":{"code":-32602,"message":"trying to get AST for non-added document","data":null},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34452,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 618

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":208,"text":"#include <MultiFuncShield.h>\n\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n  MFS.writeLeds(B101, true);\nSerial.println(\"1:  \" + String(PORTB, BIN));\n    MFS.writeLeds(B1010, true);\nSerial.println(\"2:  \" + String(PORTB, BIN));\n\n}\n\n\nvoid loop() {\n\n}\n"}}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":209},"contentChanges":[{"range":{"start":{"line":9,"character":19},"end":{"line":9,"character":20}},"rangeLength":1,"text":""}]}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 296

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":19},"end":{"line":9,"character":19}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":210},"contentChanges":[{"range":{"start":{"line":9,"character":18},"end":{"line":9,"character":19}},"rangeLength":1,"text":""}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 195

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":211},"contentChanges":[{"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":18}},"rangeLength":1,"text
>>>
Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 391

{"id":2,"result":[{"title":"Expand macro 'B100'","kind":"refactor","command":{"title":"Expand macro 'B100'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server135438763/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":16,"character":19},"end":{"line":16,"character":19}}}]}}],"jsonrpc":"2.0"}Content-Length: 408

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 408

{"id":4,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
":""}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 195

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"context":{"diagnostics":[]}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":212},"contentChanges":[{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":17}},"rangeLength":1,"text":""}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}Content-Length: 195

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":212}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":213},"contentChanges":[{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"rangeLength":0,"text":"0"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}Content-Length: 195

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 297

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"context":{"diagnostics":[]}}}Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":213}}}
>>>
Content-Length: 408

{"id":5,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 387

{"id":6,"result":[{"title":"Expand macro 'B0'","kind":"refactor","command":{"title":"Expand macro 'B0'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server135438763/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":16,"character":17},"end":{"line":16,"character":17}}}]}}],"jsonrpc":"2.0"}Content-Length: 408

{"id":7,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}Content-Length: 408

{"id":9,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":2}}}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":3}}}
>>>
Content-Length: 39

{"id":12,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":4}}}
>>>
Content-Length: 378

{"id":13,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"kind":1},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"kind":1},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}},"kind":1},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":7}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":214},"contentChanges":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":4}},"rangeLength":0,"text":"/"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 409

{"id":15,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":215},"contentChanges":[{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":5}},"rangeLength":0,"text":"/"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 2758

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":10,"character":38},"end":{"line":10,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":5}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":12,"character":31},"end":{"line":12,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":12,"character":38},"end":{"line":12,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":16,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":10,"character":38},"end":{"line":10,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":12,"character":31},"end":{"line":12,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":12,"character":38},"end":{"line":12,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":215}}}Content-Length: 295

{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 297

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":3}}}
>>>
Content-Length: 39

{"id":19,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":3}}}
>>>
Content-Length: 39

{"id":20,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":10}}}
>>>
Content-Length: 39

{"id":21,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":10}}}
>>>
Content-Length: 39

{"id":22,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":12}}}
>>>
Content-Length: 39

{"id":23,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":24,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":12}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":11}}}
>>>
Content-Length: 39

{"id":25,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":8}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":9}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":9},"end":{"line":9,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":29,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":9}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":30,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":10}}}
>>>
Content-Length: 39

{"id":30,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":31,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":11}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":11},"end":{"line":9,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":32,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":6},"end":{"line":9,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":33,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":34,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":11}}}
>>>
Content-Length: 37

{"id":34,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":35,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":216},"contentChanges":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":6}},"rangeLength":2,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":36,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2589

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":10,"character":38},"end":{"line":10,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":11,"character":18},"end":{"line":11,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":12,"character":31},"end":{"line":12,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":12,"character":38},"end":{"line":12,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 479

{"jsonrpc":"2.0","id":38,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":7}},"message":"Use of undeclared identifier 'MFS'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}Content-Length: 37

{"id":38,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":216}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":217},"contentChanges":[{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":17}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":39,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":39,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2404

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":10,"character":38},"end":{"line":10,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":11,"character":18},"end":{"line":11,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":12,"character":31},"end":{"line":12,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":12,"character":38},"end":{"line":12,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":217}}}Content-Length: 295

{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 297

{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":41,"result":[],"jsonrpc":"2.0"}Content-Length: 37

{"id":42,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":218},"contentChanges":[{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":16}},"rangeLength":0,"text":"0"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":43,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":43,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 2404

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":10,"character":38},"end":{"line":10,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":11,"character":18},"end":{"line":11,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'B1010'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":12,"character":31},"end":{"line":12,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PORTB'"},{"range":{"start":{"line":12,"character":38},"end":{"line":12,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'BIN'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":44,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 297

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":45,"result":[],"jsonrpc":"2.0"}Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":218}}}Content-Length: 59

{"jsonrpc":"2.0","id":47,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":47,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3130

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":3520,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 613

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":1,"text":"#include <MultiFuncShield.h>\n\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n  MFS.writeLeds(0, true);\nSerial.println(\"1:  \" + String(PORTB, BIN));\n    MFS.writeLeds(B1010, true);\nSerial.println(\"2:  \" + String(PORTB, BIN));\n\n}\n\n\nvoid loop() {\n\n}\n"}}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 296

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 408

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/32","percentage":3.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":38}}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":39}}}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":39}}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":12,"character":44},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":35}}}
>>>
Content-Length: 224

{"id":8,"result":{"contents":{"kind":"markdown","value":"### macro `PORTB`  \n\n---\n```cpp\n#define PORTB _SFR_IO8(0x05)\n```"},"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":9,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":9,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":26044,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 613

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":1,"text":"#include <MultiFuncShield.h>\n\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n  MFS.writeLeds(0, true);\nSerial.println(\"1:  \" + String(PORTB, BIN));\n    MFS.writeLeds(B1010, true);\nSerial.println(\"2:  \" + String(PORTB, BIN));\n\n}\n\n\nvoid loop() {\n\n}\n"}}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":12,"character":44},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 408

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/30","percentage":6.666666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/30","percentage":10,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/30","percentage":10,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/30","percentage":13.333333333333334,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/30","percentage":13.333333333333334,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/30","percentage":16.666666666666668,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/30","percentage":16.666666666666668,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/30","percentage":20,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/30","percentage":20,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/30","percentage":23.333333333333332,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/30","percentage":23.333333333333332,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/30","percentage":26.666666666666668,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/30","percentage":26.666666666666668,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/30","percentage":30,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/30","percentage":30,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/30","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/30","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/30","percentage":36.666666666666664,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/30","percentage":36.666666666666664,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/30","percentage":40,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/30","percentage":40,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/30","percentage":43.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/30","percentage":43.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/30","percentage":46.666666666666664,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/30","percentage":46.666666666666664,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/30","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/30","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/30","percentage":53.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/30","percentage":53.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/30","percentage":56.666666666666664,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/30","percentage":56.666666666666664,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/30","percentage":60,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/30","percentage":60,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/30","percentage":63.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/30","percentage":63.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/30","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/30","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/30","percentage":70,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/30","percentage":70,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/30","percentage":73.33333333333333,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/30","percentage":73.33333333333333,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/30","percentage":76.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/30","percentage":80,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/30","percentage":83.33333333333333,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/30","percentage":86.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/30","percentage":90,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/30","percentage":93.33333333333333,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/30","percentage":96.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":5}}}
>>>
Content-Length: 309

{"id":4,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":13}}}
>>>
Content-Length: 311

{"id":5,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":12}}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":12}}}
>>>
Content-Length: 38

{"id":7,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":11}}}
>>>
Content-Length: 310

{"id":8,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":6}}}
>>>
Content-Length: 310

{"id":9,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13263

{"id":10,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1216,"character":1}}}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1217,"character":15}}}
>>>
Content-Length: 252

{"id":12,"result":{"contents":{"kind":"markdown","value":"### param `ledIdx`  \n\n---\nType: `byte`  \n\n---\n```cpp\n// In writeLed\nbyte ledIdx\n```"},"range":{"start":{"line":1217,"character":12},"end":{"line":1217,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":13,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":15}}}
>>>
Content-Length: 368

{"id":14,"result":{"contents":{"kind":"markdown","value":"### instance-method `writeLeds`  \n\n---\n→ `void`  \nParameters:  \n- `byte leds`\n- `byte lit`\n\nTurns LEDs on or off.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void writeLeds(byte leds, byte lit)\n```"},"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":14}}Content-Length: 225

{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":12,"character":18}}}
>>>
Content-Length: 39

{"id":15,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":16,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":22928,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 613

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":1,"text":"#include <MultiFuncShield.h>\n\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(0);\n  \n  Serial.begin(9600);\n  MFS.writeLeds(0, true);\nSerial.println(\"1:  \" + String(PORTB, BIN));\n    MFS.writeLeds(B1010, true);\nSerial.println(\"2:  \" + String(PORTB, BIN));\n\n}\n\n\nvoid loop() {\n\n}\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 408

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 408

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/32","percentage":3.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/32","percentage":34.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":12,"character":37}}}
>>>
Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 280

{"id":4,"result":{"contents":{"kind":"markdown","value":"### constructor `String`  \n\n---\n```cpp\n// In String\npublic: explicit String(unsigned char, unsigned char base = 10)\n```"},"range":{"start":{"line":12,"character":36},"end":{"line":12,"character":37}}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":0},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":0},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":0},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":0},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":0},"end":{"line":12,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":2},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":12,"character":44}},"rangeLength":169,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":10,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":2}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":3},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":8,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":11,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":3}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":4},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":8,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 408

{"id":12,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":4}}}Content-Length: 316

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":5},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":8,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":13,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":5}}}Content-Length: 224

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":30}}}
>>>
Content-Length: 39

{"id":14,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":30}}}
>>>
Content-Length: 39

{"id":15,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":12}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":12}}}
>>>
Content-Length: 39

{"id":17,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":13}}}
>>>
Content-Length: 122

{"id":18,"result":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":19,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":13}}}
>>>
Content-Length: 312

{"id":20,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":6},"contentChanges":[{"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"rangeLength":0,"text":"1"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":7},"contentChanges":[{"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"rangeLength":0,"text":"2"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":23,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":8},"contentChanges":[{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":15}},"rangeLength":0,"text":"3"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":25,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":25,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":8}}}Content-Length: 223

{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":7}}}
>>>
Content-Length: 230

{"id":27,"result":{"contents":{"kind":"markdown","value":"### function `setup`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid setup()\n```"},"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 311

{"id":28,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":11}}}
>>>
Content-Length: 311

{"id":29,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":18},"end":{"line":6,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":31,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}
>>>
Content-Length: 312

{"id":31,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":32,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":16}}}
>>>
Content-Length: 122

{"id":32,"result":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":33}}
>>>
Content-Length: 312

{"id":33,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":34}}
>>>
Content-Length: 312

{"id":34,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":35}}
>>>
Content-Length: 312

{"id":35,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":36,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}
>>>
Content-Length: 312

{"id":36,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}
>>>
Content-Length: 312

{"id":37,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":38,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":38,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}
>>>
Content-Length: 312

{"id":39,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int integer`\n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(int integer)\n```"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":9},"contentChanges":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":12}},"rangeLength":0,"text":"\""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":41,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 222

{"id":41,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":13,"character":0}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}}],"jsonrpc":"2.0"}Content-Length: 737

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":19}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:11:14: note: to match this '{'"},{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":14}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:22:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":14}}}
>>>
Content-Length: 37

{"id":42,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":9}}}Content-Length: 465

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":19}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 465

{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":19}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":44,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":10},"contentChanges":[{"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":17}},"rangeLength":0,"text":"\""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":45,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 408

{"id":45,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":18},"end":{"line":6,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":10}}}Content-Length: 223

{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":0}}}
>>>
Content-Length: 39

{"id":47,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":0}}}
>>>
Content-Length: 39

{"id":48,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":49,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 221

{"id":49,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":50,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 422

{"id":50,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":51,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":9}}}
>>>
Content-Length: 221

{"id":51,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":52,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 422

{"id":52,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":53,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":7}}}
>>>
Content-Length: 221

{"id":53,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":7}}}Content-Length: 228

{"jsonrpc":"2.0","id":55,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":7}}}
>>>
Content-Length: 122

{"id":54,"result":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"kind":1}],"jsonrpc":"2.0"}Content-Length: 221

{"id":55,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":56,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":7}}}
>>>
Content-Length: 221

{"id":56,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 295

{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":57,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":58,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 13263

{"id":58,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":510,"character":6}}}
>>>
Content-Length: 39

{"id":59,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":510,"character":46}}}
>>>
Content-Length: 39

{"id":60,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":61,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":518,"character":47}}}
>>>
Content-Length: 39

{"id":61,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":34}}}
>>>
Content-Length: 304

{"id":62,"result":{"contents":{"kind":"markdown","value":"### function `AsciiToSegmentValue`  \n\n---\n→ `byte`  \nParameters:  \n- `byte ascii`\n\n---\n```cpp\nbyte AsciiToSegmentValue(byte ascii)\n```"},"range":{"start":{"line":522,"character":26},"end":{"line":522,"character":45}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":35}}}
>>>
Content-Length: 304

{"id":63,"result":{"contents":{"kind":"markdown","value":"### function `AsciiToSegmentValue`  \n\n---\n→ `byte`  \nParameters:  \n- `byte ascii`\n\n---\n```cpp\nbyte AsciiToSegmentValue(byte ascii)\n```"},"range":{"start":{"line":522,"character":26},"end":{"line":522,"character":45}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":64,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":36}}}
>>>
Content-Length: 220

{"id":64,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":35}}}
>>>
Content-Length: 304

{"id":65,"result":{"contents":{"kind":"markdown","value":"### function `AsciiToSegmentValue`  \n\n---\n→ `byte`  \nParameters:  \n- `byte ascii`\n\n---\n```cpp\nbyte AsciiToSegmentValue(byte ascii)\n```"},"range":{"start":{"line":522,"character":26},"end":{"line":522,"character":45}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":36}}}
>>>
Content-Length: 396

{"id":66,"result":[{"range":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}},"kind":1},{"range":{"start":{"line":522,"character":26},"end":{"line":522,"character":45}},"kind":1},{"range":{"start":{"line":528,"character":24},"end":{"line":528,"character":43}},"kind":1},{"range":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":67,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":522,"character":36}}}
>>>
Content-Length: 220

{"id":67,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":958,"character":36}}}
>>>
Content-Length: 39

{"id":68,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":69,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":35}}}
>>>
Content-Length: 219

{"id":69,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":34}}}
>>>
Content-Length: 470

{"id":70,"result":{"contents":{"kind":"markdown","value":"### variable `SEGMENT_MAP_DIGIT`  \n\n---\nType: `const byte [10]`  \nValue = `{192, 249, 164, 176, 153, 146, 130, 248, 128, 144}`  \nSegment byte maps for numbers 0 to 9  \n\n---\n```cpp\nconst byte SEGMENT_MAP_DIGIT[] = {192, 249, 164, 176, 153,\n                                  146, 130, 248, 128, 144}\n```"},"range":{"start":{"line":964,"character":19},"end":{"line":964,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":71,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":23}}}
>>>
Content-Length: 219

{"id":71,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":23}}}
>>>
Content-Length: 470

{"id":72,"result":{"contents":{"kind":"markdown","value":"### variable `SEGMENT_MAP_DIGIT`  \n\n---\nType: `const byte [10]`  \nValue = `{192, 249, 164, 176, 153, 146, 130, 248, 128, 144}`  \nSegment byte maps for numbers 0 to 9  \n\n---\n```cpp\nconst byte SEGMENT_MAP_DIGIT[] = {192, 249, 164, 176, 153,\n                                  146, 130, 248, 128, 144}\n```"},"range":{"start":{"line":964,"character":19},"end":{"line":964,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":23}}}
>>>
Content-Length: 216

{"id":73,"result":[{"range":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}},"kind":1},{"range":{"start":{"line":964,"character":19},"end":{"line":964,"character":36}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":74,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":964,"character":23}}}
>>>
Content-Length: 219

{"id":74,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":75,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":20}}}
>>>
Content-Length: 37

{"id":75,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":76,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":10}}}
>>>
Content-Length: 219

{"id":76,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":43,"character":30},"end":{"line":43,"character":37}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":9}}}
>>>
Content-Length: 39

{"id":77,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":27}}}
>>>
Content-Length: 39

{"id":78,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":79,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":13}}}
>>>
Content-Length: 39

{"id":79,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":35}}}
>>>
Content-Length: 39

{"id":80,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":35}}}
>>>
Content-Length: 39

{"id":81,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":28}}}
>>>
Content-Length: 39

{"id":82,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":28}}}
>>>
Content-Length: 39

{"id":83,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":84,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":28}}}
>>>
Content-Length: 39

{"id":84,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":29}}}
>>>
Content-Length: 39

{"id":85,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":41}}}
>>>
Content-Length: 39

{"id":86,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":34}}}
>>>
Content-Length: 39

{"id":87,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":12,"character":28}}}
>>>
Content-Length: 39

{"id":88,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":15,"character":34}}}
>>>
Content-Length: 39

{"id":89,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":90,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":10,"character":21}}}
>>>
Content-Length: 216

{"id":90,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":10,"character":8},"end":{"line":10,"character":17}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 181

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":91,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":91,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":92,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13263

{"id":92,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":93,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":6}}}
>>>
Content-Length: 5239

{"id":93,"result":[{"range":{"start":{"line":10,"character":6},"end":{"line":10,"character":10}},"kind":1},{"range":{"start":{"line":13,"character":6},"end":{"line":13,"character":10}},"kind":1},{"range":{"start":{"line":15,"character":6},"end":{"line":15,"character":10}},"kind":1},{"range":{"start":{"line":18,"character":6},"end":{"line":18,"character":10}},"kind":1},{"range":{"start":{"line":21,"character":6},"end":{"line":21,"character":10}},"kind":1},{"range":{"start":{"line":22,"character":6},"end":{"line":22,"character":10}},"kind":1},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":13}},"kind":1},{"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":13}},"kind":1},{"range":{"start":{"line":29,"character":9},"end":{"line":29,"character":13}},"kind":1},{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":4}},"kind":1},{"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":4}},"kind":1},{"range":{"start":{"line":43,"character":25},"end":{"line":43,"character":29}},"kind":1},{"range":{"start":{"line":43,"character":39},"end":{"line":43,"character":43}},"kind":1},{"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":4}},"kind":1},{"range":{"start":{"line":44,"character":26},"end":{"line":44,"character":30}},"kind":1},{"range":{"start":{"line":45,"character":18},"end":{"line":45,"character":22}},"kind":1},{"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":4}},"kind":1},{"range":{"start":{"line":46,"character":17},"end":{"line":46,"character":21}},"kind":1},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":18}},"kind":1},{"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":31}},"kind":1},{"range":{"start":{"line":115,"character":32},"end":{"line":115,"character":36}},"kind":1},{"range":{"start":{"line":128,"character":45},"end":{"line":128,"character":49}},"kind":1},{"range":{"start":{"line":128,"character":62},"end":{"line":128,"character":66}},"kind":1},{"range":{"start":{"line":184,"character":31},"end":{"line":184,"character":35}},"kind":1},{"range":{"start":{"line":251,"character":41},"end":{"line":251,"character":45}},"kind":1},{"range":{"start":{"line":251,"character":73},"end":{"line":251,"character":77}},"kind":1},{"range":{"start":{"line":323,"character":35},"end":{"line":323,"character":39}},"kind":1},{"range":{"start":{"line":340,"character":0},"end":{"line":340,"character":4}},"kind":1},{"range":{"start":{"line":342,"character":2},"end":{"line":342,"character":6}},"kind":1},{"range":{"start":{"line":361,"character":74},"end":{"line":361,"character":78}},"kind":1},{"range":{"start":{"line":413,"character":32},"end":{"line":413,"character":36}},"kind":1},{"range":{"start":{"line":413,"character":43},"end":{"line":413,"character":47}},"kind":1},{"range":{"start":{"line":429,"character":32},"end":{"line":429,"character":36}},"kind":1},{"range":{"start":{"line":429,"character":43},"end":{"line":429,"character":47}},"kind":1},{"range":{"start":{"line":442,"character":43},"end":{"line":442,"character":47}},"kind":1},{"range":{"start":{"line":465,"character":4},"end":{"line":465,"character":8}},"kind":1},{"range":{"start":{"line":472,"character":4},"end":{"line":472,"character":8}},"kind":1},{"range":{"start":{"line":489,"character":42},"end":{"line":489,"character":46}},"kind":1},{"range":{"start":{"line":504,"character":46},"end":{"line":504,"character":50}},"kind":1},{"range":{"start":{"line":506,"character":2},"end":{"line":506,"character":6}},"kind":1},{"range":{"start":{"line":508,"character":2},"end":{"line":508,"character":6}},"kind":1},{"range":{"start":{"line":512,"character":4},"end":{"line":512,"character":8}},"kind":1},{"range":{"start":{"line":570,"character":35},"end":{"line":570,"character":39}},"kind":1},{"range":{"start":{"line":570,"character":48},"end":{"line":570,"character":52}},"kind":1},{"range":{"start":{"line":619,"character":2},"end":{"line":619,"character":6}},"kind":1},{"range":{"start":{"line":680,"character":4},"end":{"line":680,"character":8}},"kind":1},{"range":{"start":{"line":684,"character":11},"end":{"line":684,"character":15}},"kind":1},{"range":{"start":{"line":799,"character":4},"end":{"line":799,"character":8}},"kind":1},{"range":{"start":{"line":852,"character":4},"end":{"line":852,"character":8}},"kind":1},{"range":{"start":{"line":920,"character":2},"end":{"line":920,"character":6}},"kind":1},{"range":{"start":{"line":958,"character":0},"end":{"line":958,"character":4}},"kind":1},{"range":{"start":{"line":958,"character":26},"end":{"line":958,"character":30}},"kind":1},{"range":{"start":{"line":960,"character":2},"end":{"line":960,"character":6}},"kind":1},{"range":{"start":{"line":1191,"character":27},"end":{"line":1191,"character":31}},"kind":1},{"range":{"start":{"line":1191,"character":41},"end":{"line":1191,"character":45}},"kind":1},{"range":{"start":{"line":1210,"character":20},"end":{"line":1210,"character":24}},"kind":1},{"range":{"start":{"line":1215,"character":16},"end":{"line":1215,"character":20}},"kind":1},{"range":{"start":{"line":1215,"character":29},"end":{"line":1215,"character":33}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":94,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":0}}}
>>>
Content-Length: 216

{"id":94,"result":[{"range":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}},"kind":1},{"range":{"start":{"line":964,"character":19},"end":{"line":964,"character":36}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":95,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":13,"character":10}}}
>>>
Content-Length: 5239

{"id":95,"result":[{"range":{"start":{"line":10,"character":6},"end":{"line":10,"character":10}},"kind":1},{"range":{"start":{"line":13,"character":6},"end":{"line":13,"character":10}},"kind":1},{"range":{"start":{"line":15,"character":6},"end":{"line":15,"character":10}},"kind":1},{"range":{"start":{"line":18,"character":6},"end":{"line":18,"character":10}},"kind":1},{"range":{"start":{"line":21,"character":6},"end":{"line":21,"character":10}},"kind":1},{"range":{"start":{"line":22,"character":6},"end":{"line":22,"character":10}},"kind":1},{"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":13}},"kind":1},{"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":13}},"kind":1},{"range":{"start":{"line":29,"character":9},"end":{"line":29,"character":13}},"kind":1},{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":4}},"kind":1},{"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":4}},"kind":1},{"range":{"start":{"line":43,"character":25},"end":{"line":43,"character":29}},"kind":1},{"range":{"start":{"line":43,"character":39},"end":{"line":43,"character":43}},"kind":1},{"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":4}},"kind":1},{"range":{"start":{"line":44,"character":26},"end":{"line":44,"character":30}},"kind":1},{"range":{"start":{"line":45,"character":18},"end":{"line":45,"character":22}},"kind":1},{"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":4}},"kind":1},{"range":{"start":{"line":46,"character":17},"end":{"line":46,"character":21}},"kind":1},{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":18}},"kind":1},{"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":31}},"kind":1},{"range":{"start":{"line":115,"character":32},"end":{"line":115,"character":36}},"kind":1},{"range":{"start":{"line":128,"character":45},"end":{"line":128,"character":49}},"kind":1},{"range":{"start":{"line":128,"character":62},"end":{"line":128,"character":66}},"kind":1},{"range":{"start":{"line":184,"character":31},"end":{"line":184,"character":35}},"kind":1},{"range":{"start":{"line":251,"character":41},"end":{"line":251,"character":45}},"kind":1},{"range":{"start":{"line":251,"character":73},"end":{"line":251,"character":77}},"kind":1},{"range":{"start":{"line":323,"character":35},"end":{"line":323,"character":39}},"kind":1},{"range":{"start":{"line":340,"character":0},"end":{"line":340,"character":4}},"kind":1},{"range":{"start":{"line":342,"character":2},"end":{"line":342,"character":6}},"kind":1},{"range":{"start":{"line":361,"character":74},"end":{"line":361,"character":78}},"kind":1},{"range":{"start":{"line":413,"character":32},"end":{"line":413,"character":36}},"kind":1},{"range":{"start":{"line":413,"character":43},"end":{"line":413,"character":47}},"kind":1},{"range":{"start":{"line":429,"character":32},"end":{"line":429,"character":36}},"kind":1},{"range":{"start":{"line":429,"character":43},"end":{"line":429,"character":47}},"kind":1},{"range":{"start":{"line":442,"character":43},"end":{"line":442,"character":47}},"kind":1},{"range":{"start":{"line":465,"character":4},"end":{"line":465,"character":8}},"kind":1},{"range":{"start":{"line":472,"character":4},"end":{"line":472,"character":8}},"kind":1},{"range":{"start":{"line":489,"character":42},"end":{"line":489,"character":46}},"kind":1},{"range":{"start":{"line":504,"character":46},"end":{"line":504,"character":50}},"kind":1},{"range":{"start":{"line":506,"character":2},"end":{"line":506,"character":6}},"kind":1},{"range":{"start":{"line":508,"character":2},"end":{"line":508,"character":6}},"kind":1},{"range":{"start":{"line":512,"character":4},"end":{"line":512,"character":8}},"kind":1},{"range":{"start":{"line":570,"character":35},"end":{"line":570,"character":39}},"kind":1},{"range":{"start":{"line":570,"character":48},"end":{"line":570,"character":52}},"kind":1},{"range":{"start":{"line":619,"character":2},"end":{"line":619,"character":6}},"kind":1},{"range":{"start":{"line":680,"character":4},"end":{"line":680,"character":8}},"kind":1},{"range":{"start":{"line":684,"character":11},"end":{"line":684,"character":15}},"kind":1},{"range":{"start":{"line":799,"character":4},"end":{"line":799,"character":8}},"kind":1},{"range":{"start":{"line":852,"character":4},"end":{"line":852,"character":8}},"kind":1},{"range":{"start":{"line":920,"character":2},"end":{"line":920,"character":6}},"kind":1},{"range":{"start":{"line":958,"character":0},"end":{"line":958,"character":4}},"kind":1},{"range":{"start":{"line":958,"character":26},"end":{"line":958,"character":30}},"kind":1},{"range":{"start":{"line":960,"character":2},"end":{"line":960,"character":6}},"kind":1},{"range":{"start":{"line":1191,"character":27},"end":{"line":1191,"character":31}},"kind":1},{"range":{"start":{"line":1191,"character":41},"end":{"line":1191,"character":45}},"kind":1},{"range":{"start":{"line":1210,"character":20},"end":{"line":1210,"character":24}},"kind":1},{"range":{"start":{"line":1215,"character":16},"end":{"line":1215,"character":20}},"kind":1},{"range":{"start":{"line":1215,"character":29},"end":{"line":1215,"character":33}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 76

{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}Content-Length: 76

{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}Content-Length: 76

{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}Content-Length: 76

{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}Content-Length: 226

{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":33,"character":15}}}
>>>
Content-Length: 39

{"id":96,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":97,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":97,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":98,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 221

{"id":98,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":99,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 221

{"id":99,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":100,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 222

{"id":100,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 423

{"id":101,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":102,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 222

{"id":102,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":103,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":103,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":104,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":528,"character":27}}}
>>>
Content-Length: 305

{"id":105,"result":{"contents":{"kind":"markdown","value":"### function `AsciiToSegmentValue`  \n\n---\n→ `byte`  \nParameters:  \n- `byte ascii`\n\n---\n```cpp\nbyte AsciiToSegmentValue(byte ascii)\n```"},"range":{"start":{"line":528,"character":24},"end":{"line":528,"character":43}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":106,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":17}}}
>>>
Content-Length: 220

{"id":106,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":107,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":17}}}
>>>
Content-Length: 220

{"id":107,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":108,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":17}}}
>>>
Content-Length: 942

{"id":108,"result":[{"range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}},"kind":1},{"range":{"start":{"line":544,"character":23},"end":{"line":544,"character":36}},"kind":1},{"range":{"start":{"line":550,"character":6},"end":{"line":550,"character":19}},"kind":1},{"range":{"start":{"line":555,"character":6},"end":{"line":555,"character":19}},"kind":1},{"range":{"start":{"line":563,"character":6},"end":{"line":563,"character":19}},"kind":1},{"range":{"start":{"line":659,"character":40},"end":{"line":659,"character":53}},"kind":1},{"range":{"start":{"line":668,"character":38},"end":{"line":668,"character":51}},"kind":1},{"range":{"start":{"line":672,"character":28},"end":{"line":672,"character":41}},"kind":1},{"range":{"start":{"line":907,"character":34},"end":{"line":907,"character":47}},"kind":1},{"range":{"start":{"line":910,"character":26},"end":{"line":910,"character":39}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":109,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":563,"character":17}}}
>>>
Content-Length: 220

{"id":109,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":110,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":18}}}
>>>
Content-Length: 332

{"id":110,"result":{"contents":{"kind":"markdown","value":"### variable `displayMemory`  \n\n---\nType: `volatile byte [4]`  \nValue = `{255, 255, 255, 255}`  \n\n---\n```cpp\nvolatile byte displayMemory[4] = {255, 255, 255, 255}\n```"},"range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":111,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":19}}}
>>>
Content-Length: 942

{"id":111,"result":[{"range":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}},"kind":1},{"range":{"start":{"line":544,"character":23},"end":{"line":544,"character":36}},"kind":1},{"range":{"start":{"line":550,"character":6},"end":{"line":550,"character":19}},"kind":1},{"range":{"start":{"line":555,"character":6},"end":{"line":555,"character":19}},"kind":1},{"range":{"start":{"line":563,"character":6},"end":{"line":563,"character":19}},"kind":1},{"range":{"start":{"line":659,"character":40},"end":{"line":659,"character":53}},"kind":1},{"range":{"start":{"line":668,"character":38},"end":{"line":668,"character":51}},"kind":1},{"range":{"start":{"line":672,"character":28},"end":{"line":672,"character":41}},"kind":1},{"range":{"start":{"line":907,"character":34},"end":{"line":907,"character":47}},"kind":1},{"range":{"start":{"line":910,"character":26},"end":{"line":910,"character":39}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":112,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":112,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":25}}}
>>>
Content-Length: 393

{"id":113,"result":{"contents":{"kind":"markdown","value":"### function `WriteValueToSegment`  \n\n---\n→ `void`  \nParameters:  \n- `byte Segment`\n- `byte Value`\n\nWrite a value to one of the 4 digits of the display  \n\n---\n```cpp\nvoid WriteValueToSegment(byte Segment, byte Value)\n```"},"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":114,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":25}}}
>>>
Content-Length: 755

{"id":114,"result":[{"range":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}},"kind":1},{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":21}},"kind":1},{"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}},"kind":1},{"range":{"start":{"line":663,"character":8},"end":{"line":663,"character":27}},"kind":1},{"range":{"start":{"line":668,"character":6},"end":{"line":668,"character":25}},"kind":1},{"range":{"start":{"line":708,"character":6},"end":{"line":708,"character":25}},"kind":1},{"range":{"start":{"line":907,"character":2},"end":{"line":907,"character":21}},"kind":1},{"range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":115,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":27}}}
>>>
Content-Length: 223

{"id":115,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":116,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":26}}}
>>>
Content-Length: 393

{"id":116,"result":{"contents":{"kind":"markdown","value":"### function `WriteValueToSegment`  \n\n---\n→ `void`  \nParameters:  \n- `byte Segment`\n- `byte Value`\n\nWrite a value to one of the 4 digits of the display  \n\n---\n```cpp\nvoid WriteValueToSegment(byte Segment, byte Value)\n```"},"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":117,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":26}}}Content-Length: 233

{"jsonrpc":"2.0","id":118,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":659,"character":26}}}
>>>
Content-Length: 755

{"id":117,"result":[{"range":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}},"kind":1},{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":21}},"kind":1},{"range":{"start":{"line":659,"character":8},"end":{"line":659,"character":27}},"kind":1},{"range":{"start":{"line":663,"character":8},"end":{"line":663,"character":27}},"kind":1},{"range":{"start":{"line":668,"character":6},"end":{"line":668,"character":25}},"kind":1},{"range":{"start":{"line":708,"character":6},"end":{"line":708,"character":25}},"kind":1},{"range":{"start":{"line":907,"character":2},"end":{"line":907,"character":21}},"kind":1},{"range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}},"kind":1}],"jsonrpc":"2.0"}Content-Length: 223

{"id":118,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","id":119,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1191,"character":29}}}
>>>
Content-Length: 234

{"id":119,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":126,"character":16},"end":{"line":126,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","id":120,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":1191,"character":43}}}
>>>
Content-Length: 234

{"id":120,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":126,"character":16},"end":{"line":126,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":121,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":121,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":122,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":16}}}
>>>
Content-Length: 40

{"id":122,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":17}}}
>>>
Content-Length: 40

{"id":123,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":124,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":6,"character":12},"end":{"line":6,"character":18}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":20},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":125,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":126,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":11},"contentChanges":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":20}},"rangeLength":20,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":127,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":128,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":1}}}
>>>
Content-Length: 38

{"id":128,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":11}}}Content-Length: 298

{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":12,"character":1},"end":{"line":12,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":129,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":12},"contentChanges":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"rangeLength":0,"text":"  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":130,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":130,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":13},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":2}},"rangeLength":0,"text":"s"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":131,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 's'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":131,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":14},"contentChanges":[{"range":{"start":{"line":11,"character":3},"end":{"line":11,"character":3}},"rangeLength":0,"text":"t"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":131}}Content-Length: 197

{"jsonrpc":"2.0","id":132,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 373

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'st'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":132,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":15},"contentChanges":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":4}},"rangeLength":0,"text":"a"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":132}}Content-Length: 197

{"jsonrpc":"2.0","id":133,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'sta'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":133,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":16},"contentChanges":[{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":5}},"rangeLength":0,"text":"t"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":133}}Content-Length: 197

{"jsonrpc":"2.0","id":134,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'stat'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":134,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":17},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"rangeLength":0,"text":"u"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":135,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statu'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":135,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":18},"contentChanges":[{"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"rangeLength":0,"text":"c"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":135}}Content-Length: 197

{"jsonrpc":"2.0","id":136,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statuc'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":136,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":19},"contentChanges":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":137,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statuc'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":137,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":20},"contentChanges":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":138,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statuc'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":21},"contentChanges":[{"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":139,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":139,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statu'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":22},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":7}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":140,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":140,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'stat'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 481

{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":6}},"message":"Use of undeclared identifier 'stat'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":141,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":22}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":23},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":142,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":142,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'stati'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":24},"contentChanges":[{"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"rangeLength":0,"text":"c"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":143,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":143,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":25},"contentChanges":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":144,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":144,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":25}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":26},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":9}},"rangeLength":0,"text":"b"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":145,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":145,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":27},"contentChanges":[{"range":{"start":{"line":11,"character":10},"end":{"line":11,"character":10}},"rangeLength":0,"text":"y"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":145}}Content-Length: 197

{"jsonrpc":"2.0","id":146,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 537

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'b'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":146,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 538

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'by'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":28},"contentChanges":[{"range":{"start":{"line":11,"character":11},"end":{"line":11,"character":11}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":147,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":147,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":29},"contentChanges":[{"range":{"start":{"line":11,"character":12},"end":{"line":11,"character":12}},"rangeLength":0,"text":"e"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":147}}Content-Length: 197

{"jsonrpc":"2.0","id":148,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 736

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":12}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'byt'; did you mean 'byte'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\Arduino.h:127:17:\nnote: 'byte' declared here"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":148,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":149,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":13},"end":{"line":11,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":149,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":29}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":30},"contentChanges":[{"range":{"start":{"line":11,"character":13},"end":{"line":11,"character":13}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":150,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":150,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":30}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":31},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":14}},"rangeLength":0,"text":"c"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":151,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":151,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":32},"contentChanges":[{"range":{"start":{"line":11,"character":15},"end":{"line":11,"character":15}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":152,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":152,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":33},"contentChanges":[{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":16}},"rangeLength":0,"text":"u"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":152}}Content-Length: 197

{"jsonrpc":"2.0","id":153,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":153,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":34},"contentChanges":[{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":17}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":154,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":154,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":35},"contentChanges":[{"range":{"start":{"line":11,"character":15},"end":{"line":11,"character":16}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":155,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":155,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":36},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":156,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":156,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":36}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":37},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":14}},"rangeLength":0,"text":"m"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":157,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":157,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":38},"contentChanges":[{"range":{"start":{"line":11,"character":15},"end":{"line":11,"character":15}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":158,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":158,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":39},"contentChanges":[{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":16}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":159,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":159,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":40},"contentChanges":[{"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":160,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":160,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":41},"contentChanges":[{"range":{"start":{"line":11,"character":18},"end":{"line":11,"character":18}},"rangeLength":0,"text":"s"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":161,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":161,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":162,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":162,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":41}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":42},"contentChanges":[{"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":19}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":163,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":163,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":42}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":43},"contentChanges":[{"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":20}},"rangeLength":0,"text":"="}]}}Content-Length: 197

{"jsonrpc":"2.0","id":164,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":164,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":13,"character":0}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 945

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:18:13: note: to match this '{'"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":13}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:22:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":44},"contentChanges":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":21}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":165,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":165,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":13,"character":0}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 945

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:18:13: note: to match this '{'"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":13}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:22:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":44}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":45},"contentChanges":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":22}},"rangeLength":0,"text":"m"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":166,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":166,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 580

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'm'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":46},"contentChanges":[{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":167,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":167,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 581

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mi'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":47},"contentChanges":[{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":24}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":168,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":168,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 582

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mil'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":48},"contentChanges":[{"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":169,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":169,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 583

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":26}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mill'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 485

{"jsonrpc":"2.0","id":170,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":26}},"message":"Use of undeclared identifier 'mill'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":170,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":49},"contentChanges":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":171,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":171,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":50},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"rangeLength":0,"text":"s"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":171}}Content-Length: 197

{"jsonrpc":"2.0","id":172,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 584

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'milli'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 659

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":19}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'byte' (aka 'unsigned char') with an lvalue of type 'unsigned long ()'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":172,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":173,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":173,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":50}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":51},"contentChanges":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":28}},"rangeLength":6,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":174,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":174,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":13,"character":0}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 945

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:18:13: note: to match this '{'"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":13}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:22:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":52},"contentChanges":[{"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":22}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":175,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":175,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":53},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"rangeLength":6,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":176,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":176,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":54},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":14}},"rangeLength":5,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":177,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":177,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":55},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":9}},"rangeLength":7,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":178,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 409

{"id":178,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":55}}}Content-Length: 341

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":56},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":2}},"rangeLength":0,"text":"  MFS.write(\"0123\");"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":179,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":179,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":180,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":180,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":56}}}Content-Length: 237

{"jsonrpc":"2.0","id":181,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":4}}}
>>>
Content-Length: 209

{"id":181,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"kind":1},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":7}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":182,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":4}}}
>>>
Content-Length: 38

{"id":182,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":183,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":184,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":15}}}
>>>
Content-Length: 40

{"id":184,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":185,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":13}}}
>>>
Content-Length: 425

{"id":185,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 416

{"id":186,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":187,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":19}}}
>>>
Content-Length: 40

{"id":187,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":57},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"rangeLength":6,"text":"S"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":188,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":188,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'S'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":58},"contentChanges":[{"range":{"start":{"line":11,"character":15},"end":{"line":11,"character":15}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":189,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'St'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":189,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":59},"contentChanges":[{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":16}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":189}}Content-Length: 197

{"jsonrpc":"2.0","id":190,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Str'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":190,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":60},"contentChanges":[{"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":191,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Stri'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":191,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":61},"contentChanges":[{"range":{"start":{"line":11,"character":18},"end":{"line":11,"character":18}},"rangeLength":0,"text":"n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":192,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 378

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Strin'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":192,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":62},"contentChanges":[{"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":19}},"rangeLength":0,"text":"g"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":193,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 513

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"severity":1,"code":"ref_non_value","source":"clang","message":"'String' does not refer to a value\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: declared here"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":193,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 621

{"jsonrpc":"2.0","id":194,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":20}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"message":"'String' does not refer to a value\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: declared here","severity":1,"code":"ref_non_value","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":194,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":62}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":63},"contentChanges":[{"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":20}},"rangeLength":0,"text":"()"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":195,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":195,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","id":196,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":21},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 183

{"id":196,"error":{"code":0,"message":"json: cannot unmarshal array into Go struct field ParameterInformation.signatures.parameters.label of type string","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":197,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":197,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":64},"contentChanges":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":21}},"rangeLength":0,"text":"m"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":198,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":198,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":22}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'm'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":65},"contentChanges":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":22}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":199,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":199,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mi'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":66},"contentChanges":[{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":200,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":200,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mil'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":67},"contentChanges":[{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":24}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":201,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mill'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":201,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 485

{"jsonrpc":"2.0","id":202,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":25}},"message":"Use of undeclared identifier 'mill'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":202,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":67}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":68},"contentChanges":[{"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":203,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":203,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 378

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":26}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'milli'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 486

{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":26}},"message":"Use of undeclared identifier 'milli'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":204,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":68}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":69},"contentChanges":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"rangeLength":0,"text":"s"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":205,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 4384

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":27}},"severity":1,"code":"ovl_no_viable_conversion_in_cast","source":"clang","message":"No matching conversion for functional-style cast from 'unsigned long ()' to 'String'\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:59:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:60:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:61:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const __FlashStringHelper *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:63:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:64:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'StringSumHelper' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:66:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:67:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:68:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:69:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:70:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:71:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:72:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'float' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:73:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'double' for 1st argument"},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3665

{"jsonrpc":"2.0","id":206,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":27}},"message":"No matching conversion for functional-style cast from 'unsigned long ()' to 'String'\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:59:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:60:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:61:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const __FlashStringHelper *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:63:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:64:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'StringSumHelper' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:66:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:67:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:68:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:69:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:70:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:71:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:72:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'float' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:73:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'double' for 1st argument","severity":1,"code":"ovl_no_viable_conversion_in_cast","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":206,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":69}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":70},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"rangeLength":0,"text":"()"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":207,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":207,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","id":208,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":28},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 135

{"id":208,"result":{"signatures":[{"label":"millis() -\u003e unsigned long"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":209,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":209,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":70}}}Content-Length: 300

{"jsonrpc":"2.0","id":210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":32},"end":{"line":11,"character":32}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":210,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":211,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":8}}}
>>>
Content-Length: 425

{"id":211,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 1145

{"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 415

{"id":212,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 1125

{"jsonrpc":"2.0","id":213,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":32}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":213,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 1125

{"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":32}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":214,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":215,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":3}}}
>>>
Content-Length: 40

{"id":215,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":216,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":4}}}
>>>
Content-Length: 218

{"id":216,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":71},"contentChanges":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":32}},"rangeLength":28,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":217,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 409

{"id":217,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":218,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":6}}}
>>>
Content-Length: 232

{"id":218,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":71}}}Content-Length: 345

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":72},"contentChanges":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":0}},"rangeLength":0,"text":"MFS.write(String(millis()));"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":219,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":219,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":220,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":6}}}
>>>
Content-Length: 1015

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":9}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":220,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":221,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":28},"end":{"line":6,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":221,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":72}}}Content-Length: 230

{"jsonrpc":"2.0","id":222,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":8}}}
>>>
Content-Length: 232

{"id":222,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":73},"contentChanges":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":28}},"rangeLength":28,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":223,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}Content-Length: 230

{"jsonrpc":"2.0","id":224,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":8}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 409

{"id":223,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 232

{"id":224,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":225,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":7}}}
>>>
Content-Length: 230

{"id":225,"result":{"contents":{"kind":"markdown","value":"### function `loop`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid loop()\n```"},"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 347

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":74},"contentChanges":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":4}},"rangeLength":0,"text":"MFS.write(String(millis()));"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":226,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":226,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":227,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":7}}}
>>>
Content-Length: 230

{"id":227,"result":{"contents":{"kind":"markdown","value":"### function `loop`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid loop()\n```"},"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 1125

{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":32}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":228,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":75},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":29}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":229,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":229,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":230,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":9}}}
>>>
Content-Length: 4384

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":27}},"severity":1,"code":"ovl_no_viable_conversion_in_cast","source":"clang","message":"No matching conversion for functional-style cast from 'unsigned long ()' to 'String'\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:59:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:60:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:61:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const __FlashStringHelper *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:63:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:64:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'StringSumHelper' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:66:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:67:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:68:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:69:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:70:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:71:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:72:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'float' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:73:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'double' for 1st argument"},{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":230,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 3665

{"jsonrpc":"2.0","id":231,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":27}},"message":"No matching conversion for functional-style cast from 'unsigned long ()' to 'String'\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:59:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:60:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:61:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'const __FlashStringHelper *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:63:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'String' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:64:2:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'StringSumHelper' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:66:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:67:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned char' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:68:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:69:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned int' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:70:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:71:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'unsigned long' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:72:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'float' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:73:11:\nnote: candidate constructor not viable: no known conversion from 'unsigned long ()' to 'double' for 1st argument","severity":1,"code":"ovl_no_viable_conversion_in_cast","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":231,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":76},"contentChanges":[{"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":28}},"rangeLength":8,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":232,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 513

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"severity":1,"code":"ref_non_value","source":"clang","message":"'String' does not refer to a value\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: declared here"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":232,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 329

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":77},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"rangeLength":6,"text":"\"0123\""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":233,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 409

{"id":233,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":78},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":22}},"rangeLength":20,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":234,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":234,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 326

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":79},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":2}},"rangeLength":0,"text":"static "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":235,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":235,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":80},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":9}},"rangeLength":0,"text":"byte "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":236,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":236,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 327

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":81},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":14}},"rangeLength":0,"text":"mills "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":237,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":237,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":82},"contentChanges":[{"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":20}},"rangeLength":0,"text":"= "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":238,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":238,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":13,"character":0}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 945

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:18:13: note: to match this '{'"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":13}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:22:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 327

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":83},"contentChanges":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":22}},"rangeLength":0,"text":"millis"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":239,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":239,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 659

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":19}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'byte' (aka 'unsigned char') with an lvalue of type 'unsigned long ()'"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":84},"contentChanges":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":28}},"rangeLength":7,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":240,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":240,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":13,"character":0}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 945

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:18:13: note: to match this '{'"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":13}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:22:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":85},"contentChanges":[{"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":21}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":241,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":241,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":86},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":19}},"rangeLength":5,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":242,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":242,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":87},"contentChanges":[{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":14}},"rangeLength":0,"text":"cou"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":243,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":243,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":88},"contentChanges":[{"range":{"start":{"line":11,"character":13},"end":{"line":11,"character":17}},"rangeLength":4,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":244,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":244,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":89},"contentChanges":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":13}},"rangeLength":5,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":245,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":245,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":90},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":8}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":246,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":246,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'stat'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":91},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"rangeLength":0,"text":"uc "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":247,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":247,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statuc'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":92},"contentChanges":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":248,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 377

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'statuc'"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":248,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":93},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"rangeLength":6,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":249,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 409

{"id":249,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":94},"contentChanges":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":250,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":250,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 339

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":95},"contentChanges":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":0}},"rangeLength":0,"text":"  MFS.write(\"0123\");"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":251,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":251,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":252,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":252,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":95}}}Content-Length: 347

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":96},"contentChanges":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"rangeLength":0,"text":"MFS.write(String(millis()));"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":253,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":253,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1017

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":254,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":254,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":96}}}Content-Length: 226

{"jsonrpc":"2.0","id":255,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":15}}}
>>>
Content-Length: 241

{"id":255,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":11,"character":10},"end":{"line":11,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":256,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":14}}}
>>>
Content-Length: 241

{"id":256,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":11,"character":10},"end":{"line":11,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":257,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":4}}}
>>>
Content-Length: 261

{"id":257,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":258,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 40

{"id":258,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":259,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":4}}}
>>>
Content-Length: 261

{"id":259,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":260,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":2}}}
>>>
Content-Length: 263

{"id":260,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":3}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":261,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":1}}}
>>>
Content-Length: 263

{"id":261,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":3}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":262,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 263

{"id":262,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":3}}},"jsonrpc":"2.0"}
<<<
Content-Length: 1143

{"jsonrpc":"2.0","id":263,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 414

{"id":263,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":264,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 294

{"id":264,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"kind":1},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"kind":1},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":3}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 1123

{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":265,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":97},"contentChanges":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"rangeLength":0,"text":"  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":266,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":266,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1124

{"jsonrpc":"2.0","id":267,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":267,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":97}}}Content-Length: 225

{"jsonrpc":"2.0","id":268,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":16}}}
>>>
Content-Length: 357

{"id":268,"result":{"contents":{"kind":"markdown","value":"### instance-method `initialize`  \n\n---\n→ `void`  \nInitializes this instance, but interrupt based features are not available.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void initialize()\n```"},"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":269,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":17}}}
>>>
Content-Length: 358

{"id":269,"result":{"contents":{"kind":"markdown","value":"### instance-method `initialize`  \n\n---\n→ `void`  \nInitializes this instance, but interrupt based features are not available.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void initialize()\n```"},"range":{"start":{"line":5,"character":17},"end":{"line":5,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":270,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":20}}}
>>>
Content-Length: 254

{"id":270,"result":{"contents":{"kind":"markdown","value":"### function `millis`  \n\n---\n→ `unsigned long`  \n\n---\n```cpp\nunsigned long millis()\n```"},"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":25}}},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":271,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":29},"end":{"line":11,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":271,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":98},"contentChanges":[{"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":29}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":272,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":272,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 573

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":29}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nLibraryTests.ino.cpp:19:12: note: to match this '('"},{"range":{"start":{"line":11,"character":11},"end":{"line":11,"character":12}},"severity":3,"message":"To match this '('\n\nLibraryTests.ino.cpp:19:29: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 507

{"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":29}},"message":"Expected ')'\n\nLibraryTests.ino.cpp:19:12: note: to match this '('","severity":1,"code":"expected","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":273,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":98}}}Content-Length: 507

{"jsonrpc":"2.0","id":274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":29},"end":{"line":11,"character":29}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":29}},"message":"Expected ')'\n\nLibraryTests.ino.cpp:19:12: note: to match this '('","severity":1,"code":"expected","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":274,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":99},"contentChanges":[{"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":29}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":275,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":275,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 570

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nLibraryTests.ino.cpp:19:12: note: to match this '('"},{"range":{"start":{"line":11,"character":11},"end":{"line":11,"character":12}},"severity":3,"message":"To match this '('\n\nLibraryTests.ino.cpp:20:1: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":100},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":276,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":276,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 570

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nLibraryTests.ino.cpp:19:19: note: to match this '('"},{"range":{"start":{"line":11,"character":18},"end":{"line":11,"character":19}},"severity":3,"message":"To match this '('\n\nLibraryTests.ino.cpp:20:1: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":277,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":277,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":100}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":101},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"rangeLength":0,"text":")"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":278,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":278,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 570

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nLibraryTests.ino.cpp:19:12: note: to match this '('"},{"range":{"start":{"line":11,"character":11},"end":{"line":11,"character":12}},"severity":3,"message":"To match this '('\n\nLibraryTests.ino.cpp:20:1: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":279,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":279,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":101}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":102},"contentChanges":[{"range":{"start":{"line":11,"character":28},"end":{"line":11,"character":28}},"rangeLength":0,"text":")"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":280,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":280,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1218

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":281,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":29},"end":{"line":11,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":281,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":102}}}Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":103},"contentChanges":[{"range":{"start":{"line":11,"character":29},"end":{"line":11,"character":29}},"rangeLength":0,"text":";"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":282,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":282,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":283,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":30},"end":{"line":11,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":283,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":103}}}Content-Length: 1125

{"jsonrpc":"2.0","id":284,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":30}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":284,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":285,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":6}}}
>>>
Content-Length: 232

{"id":285,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8128

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":286,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":20},"end":{"line":6,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":286,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":104},"contentChanges":[{"range":{"start":{"line":6,"character":20},"end":{"line":6,"character":20}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":287,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":287,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 348

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":105},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":2}},"rangeLength":0,"text":"  MFS.write(String(millis()));"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":288,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":288,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":289,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":32},"end":{"line":7,"character":32}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":289,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":105}}}Content-Length: 225

{"jsonrpc":"2.0","id":290,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":18}}}
>>>
Content-Length: 239

{"id":290,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":291,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":17}}}
>>>
Content-Length: 239

{"id":291,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":292,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":13}}}
>>>
Content-Length: 40

{"id":292,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":293,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":10}}}
>>>
Content-Length: 423

{"id":293,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 1141

{"jsonrpc":"2.0","id":294,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 413

{"id":294,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":7,"character":4},"end":{"line":7,"character":13}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":295,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 423

{"id":295,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":296,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":32}}}
>>>
Content-Length: 40

{"id":296,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":297,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":13}}}
>>>
Content-Length: 40

{"id":297,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":298,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":13}}}
>>>
Content-Length: 40

{"id":298,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":299,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":14}}}
>>>
Content-Length: 213

{"id":299,"result":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":20}},"kind":1},{"range":{"start":{"line":12,"character":12},"end":{"line":12,"character":18}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":300,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":300,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":7,"character":14},"end":{"line":7,"character":30}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":301,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":30}}}
>>>
Content-Length: 40

{"id":301,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":302,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":30}}}
>>>
Content-Length: 40

{"id":302,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":106},"contentChanges":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":30}},"rangeLength":16,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":303,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":303,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1859

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: requires single argument 'integer', but no arguments were provided\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: requires at least argument 'textstring', but no arguments were provided\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: requires at least argument 'number', but no arguments were provided"},{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":304,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":304,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":106}}}Content-Length: 298

{"jsonrpc":"2.0","id":305,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":20},"end":{"line":6,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":305,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":306,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":306,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":307,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":307,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":107},"contentChanges":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"rangeLength":0,"text":"\"\""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":308,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":308,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":309,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":15},"end":{"line":7,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":309,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":107}}}Content-Length: 237

{"jsonrpc":"2.0","id":310,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":15}}}
>>>
Content-Length: 38

{"id":310,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":311,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":20},"end":{"line":6,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":311,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":108},"contentChanges":[{"range":{"start":{"line":6,"character":20},"end":{"line":6,"character":20}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":312,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":312,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":109},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":2}},"rangeLength":0,"text":"S"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":313,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":313,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1388

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'S'"},{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":110},"contentChanges":[{"range":{"start":{"line":7,"character":3},"end":{"line":7,"character":3}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":314,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":314,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":111},"contentChanges":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":4}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":314}}Content-Length: 197

{"jsonrpc":"2.0","id":315,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1389

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":4}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'St'"},{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":315,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1390

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":5}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Str'"},{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":112},"contentChanges":[{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":316,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":316,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1391

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":6}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Stri'"},{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":113},"contentChanges":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":6}},"rangeLength":0,"text":"n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":317,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":317,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1591

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":7}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'Strin'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here"},{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":114},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"rangeLength":0,"text":"g"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":318,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":318,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":115},"contentChanges":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":319,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":319,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":115}}}Content-Length: 334

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":116},"contentChanges":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":9}},"rangeLength":0,"text":"String(millis())"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":320,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":320,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":25},"end":{"line":7,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":321,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":116}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":117},"contentChanges":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":25}},"rangeLength":16,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":322,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":322,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":117}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":118},"contentChanges":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":9}},"rangeLength":0,"text":"m"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":323,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":323,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":119},"contentChanges":[{"range":{"start":{"line":7,"character":10},"end":{"line":7,"character":10}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":324,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":324,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":120},"contentChanges":[{"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":11}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":325,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":325,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":121},"contentChanges":[{"range":{"start":{"line":7,"character":12},"end":{"line":7,"character":12}},"rangeLength":0,"text":"s"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":325}}Content-Length: 197

{"jsonrpc":"2.0","id":326,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":326,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":122},"contentChanges":[{"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":327,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":327,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":123},"contentChanges":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"rangeLength":0,"text":"="}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":327}}Content-Length: 197

{"jsonrpc":"2.0","id":328,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":328,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":124},"contentChanges":[{"range":{"start":{"line":7,"character":15},"end":{"line":7,"character":15}},"rangeLength":0,"text":" "}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":328}}Content-Length: 197

{"jsonrpc":"2.0","id":329,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 3853

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"severity":1,"code":"typecheck_nonviable_condition","source":"clang","message":"No viable conversion from 'void' to 'String'\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:59:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:60:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'const String \u0026' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:61:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'const __FlashStringHelper *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:63:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'String \u0026\u0026' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:64:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'StringSumHelper \u0026\u0026' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:66:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:67:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:68:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:69:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:70:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:71:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:72:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:73:11:\nnote: explicit constructor is not a candidate"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":329,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 3853

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"severity":1,"code":"typecheck_nonviable_condition","source":"clang","message":"No viable conversion from 'void' to 'String'\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:59:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:60:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'const String \u0026' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:61:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'const __FlashStringHelper *' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:63:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'String \u0026\u0026' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:64:2:\nnote: candidate constructor not viable: cannot convert argument of incomplete type 'void' to 'StringSumHelper \u0026\u0026' for 1st argument\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:66:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:67:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:68:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:69:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:70:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:71:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:72:11:\nnote: explicit constructor is not a candidate\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:73:11:\nnote: explicit constructor is not a candidate"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 336

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":125},"contentChanges":[{"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":16}},"rangeLength":0,"text":"String(millis())"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":330,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":330,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1222

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":331,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":32},"end":{"line":7,"character":32}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":331,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":125}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":126},"contentChanges":[{"range":{"start":{"line":7,"character":32},"end":{"line":7,"character":32}},"rangeLength":0,"text":";"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":332,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":332,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":333,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":33},"end":{"line":7,"character":33}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":333,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":126}}}Content-Length: 298

{"jsonrpc":"2.0","id":334,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":18},"end":{"line":8,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":334,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":335,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":17},"end":{"line":8,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":335,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":336,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":16},"end":{"line":8,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":336,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":127},"contentChanges":[{"range":{"start":{"line":8,"character":15},"end":{"line":8,"character":16}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":337,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 531

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":17}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":14}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:24:1: error: expected '}'"}]},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":22928,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 524

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":127,"text":"#include <MultiFuncShield.h>\n\n\nvoid setup() {\n  // put your setup code here, to run once:\n  MFS.initialize();    // initialize multifunction shield library\n  MFS.write(\"0123\");\n  String mils = String(millis());\n    MFS.write(\");\n  }\n\n\nvoid loop() {\n  MFS.write(String(millis()));\n}\n"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 464

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":15},"end":{"line":8,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":17}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":128},"contentChanges":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 464

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":17}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":128}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","v
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 1018

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 407

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 221

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":15,"character":0}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}}],"jsonrpc":"2.0"}Content-Length: 737

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":17}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nLibraryTests.ino.cpp:11:14: note: to match this '{'"},{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":14}},"severity":3,"message":"To match this '{'\n\nLibraryTests.ino.cpp:24:1: error: expected '}'"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}
<<<
ersion":129},"contentChanges":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"rangeLength":0,"text":"m"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 195

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":130},"contentChanges":[{"range":{"start":{"line":8,"character":15},"end":{"line":8,"character":15}},"rangeLength":0,"text":"i"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}Content-Length: 195

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":131},"contentChanges":[{"range":{"start":{"line":8,"character":16},"end":{"line":8,"character":16}},"rangeLength":0,"text":"l"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}Content-Length: 195

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":132},"contentChanges":[{"range":{"start":{"line":8,"character":17},"end":{"line":8,"character":17}},"rangeLength":0,"text":"s"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}Content-Length: 195

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}Content-Length: 296

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":18},"end":{"line":8,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 407

{"id":5,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1199

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'm'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 1200

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mi'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 407

{"id":6,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'mil'; did you mean 'mils'? (fix available)\n\nLibraryTests.ino.cpp:15:10: note: 'mils' declared here"},{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"severity":3,"message":"'mils' declared here\n\nLibraryTests.ino.cpp:16:15: error: use of undeclared identifier 'mil'; did you mean 'mils'?"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 407

{"id":7,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 407

{"id":8,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/32","percentage":3.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 1396

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":18},"end":{"line":8,"character":21}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nLibraryTests.ino.cpp:16:14: note: to match this '('"},{"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":14}},"severity":3,"message":"To match this '('\n\nLibraryTests.ino.cpp:16:19: error: expected ')'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":132}}}Content-Length: 502

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":18},"end":{"line":8,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":18},"end":{"line":8,"character":21}},"message":"Expected ')'\n\nLibraryTests.ino.cpp:16:14: note: to match this '('","severity":1,"code":"expected","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/32","percentage":6.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/32","percentage":9.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 145

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/32","percentage":12.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/32","percentage":15.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/32","percentage":18.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/32","percentage":21.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/32","percentage":25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/32","percentage":28.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/32","percentage":31.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/32","percentage":37.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/32","percentage":40.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/32","percentage":43.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/32","percentage":46.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/32","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/32","percentage":53.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/32","percentage":56.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/32","percentage":59.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/32","percentage":62.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/32","percentage":65.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/32","percentage":68.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/32","percentage":71.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/32","percentage":75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/32","percentage":78.125,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/32","percentage":81.25,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/32","percentage":84.375,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 146

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/32","percentage":87.5,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"29/32","percentage":90.625,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 147

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"30/32","percentage":93.75,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 148

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"31/32","percentage":96.875,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":3},"end":{"line":9,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":3},"end":{"line":9,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":12,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":13,"character":21}}}
>>>
Content-Length: 253

{"id":13,"result":{"contents":{"kind":"markdown","value":"### function `millis`  \n\n---\n→ `unsigned long`  \n\n---\n```cpp\nunsigned long millis()\n```"},"range":{"start":{"line":13,"character":19},"end":{"line":13,"character":25}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":10}}}
>>>
Content-Length: 422

{"id":14,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 1140

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 412

{"id":15,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":13}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":14}}}
>>>
Content-Length: 209

{"id":17,"result":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"kind":1},{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":18}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":133},"contentChanges":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"rangeLength":0,"text":"*"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 408

{"id":19,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 1242

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"severity":1,"code":"typecheck_indirection_requires_pointer","source":"clang","message":"Indirection requires pointer operand ('String' invalid)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 520

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":15},"end":{"line":8,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"message":"Indirection requires pointer operand ('String' invalid)","severity":1,"code":"typecheck_indirection_requires_pointer","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":20,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":133}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":134},"contentChanges":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":134}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":135},"contentChanges":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"rangeLength":0,"text":"&"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":23,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1849

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String *' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String *' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String *' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":15},"end":{"line":8,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":135}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":136},"contentChanges":[{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":25,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":25,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":136}}}Content-Length: 223

{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":3}}}
>>>
Content-Length: 39

{"id":27,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":4}}}
>>>
Content-Length: 378

{"id":28,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"kind":1},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"kind":1},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":7}},"kind":1},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":5}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 1119

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":137},"contentChanges":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":4}},"rangeLength":2,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":30,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1119

{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":137}}}Content-Length: 224

{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":15}}}
>>>
Content-Length: 271

{"id":32,"result":{"contents":{"kind":"markdown","value":"### variable `mils`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString mils = String(millis())\n```"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":16}}}
>>>
Content-Length: 238

{"id":33,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":15}}}
>>>
Content-Length: 271

{"id":34,"result":{"contents":{"kind":"markdown","value":"### variable `mils`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString mils = String(millis())\n```"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 270

{"id":35,"result":{"contents":{"kind":"markdown","value":"### variable `mils`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString mils = String(millis())\n```"},"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 209

{"id":36,"result":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"kind":1},{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":138},"contentChanges":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"rangeLength":4,"text":"t"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":38,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":38,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1202

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mils'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":139},"contentChanges":[{"range":{"start":{"line":7,"character":10},"end":{"line":7,"character":10}},"rangeLength":0,"text":"e"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":39,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":39,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1202

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mils'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":140},"contentChanges":[{"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":11}},"rangeLength":0,"text":"x"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":41,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":41,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1202

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mils'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":141},"contentChanges":[{"range":{"start":{"line":7,"character":12},"end":{"line":7,"character":12}},"rangeLength":0,"text":"t"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":42,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1202

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mils'"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":141}}}Content-Length: 229

{"jsonrpc":"2.0","id":44,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":16}}}
>>>
Content-Length: 230

{"id":44,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/WString.h","range":{"start":{"line":44,"character":6},"end":{"line":44,"character":12}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":45,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":16}}}
>>>
Content-Length: 238

{"id":45,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":46,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":10}}}
>>>
Content-Length: 591

{"id":46,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 10565

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/WString.h","languageId":"cpp","version":1,"text":"/*\n  WString.h - String library for Wiring & Arduino\n  ...mostly rewritten by Paul Stoffregen...\n  Copyright (c) 2009-10 Hernando Barragan.  All right reserved.\n  Copyright 2011, Paul Stoffregen, paul@pjrc.com\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef String_class_h\n#define String_class_h\n#ifdef __cplusplus\n\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <avr/pgmspace.h>\n\n// When compiling programs with this class, the following gcc parameters\n// dramatically increase performance and memory (RAM) efficiency, typically\n// with little or no increase in code size.\n//     -felide-constructors\n//     -std=c++0x\n\nclass __FlashStringHelper;\n#define F(string_literal) (reinterpret_cast<const __FlashStringHelper *>(PSTR(string_literal)))\n\n// An inherited class for holding the result of a concatenation.  These\n// result objects are assumed to be writable by subsequent concatenations.\nclass StringSumHelper;\n\n// The string class\nclass String\n{\n\t// use a function pointer to allow for \"if (s)\" without the\n\t// complications of an operator bool(). for more information, see:\n\t// http://www.artima.com/cppsource/safebool.html\n\ttypedef void (String::*StringIfHelperType)() const;\n\tvoid StringIfHelper() const {}\n\npublic:\n\t// constructors\n\t// creates a copy of the initial value.\n\t// if the initial value is null or invalid, or if memory allocation\n\t// fails, the string will be marked as invalid (i.e. \"if (s)\" will\n\t// be false).\n\tString(const char *cstr = \"\");\n\tString(const String &str);\n\tString(const __FlashStringHelper *str);\n       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)\n\tString(String &&rval);\n\tString(StringSumHelper &&rval);\n\t#endif\n\texplicit String(char c);\n\texplicit String(unsigned char, unsigned char base=10);\n\texplicit String(int, unsigned char base=10);\n\texplicit String(unsigned int, unsigned char base=10);\n\texplicit String(long, unsigned char base=10);\n\texplicit String(unsigned long, unsigned char base=10);\n\texplicit String(float, unsigned char decimalPlaces=2);\n\texplicit String(double, unsigned char decimalPlaces=2);\n\t~String(void);\n\n\t// memory management\n\t// return true on success, false on failure (in which case, the string\n\t// is left unchanged).  reserve(0), if successful, will validate an\n\t// invalid string (i.e., \"if (s)\" will be true afterwards)\n\tunsigned char reserve(unsigned int size);\n\tinline unsigned int length(void) const {return len;}\n\n\t// creates a copy of the assigned value.  if the value is null or\n\t// invalid, or if the memory allocation fails, the string will be\n\t// marked as invalid (\"if (s)\" will be false).\n\tString & operator = (const String &rhs);\n\tString & operator = (const char *cstr);\n\tString & operator = (const __FlashStringHelper *str);\n       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)\n\tString & operator = (String &&rval);\n\tString & operator = (StringSumHelper &&rval);\n\t#endif\n\n\t// concatenate (works w/ built-in types)\n\n\t// returns true on success, false on failure (in which case, the string\n\t// is left unchanged).  if the argument is null or invalid, the\n\t// concatenation is considered unsucessful.\n\tunsigned char concat(const String &str);\n\tunsigned char concat(const char *cstr);\n\tunsigned char concat(char c);\n\tunsigned char concat(unsigned char c);\n\tunsigned char concat(int num);\n\tunsigned char concat(unsigned int num);\n\tunsigned char concat(long num);\n\tunsigned char concat(unsigned long num);\n\tunsigned char concat(float num);\n\tunsigned char concat(double num);\n\tunsigned char concat(const __FlashStringHelper * str);\n\n\t// if there's not enough memory for the concatenated value, the string\n\t// will be left unchanged (but this isn't signalled in any way)\n\tString & operator += (const String &rhs)\t{concat(rhs); return (*this);}\n\tString & operator += (const char *cstr)\t\t{concat(cstr); return (*this);}\n\tString & operator += (char c)\t\t\t{concat(c); return (*this);}\n\tString & operator += (unsigned char num)\t\t{concat(num); return (*this);}\n\tString & operator += (int num)\t\t\t{concat(num); return (*this);}\n\tString & operator += (unsigned int num)\t\t{concat(num); return (*this);}\n\tString & operator += (long num)\t\t\t{concat(num); return (*this);}\n\tString & operator += (unsigned long num)\t{concat(num); return (*this);}\n\tString & operator += (float num)\t\t{concat(num); return (*this);}\n\tString & operator += (double num)\t\t{concat(num); return (*this);}\n\tString & operator += (const __FlashStringHelper *str){concat(str); return (*this);}\n\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, char c);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, int num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, long num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, float num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, double num);\n\tfriend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);\n\n\t// comparison (only works w/ Strings and \"strings\")\n\toperator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }\n\tint compareTo(const String &s) const;\n\tunsigned char equals(const String &s) const;\n\tunsigned char equals(const char *cstr) const;\n\tunsigned char operator == (const String &rhs) const {return equals(rhs);}\n\tunsigned char operator == (const char *cstr) const {return equals(cstr);}\n\tunsigned char operator != (const String &rhs) const {return !equals(rhs);}\n\tunsigned char operator != (const char *cstr) const {return !equals(cstr);}\n\tunsigned char operator <  (const String &rhs) const;\n\tunsigned char operator >  (const String &rhs) const;\n\tunsigned char operator <= (const String &rhs) const;\n\tunsigned char operator >= (const String &rhs) const;\n\tunsigned char equalsIgnoreCase(const String &s) const;\n\tunsigned char startsWith( const String &prefix) const;\n\tunsigned char startsWith(const String &prefix, unsigned int offset) const;\n\tunsigned char endsWith(const String &suffix) const;\n\n\t// character acccess\n\tchar charAt(unsigned int index) const;\n\tvoid setCharAt(unsigned int index, char c);\n\tchar operator [] (unsigned int index) const;\n\tchar& operator [] (unsigned int index);\n\tvoid getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;\n\tvoid toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const\n\t\t{ getBytes((unsigned char *)buf, bufsize, index); }\n\tconst char* c_str() const { return buffer; }\n\tchar* begin() { return buffer; }\n\tchar* end() { return buffer + length(); }\n\tconst char* begin() const { return c_str(); }\n\tconst char* end() const { return c_str() + length(); }\n\n\t// search\n\tint indexOf( char ch ) const;\n\tint indexOf( char ch, unsigned int fromIndex ) const;\n\tint indexOf( const String &str ) const;\n\tint indexOf( const String &str, unsigned int fromIndex ) const;\n\tint lastIndexOf( char ch ) const;\n\tint lastIndexOf( char ch, unsigned int fromIndex ) const;\n\tint lastIndexOf( const String &str ) const;\n\tint lastIndexOf( const String &str, unsigned int fromIndex ) const;\n\tString substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };\n\tString substring( unsigned int beginIndex, unsigned int endIndex ) const;\n\n\t// modification\n\tvoid replace(char find, char replace);\n\tvoid replace(const String& find, const String& replace);\n\tvoid remove(unsigned int index);\n\tvoid remove(unsigned int index, unsigned int count);\n\tvoid toLowerCase(void);\n\tvoid toUpperCase(void);\n\tvoid trim(void);\n\n\t// parsing/conversion\n\tlong toInt(void) const;\n\tfloat toFloat(void) const;\n\tdouble toDouble(void) const;\n\nprotected:\n\tchar *buffer;\t        // the actual char array\n\tunsigned int capacity;  // the array length minus one (for the '\\0')\n\tunsigned int len;       // the String length (not counting the '\\0')\nprotected:\n\tvoid init(void);\n\tvoid invalidate(void);\n\tunsigned char changeBuffer(unsigned int maxStrLen);\n\tunsigned char concat(const char *cstr, unsigned int length);\n\n\t// copy and move\n\tString & copy(const char *cstr, unsigned int length);\n\tString & copy(const __FlashStringHelper *pstr, unsigned int length);\n       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)\n\tvoid move(String &rhs);\n\t#endif\n};\n\nclass StringSumHelper : public String\n{\npublic:\n\tStringSumHelper(const String &s) : String(s) {}\n\tStringSumHelper(const char *p) : String(p) {}\n\tStringSumHelper(char c) : String(c) {}\n\tStringSumHelper(unsigned char num) : String(num) {}\n\tStringSumHelper(int num) : String(num) {}\n\tStringSumHelper(unsigned int num) : String(num) {}\n\tStringSumHelper(long num) : String(num) {}\n\tStringSumHelper(unsigned long num) : String(num) {}\n\tStringSumHelper(float num) : String(num) {}\n\tStringSumHelper(double num) : String(num) {}\n};\n\n#endif  // __cplusplus\n#endif  // String_class_h\n"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/WString.h"}}}
>>>
Content-Length: 203

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/WString.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":10}}}
>>>
Content-Length: 422

{"id":47,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":8,"character":6},"end":{"line":8,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":48,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":10}}}
>>>
Content-Length: 122

{"id":48,"result":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":49,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":10}}}
>>>
Content-Length: 591

{"id":49,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":50,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":10},"end":{"line":8,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":52,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":451,"character":12}}}
>>>
Content-Length: 220

{"id":52,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":451,"character":7},"end":{"line":451,"character":18}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"range":{"start":{"line":449,"character":22},"end":{"line":449,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":53,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":54,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":28}}}
>>>
Content-Length: 221

{"id":54,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":55,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":11}}}
>>>
Content-Length: 221

{"id":55,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":8}}}
>>>
Content-Length: 356

{"id":56,"result":{"contents":{"kind":"markdown","value":"### instance-method `initialize`  \n\n---\n→ `void`  \nInitializes this instance, but interrupt based features are not available.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void initialize()\n```"},"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":57,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 221

{"id":57,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":58,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 221

{"id":58,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":59,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 221

{"id":59,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13263

{"id":60,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":61,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":30}}}
>>>
Content-Length: 275

{"id":62,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":28},"end":{"line":504,"character":33}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":39}}}
>>>
Content-Length: 39

{"id":63,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":64,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":40}}}
>>>
Content-Length: 275

{"id":64,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":40},"end":{"line":504,"character":44}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":39}}}
>>>
Content-Length: 39

{"id":65,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":26}}}
>>>
Content-Length: 449

{"id":66,"result":{"contents":{"kind":"markdown","value":"### instance-method `MultiFuncShield::write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * text`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void MultiFuncShield::write(const char *text, byte rightJustify = 0)\n```"},"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":67,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":27}}}
>>>
Content-Length: 483

{"id":67,"result":[{"range":{"start":{"line":456,"character":4},"end":{"line":456,"character":9}},"kind":1},{"range":{"start":{"line":461,"character":4},"end":{"line":461,"character":9}},"kind":1},{"range":{"start":{"line":483,"character":4},"end":{"line":483,"character":9}},"kind":1},{"range":{"start":{"line":499,"character":2},"end":{"line":499,"character":7}},"kind":1},{"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":50}}}
>>>
Content-Length: 322

{"id":68,"result":{"contents":{"kind":"markdown","value":"### variable `displayBuf`  \n\n---\nType: `byte [4]`  \nValue = `{0, 0, 0, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte displayBuf[] = {0, 0, 0, 0}\n```"},"range":{"start":{"line":506,"character":41},"end":{"line":506,"character":51}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":33}}}
>>>
Content-Length: 39

{"id":69,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":42}}}
>>>
Content-Length: 275

{"id":70,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":40},"end":{"line":504,"character":44}}},"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":42}}}
>>>
Content-Length: 581

{"id":71,"result":[{"range":{"start":{"line":504,"character":40},"end":{"line":504,"character":44}},"kind":1},{"range":{"start":{"line":510,"character":10},"end":{"line":510,"character":14}},"kind":2},{"range":{"start":{"line":510,"character":49},"end":{"line":510,"character":53}},"kind":3},{"range":{"start":{"line":514,"character":9},"end":{"line":514,"character":13}},"kind":2},{"range":{"start":{"line":522,"character":47},"end":{"line":522,"character":51}},"kind":2},{"range":{"start":{"line":528,"character":45},"end":{"line":528,"character":49}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":39}}}
>>>
Content-Length: 39

{"id":72,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":73,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":41}}}
>>>
Content-Length: 275

{"id":73,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":40},"end":{"line":504,"character":44}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":74,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":39}}}
>>>
Content-Length: 39

{"id":74,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":75,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":75,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":14}}}
>>>
Content-Length: 39

{"id":76,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 500

{"jsonrpc":"2.0","id":77,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"message":"Use of undeclared identifier 'mils'","severity":1,"code":"undeclared_var_use","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 413

{"id":77,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 122

{"id":78,"result":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":80,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 217

{"id":80,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":12}}}
>>>
Content-Length: 39

{"id":81,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":13}}}
>>>
Content-Length: 37

{"id":82,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":142},"contentChanges":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"rangeLength":4,"text":"text"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":83,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":83,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":16},"end":{"line":8,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":84,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":142}}}Content-Length: 224

{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":12}}}
>>>
Content-Length: 271

{"id":85,"result":{"contents":{"kind":"markdown","value":"### variable `text`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString text = String(millis())\n```"},"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":86,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":12}}}
>>>
Content-Length: 209

{"id":86,"result":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"kind":1},{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":87,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":87,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":143},"contentChanges":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":12}},"rangeLength":0,"text":"*"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":88,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":88,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1242

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":13}},"severity":1,"code":"typecheck_indirection_requires_pointer","source":"clang","message":"Indirection requires pointer operand ('String' invalid)"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 520

{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":13}},"message":"Indirection requires pointer operand ('String' invalid)","severity":1,"code":"typecheck_indirection_requires_pointer","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":89,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":143}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":144},"contentChanges":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":13}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":90,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":90,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":91,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":144}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":145},"contentChanges":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":12}},"rangeLength":0,"text":"&"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":92,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":92,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1849

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String *' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String *' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String *' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":93,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":145}}}Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":146},"contentChanges":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":13}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":94,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 408

{"id":94,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1843

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":95,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":95,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":146}}}Content-Length: 299

{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":13,"character":30},"end":{"line":13,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":96,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 1124

{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":30}},"context":{"diagnostics":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":97,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":14,"character":0}}}
>>>
Content-Length: 39

{"id":98,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":147},"contentChanges":[{"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":30}},"rangeLength":30,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":99,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 408

{"id":99,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":3}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":147}}}Content-Length: 296

{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":3},"end":{"line":9,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":100,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":2}}}
>>>
Content-Length: 40

{"id":101,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":2}}}
>>>
Content-Length: 40

{"id":102,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":103,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":103,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":148},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":104,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":104,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":105,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":148}}}Content-Length: 300

{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":106,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":107,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":15}}}
>>>
Content-Length: 272

{"id":107,"result":{"contents":{"kind":"markdown","value":"### variable `text`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString text = String(millis())\n```"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":16}}}
>>>
Content-Length: 239

{"id":108,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":15}}}
>>>
Content-Length: 272

{"id":109,"result":{"contents":{"kind":"markdown","value":"### variable `text`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString text = String(millis())\n```"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":16}}}
>>>
Content-Length: 209

{"id":110,"result":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":8}},"kind":1},{"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":22}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":111,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":32}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":111,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":7,"character":16},"end":{"line":7,"character":32}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":32}}}
>>>
Content-Length: 280

{"id":112,"result":{"contents":{"kind":"markdown","value":"### constructor `String`  \n\n---\n```cpp\n// In String\npublic: explicit String(unsigned long, unsigned char base = 10)\n```"},"range":{"start":{"line":7,"character":32},"end":{"line":7,"character":33}}},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":149},"contentChanges":[{"range":{"start":{"line":7,"character":32},"end":{"line":7,"character":32}},"rangeLength":0,"text":"\""},{"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":16}},"rangeLength":0,"text":"\""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":113,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":113,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":17},"end":{"line":7,"character":33}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":114,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":7,"character":17},"end":{"line":7,"character":33}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":17},"end":{"line":7,"character":33}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":115,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":7,"character":17},"end":{"line":7,"character":33}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":149}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":150},"contentChanges":[{"range":{"start":{"line":7,"character":17},"end":{"line":7,"character":33}},"rangeLength":16,"text":"0"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":116,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":116,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":151},"contentChanges":[{"range":{"start":{"line":7,"character":18},"end":{"line":7,"character":18}},"rangeLength":0,"text":"1"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":117,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":117,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":152},"contentChanges":[{"range":{"start":{"line":7,"character":19},"end":{"line":7,"character":19}},"rangeLength":0,"text":"2"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":118,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 409

{"id":118,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":153},"contentChanges":[{"range":{"start":{"line":7,"character":20},"end":{"line":7,"character":20}},"rangeLength":0,"text":"3"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":119,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":119,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":120,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":21},"end":{"line":7,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":120,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":153}}}Content-Length: 298

{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":23},"end":{"line":7,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":121,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":122,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":122,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":32}}}
>>>
Content-Length: 276

{"id":123,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":28},"end":{"line":504,"character":33}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":124,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":37}}}
>>>
Content-Length: 40

{"id":124,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":125,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":36}}}
>>>
Content-Length: 40

{"id":125,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":126,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":41}}}
>>>
Content-Length: 276

{"id":126,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In MultiFuncShield::write\nconst char *text\n```"},"range":{"start":{"line":504,"character":40},"end":{"line":504,"character":44}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":127,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":5}}}
>>>
Content-Length: 222

{"id":127,"result":{"contents":{"kind":"markdown","value":"### type-alias `byte`  \n\n---\n```cpp\ntypedef uint8_t byte\n```"},"range":{"start":{"line":506,"character":2},"end":{"line":506,"character":6}}},"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"jsonrpc":"2.0","id":128,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":10}}}
>>>
Content-Length: 1306

{"id":128,"result":[{"range":{"start":{"line":506,"character":7},"end":{"line":506,"character":17}},"kind":1},{"range":{"start":{"line":506,"character":41},"end":{"line":506,"character":51}},"kind":1},{"range":{"start":{"line":510,"character":36},"end":{"line":510,"character":46}},"kind":1},{"range":{"start":{"line":518,"character":8},"end":{"line":518,"character":18}},"kind":1},{"range":{"start":{"line":518,"character":28},"end":{"line":518,"character":38}},"kind":1},{"range":{"start":{"line":522,"character":8},"end":{"line":522,"character":18}},"kind":1},{"range":{"start":{"line":528,"character":6},"end":{"line":528,"character":16}},"kind":1},{"range":{"start":{"line":533,"character":22},"end":{"line":533,"character":32}},"kind":1},{"range":{"start":{"line":535,"character":4},"end":{"line":535,"character":14}},"kind":1},{"range":{"start":{"line":543,"character":23},"end":{"line":543,"character":33}},"kind":1},{"range":{"start":{"line":546,"character":25},"end":{"line":546,"character":35}},"kind":1},{"range":{"start":{"line":550,"character":29},"end":{"line":550,"character":39}},"kind":1},{"range":{"start":{"line":561,"character":30},"end":{"line":561,"character":40}},"kind":1},{"range":{"start":{"line":563,"character":25},"end":{"line":563,"character":35}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":10}}}
>>>
Content-Length: 322

{"id":129,"result":{"contents":{"kind":"markdown","value":"### variable `displayBuf`  \n\n---\nType: `byte [4]`  \nValue = `{0, 0, 0, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte displayBuf[] = {0, 0, 0, 0}\n```"},"range":{"start":{"line":506,"character":7},"end":{"line":506,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":19}}}
>>>
Content-Length: 40

{"id":130,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":131,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":506,"character":45}}}
>>>
Content-Length: 323

{"id":131,"result":{"contents":{"kind":"markdown","value":"### variable `displayBuf`  \n\n---\nType: `byte [4]`  \nValue = `{0, 0, 0, 0}`  \n\n---\n```cpp\n// In MultiFuncShield::write\nbyte displayBuf[] = {0, 0, 0, 0}\n```"},"range":{"start":{"line":506,"character":41},"end":{"line":506,"character":51}}},"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":7}}}
>>>
Content-Length: 233

{"id":132,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":504,"character":5},"end":{"line":504,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":22}}}
>>>
Content-Length: 450

{"id":133,"result":{"contents":{"kind":"markdown","value":"### instance-method `MultiFuncShield::write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * text`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void MultiFuncShield::write(const char *text, byte rightJustify = 0)\n```"},"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":134,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":22}}}
>>>
Content-Length: 222

{"id":134,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":135,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":21}}}
>>>
Content-Length: 234

{"id":135,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":504,"character":20},"end":{"line":504,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":136,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":22}}}
>>>
Content-Length: 222

{"id":136,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":137,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":22}}}
>>>
Content-Length: 450

{"id":137,"result":{"contents":{"kind":"markdown","value":"### instance-method `MultiFuncShield::write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * text`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void MultiFuncShield::write(const char *text, byte rightJustify = 0)\n```"},"range":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 409

{"id":138,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 362

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":154},"contentChanges":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"rangeLength":0,"text":"write(const char *text, byte rightJustify)"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":139,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 598

{"id":139,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"write","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":42}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1444

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":140,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":14}}}
>>>
Content-Length: 219

{"id":140,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":141,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":13}}}
>>>
Content-Length: 219

{"id":141,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":142,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":42},"end":{"line":11,"character":42}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":142,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":154}}}Content-Length: 225

{"jsonrpc":"2.0","id":143,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":5}}}
>>>
Content-Length: 334

{"id":143,"result":{"contents":{"kind":"markdown","value":"### function `write`  \n\n---\n→ `int`  \nParameters:  \n- `const char * text`\n- `byte rightJustify`\n\n---\n```cpp\npublic: int write(const char *text, byte rightJustify)\n```"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":144,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":2}}}
>>>
Content-Length: 334

{"id":144,"result":{"contents":{"kind":"markdown","value":"### function `write`  \n\n---\n→ `int`  \nParameters:  \n- `const char * text`\n- `byte rightJustify`\n\n---\n```cpp\npublic: int write(const char *text, byte rightJustify)\n```"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":145,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":3}}}
>>>
Content-Length: 334

{"id":145,"result":{"contents":{"kind":"markdown","value":"### function `write`  \n\n---\n→ `int`  \nParameters:  \n- `const char * text`\n- `byte rightJustify`\n\n---\n```cpp\npublic: int write(const char *text, byte rightJustify)\n```"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 520

{"jsonrpc":"2.0","id":146,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"message":"C++ requires a type specifier for all declarations","severity":1,"code":"missing_type_specifier","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 38

{"id":146,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":155},"contentChanges":[{"range":{"start":{"line":11,"character":42},"end":{"line":11,"character":42}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":147,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 598

{"id":147,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"write","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":42}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1444

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":156},"contentChanges":[{"range":{"start":{"line":11,"character":43},"end":{"line":11,"character":43}},"rangeLength":0,"text":"{}"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":148,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 598

{"id":148,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"write","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":45}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":149,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":44},"end":{"line":11,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":149,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 328

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":157},"contentChanges":[{"range":{"start":{"line":11,"character":44},"end":{"line":11,"character":44}},"rangeLength":0,"text":"\n  \n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":150,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}Content-Length: 785

{"id":150,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"write","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":151,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":2}}}
>>>
Content-Length: 124

{"id":151,"result":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":157}}}Content-Length: 500

{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":5}},"message":"C++ requires a type specifier for all declarations","severity":1,"code":"missing_type_specifier","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":152,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 425

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":158},"contentChanges":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":2}},"rangeLength":2,"text":""},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"rangeLength":0,"text":"v"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":153,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 786

{"id":153,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"vwrite","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":6}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":6}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":159},"contentChanges":[{"range":{"start":{"line":11,"character":1},"end":{"line":11,"character":1}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":154,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}Content-Length: 787

{"id":154,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"vowrite","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":7}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":160},"contentChanges":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":2}},"rangeLength":0,"text":"i"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":154}}Content-Length: 197

{"jsonrpc":"2.0","id":155,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 788

{"id":155,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"voiwrite","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 1219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":8}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":161},"contentChanges":[{"range":{"start":{"line":11,"character":3},"end":{"line":11,"character":3}},"rangeLength":0,"text":"d"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":156,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1219

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}Content-Length: 789

{"id":156,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"voidwrite","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":0},"end":{"line":11,"character":9}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":162},"contentChanges":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":4}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":157,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 786

{"id":157,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"write","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":158,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":158,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":162}}}Content-Length: 238

{"jsonrpc":"2.0","id":159,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":10}}}
>>>
Content-Length: 125

{"id":159,"result":[{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":160,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":163},"contentChanges":[{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"rangeLength":5,"text":"f"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":161,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 781

{"id":161,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"f","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":6}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":164},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":162,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 782

{"id":162,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"fo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":7}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":165},"contentChanges":[{"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":163,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":163,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":164,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":164,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":165}}}Content-Length: 224

{"jsonrpc":"2.0","id":165,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":2}}}
>>>
Content-Length: 261

{"id":165,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":166,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":3}}}
>>>
Content-Length: 261

{"id":166,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":167,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":5}}}
>>>
Content-Length: 422

{"id":167,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":168,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":18}}}
>>>
Content-Length: 40

{"id":168,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":169,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":17}}}
>>>
Content-Length: 40

{"id":169,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":170,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":18},"end":{"line":8,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":170,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":166},"contentChanges":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":0}},"rangeLength":0,"text":"  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":171,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":171,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":166}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":167},"contentChanges":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":172,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 783

{"id":172,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":168},"contentChanges":[{"range":{"start":{"line":12,"character":3},"end":{"line":12,"character":3}},"rangeLength":0,"text":"/"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":172}}Content-Length: 197

{"jsonrpc":"2.0","id":173,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":3}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":1}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":173,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":174,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":168}}}Content-Length: 226

{"jsonrpc":"2.0","id":175,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":29}}}
>>>
Content-Length: 222

{"id":175,"result":{"contents":{"kind":"markdown","value":"### type-alias `byte`  \n\n---\n```cpp\ntypedef uint8_t byte\n```"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":31}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":33}}}
>>>
Content-Length: 126

{"id":176,"result":[{"range":{"start":{"line":11,"character":32},"end":{"line":11,"character":44}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":32},"end":{"line":11,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":177,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":178,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":44}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":178,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":179,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":28}}}
>>>
Content-Length: 222

{"id":179,"result":{"contents":{"kind":"markdown","value":"### type-alias `byte`  \n\n---\n```cpp\ntypedef uint8_t byte\n```"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":31}}},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":169},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":44}},"rangeLength":17,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":180,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"severity":1,"code":"missing_param","source":"clang","message":"Expected parameter declarator"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":180,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":170},"contentChanges":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":181,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"},{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"missing_param","source":"clang","message":"Expected parameter declarator"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":181,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":171},"contentChanges":[{"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":26}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":182,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":182,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":183,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":28}}}
>>>
Content-Length: 40

{"id":183,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":184,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":184,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":171}}}Content-Length: 224

{"jsonrpc":"2.0","id":185,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":5}}}
>>>
Content-Length: 237

{"id":185,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":186,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":4}}}
>>>
Content-Length: 261

{"id":186,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":187,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":4}}}
>>>
Content-Length: 292

{"id":187,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"kind":1},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"kind":1},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":188,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":188,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":189,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":189,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":190,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":190,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":191,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":7}}}
>>>
Content-Length: 423

{"id":191,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":172},"contentChanges":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":11}},"rangeLength":9,"text":"f"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":192,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1195

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'f'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":192,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":173},"contentChanges":[{"range":{"start":{"line":6,"character":3},"end":{"line":6,"character":3}},"rangeLength":0,"text":"p"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":193,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1196

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fp'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":193,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":174},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":4}},"rangeLength":0,"text":"p"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":193}}Content-Length: 197

{"jsonrpc":"2.0","id":194,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1197

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fpp'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":194,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 476

{"jsonrpc":"2.0","id":195,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"Use of undeclared identifier 'fpp'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":195,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":174}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":175},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":196,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1196

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fp'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":196,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":176},"contentChanges":[{"range":{"start":{"line":6,"character":3},"end":{"line":6,"character":4}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":197,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1195

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'f'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 783

{"id":197,"result":[{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":11}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}},{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":177},"contentChanges":[{"range":{"start":{"line":6,"character":3},"end":{"line":6,"character":3}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":198,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 595

{"id":198,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":178},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":4}},"rangeLength":0,"text":"o"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":198}}Content-Length: 197

{"jsonrpc":"2.0","id":199,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 296

{"jsonrpc":"2.0","id":200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":178}}}
>>>
Content-Length: 1196

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fo'"},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 1016

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang","message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":199,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 38

{"id":200,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":201,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":201,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":202,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":6}}}
>>>
Content-Length: 423

{"id":202,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":8,"character":6},"end":{"line":8,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":203,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":4}}}
>>>
Content-Length: 261

{"id":203,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nextern MultiFuncShield MFS\n```"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":204,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":5}}}
>>>
Content-Length: 237

{"id":204,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":205,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":10}}}
>>>
Content-Length: 263

{"id":205,"result":{"contents":{"kind":"markdown","value":"### variable `text`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString text = \"0123\"\n```"},"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":206,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":8}}}
>>>
Content-Length: 237

{"id":206,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":207,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":10}}}
>>>
Content-Length: 263

{"id":207,"result":{"contents":{"kind":"markdown","value":"### variable `text`  \n\n---\nType: `class String`  \n\n---\n```cpp\n// In setup\nString text = \"0123\"\n```"},"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":208,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":11}}}
>>>
Content-Length: 210

{"id":208,"result":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"kind":1},{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":209,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":209,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":210,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":5}}}
>>>
Content-Length: 422

{"id":210,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":211,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":4}}}
>>>
Content-Length: 207

{"id":211,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"kind":1},{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 1120

{"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 412

{"id":212,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":8,"character":2},"end":{"line":8,"character":6}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 1121

{"jsonrpc":"2.0","id":213,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 413

{"id":213,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":214,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":8,"character":7}}}
>>>
Content-Length: 423

{"id":214,"result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `const char * textstring`\n- `byte rightJustify = 0`\n\nWrites to the LED digit display.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void write(const char *textstring, byte rightJustify = 0)\n```"},"range":{"start":{"line":8,"character":6},"end":{"line":8,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 1141

{"jsonrpc":"2.0","id":215,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"message":"No matching member function for call to 'write'\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:87:10:\nnote: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:88:10:\nnote: candidate function not viable: no known conversion from 'String' to 'int' for 1st argument\n\nC:\\Users\\banks\\Documents\\Arduino\\libraries\\MultiFuncShield-Library\\MultiFuncShield.h:89:10:\nnote: candidate function not viable: no known conversion from 'String' to 'float' for 1st argument","severity":1,"code":"ovl_no_viable_member_function_in_call","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 413

{"id":215,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":179},"contentChanges":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":11}},"rangeLength":9,"text":"f"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":216,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":4,"jsonrpc":"2.0"}Content-Length: 370

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'f'"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":216,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":180},"contentChanges":[{"range":{"start":{"line":8,"character":3},"end":{"line":8,"character":3}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":217,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":217,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":181},"contentChanges":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":4}},"rangeLength":0,"text":"o"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":217}}Content-Length: 197

{"jsonrpc":"2.0","id":218,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fo'"}]},"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":218,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 627

{"jsonrpc":"2.0","id":219,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":8,"character":5},"end":{"line":8,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":219,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":181}}}Content-Length: 237

{"jsonrpc":"2.0","id":220,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":65}}}
>>>
Content-Length: 38

{"id":220,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":221,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":65},"end":{"line":6,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":221,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":222,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":65}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":222,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":182},"contentChanges":[{"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":65}},"rangeLength":65,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":223,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":223,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":183},"contentChanges":[{"range":{"start":{"line":4,"character":43},"end":{"line":5,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":224,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":224,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":184},"contentChanges":[{"range":{"start":{"line":4,"character":42},"end":{"line":4,"character":43}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":225,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":225,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":226,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":4,"character":42},"end":{"line":4,"character":42}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":226,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":184}}}Content-Length: 237

{"jsonrpc":"2.0","id":227,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":40}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":227}}
>>>
Content-Length: 38

{"id":227,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":4,"character":42}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":228,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":229,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":42}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":229,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":185},"contentChanges":[{"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":42}},"rangeLength":42,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":230,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":230,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":186},"contentChanges":[{"range":{"start":{"line":3,"character":14},"end":{"line":4,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":231,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":231,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":232,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":232,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":186}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":233,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":233,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":187},"contentChanges":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":234,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":234,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":188},"contentChanges":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":5}},"rangeLength":0,"text":"D"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":235,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":235,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":189},"contentChanges":[{"range":{"start":{"line":10,"character":6},"end":{"line":10,"character":6}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":236,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":236,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":190},"contentChanges":[{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":7}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":237,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":237,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":191},"contentChanges":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"rangeLength":0,"text":"s"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":238,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":238,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":192},"contentChanges":[{"range":{"start":{"line":10,"character":9},"end":{"line":10,"character":9}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":239,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":6,"jsonrpc":"2.0"}Content-Length: 592

{"id":239,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
>>>
Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":193},"contentChanges":[{"range":{"start":{"line":10,"character":10},"end":{"line":10,"character":10}},"rangeLength":0,"text":"u"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":240,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":240,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":194},"contentChanges":[{"range":{"start":{"line":10,"character":11},"end":{"line":10,"character":11}},"rangeLength":0,"text":"f"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":241,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":241,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":195},"contentChanges":[{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":12}},"rangeLength":0,"text":"f"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":242,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":242,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","id":243,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":10,"character":13},"end":{"line":10,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":243,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":195}}}Content-Length: 225

{"jsonrpc":"2.0","id":244,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":1}}}
>>>
Content-Length: 40

{"id":244,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":1},"end":{"line":11,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":245,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":196},"contentChanges":[{"range":{"start":{"line":11,"character":1},"end":{"line":11,"character":1}},"rangeLength":0,"text":"\n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":246,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":246,"result":[{"name":"setup","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":196}}}Content-Length: 225

{"jsonrpc":"2.0","id":247,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":1}}}
>>>
Content-Length: 40

{"id":247,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","id":248,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":11,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":248,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","id":249,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":249,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":1},"end":{"line":7,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":250,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":251,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":6}}}
>>>
Content-Length: 209

{"id":251,"result":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}},"kind":1},{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":252,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":252,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":197},"contentChanges":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":10}},"rangeLength":5,"text":"b"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":253,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 587

{"id":253,"result":[{"name":"b","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":6}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":198},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":6}},"rangeLength":0,"text":"a"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":253}}Content-Length: 197

{"jsonrpc":"2.0","id":254,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":254,"result":[{"name":"ba","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":7}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":199},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":255,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":255,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":256,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":256,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":199}}}Content-Length: 298

{"jsonrpc":"2.0","id":257,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":28},"end":{"line":9,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":257,"result":[],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":258,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":1},"end":{"line":11,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 38

{"id":258,"result":[],"jsonrpc":"2.0"}Content-Length: 523

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","id":259,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":4,"character":0},"end":{"line":11,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":259,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","id":260,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":260,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":261,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":2}}}
>>>
Content-Length: 217

{"id":261,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":262,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":17}}}
>>>
Content-Length: 40

{"id":262,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":263,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":13}}}
>>>
Content-Length: 40

{"id":263,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":264,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":13}}}
>>>
Content-Length: 252

{"id":264,"result":{"contents":{"kind":"markdown","value":"### param `text`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In foo\nconst char *text\n```"},"range":{"start":{"line":9,"character":9},"end":{"line":9,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":1},"end":{"line":11,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":265,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","id":266,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":4,"character":0},"end":{"line":11,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":266,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","id":267,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":11,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":267,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":268,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":9}}}
>>>
Content-Length: 40

{"id":268,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":269,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":7,"character":1},"end":{"line":7,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":269,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":270,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":3}}}
>>>
Content-Length: 237

{"id":270,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":271,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":2}}}
>>>
Content-Length: 237

{"id":271,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":272,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":2}}}
>>>
Content-Length: 122

{"id":272,"result":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":273,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":200},"contentChanges":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}},"rangeLength":0,"text":"c"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":274,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":8,"jsonrpc":"2.0"}Content-Length: 589

{"id":274,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 894

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":9}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cString'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":201},"contentChanges":[{"range":{"start":{"line":5,"character":3},"end":{"line":5,"character":3}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":275,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":275,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":202},"contentChanges":[{"range":{"start":{"line":5,"character":4},"end":{"line":5,"character":4}},"rangeLength":0,"text":"n"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":275}}Content-Length: 197

{"jsonrpc":"2.0","id":276,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 896

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":10}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'coString'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 897

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":11}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'conString'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":276,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":203},"contentChanges":[{"range":{"start":{"line":5,"character":5},"end":{"line":5,"character":5}},"rangeLength":0,"text":"s"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":276}}Content-Length: 197

{"jsonrpc":"2.0","id":277,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 367

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":12}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'consString'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":277,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":204},"contentChanges":[{"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":6}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":278,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 368

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":13}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'constString'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":278,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":205},"contentChanges":[{"range":{"start":{"line":5,"character":7},"end":{"line":5,"character":7}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":279,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":279,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 529

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":280,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":280,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":205}}}Content-Length: 298

{"jsonrpc":"2.0","id":281,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":281,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":282,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":5}}}
>>>
Content-Length: 40

{"id":282,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":283,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":6}}}
>>>
Content-Length: 210

{"id":283,"result":[{"range":{"start":{"line":5,"character":15},"end":{"line":5,"character":19}},"kind":1},{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":284,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":284,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":285,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":10,"character":10}}}
>>>
Content-Length: 40

{"id":285,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":206},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"rangeLength":0,"text":"*"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":286,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 419

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":7}},"severity":1,"code":"typecheck_indirection_requires_pointer","source":"clang","message":"Indirection requires pointer operand ('const String' invalid)"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":286,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 523

{"jsonrpc":"2.0","id":287,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":7}},"message":"Indirection requires pointer operand ('const String' invalid)","severity":1,"code":"typecheck_indirection_requires_pointer","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":287,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":206}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":207},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":7}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":288,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":288,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 529

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":289,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":289,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":207}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":208},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"rangeLength":0,"text":"$"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":290,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier '$text'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":290,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 479

{"jsonrpc":"2.0","id":291,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"message":"Use of undeclared identifier '$text'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":291,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":208}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":209},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":7}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":292,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 529

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":292,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":293,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":293,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":209}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":210},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"rangeLength":0,"text":"&"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":294,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":294,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 531

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String *' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":295,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":295,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":210}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":211},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":7}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":296,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":296,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 529

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":297,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":297,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":211}}}Content-Length: 225

{"jsonrpc":"2.0","id":298,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":12}}}
>>>
Content-Length: 40

{"id":298,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":299,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":15}}}
>>>
Content-Length: 268

{"id":299,"result":{"contents":{"kind":"markdown","value":"### variable `text`  \n\n---\nType: `const String`  \n\n---\n```cpp\n// In bar\nconst String text = \"0123\"\n```"},"range":{"start":{"line":5,"character":15},"end":{"line":5,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":300,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":2}}}
>>>
Content-Length: 280

{"id":300,"result":{"contents":{"kind":"markdown","value":"### function `foo`  \n\n---\n→ `void`  \nParameters:  \n- `const char * text`\n\n---\n```cpp\nvoid foo(const char *text)\n```"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 653

{"jsonrpc":"2.0","id":301,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument","severity":1,"code":"ovl_no_viable_function_in_call","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 412

{"id":301,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":302,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":9}}}
>>>
Content-Length: 238

{"id":302,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":303,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":9}}}
>>>
Content-Length: 123

{"id":303,"result":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":304,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":304,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":305,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":21}}}
>>>
Content-Length: 256

{"id":305,"result":{"contents":{"kind":"markdown","value":"### constructor `String`  \n\n---\n```cpp\n// In String\npublic: String(String \u0026\u0026rval)\n```"},"range":{"start":{"line":5,"character":20},"end":{"line":5,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":212},"contentChanges":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}},"rangeLength":6,"text":"c"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":306,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 357

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'c'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":306,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":213},"contentChanges":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":9}},"rangeLength":0,"text":"h"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":306}}Content-Length: 197

{"jsonrpc":"2.0","id":307,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'ch'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":307,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":214},"contentChanges":[{"range":{"start":{"line":5,"character":10},"end":{"line":5,"character":10}},"rangeLength":0,"text":"a"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":308,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":308,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 861

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":11}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cha'; did you mean 'char'? (fix available)"},{"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":16}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo' (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":215},"contentChanges":[{"range":{"start":{"line":5,"character":11},"end":{"line":5,"character":11}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":309,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":309,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 646

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":17}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo' (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":310,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":310,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":215}}}Content-Length: 237

{"jsonrpc":"2.0","id":311,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":13}}}
>>>
Content-Length: 210

{"id":311,"result":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":17}},"kind":1},{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 539

{"jsonrpc":"2.0","id":312,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":17}},"message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'","severity":1,"code":"init_conversion_failed","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":312,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":216},"contentChanges":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"rangeLength":0,"text":"*"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":313,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 589

{"id":313,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":314,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":314,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":216}}}Content-Length: 225

{"jsonrpc":"2.0","id":315,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":12}}}
>>>
Content-Length: 40

{"id":315,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":13}}}
>>>
Content-Length: 40

{"id":316,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":217},"contentChanges":[{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":317,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":317,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":318,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":15},"end":{"line":5,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":318,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":217}}}Content-Length: 225

{"jsonrpc":"2.0","id":319,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":20}}}
>>>
Content-Length: 40

{"id":319,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":320,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":21}}}
>>>
Content-Length: 124

{"id":320,"result":[{"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":25}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":321,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":218},"contentChanges":[{"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":21}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":322,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":322,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":323,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":22},"end":{"line":9,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":323,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":218}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":9,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 112

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"jsonrpc":"2.0","id":10,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":219},"contentChanges":[{"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":22}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":324,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":324,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":220},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":29,"text":""}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":324}}Content-Length: 197

{"jsonrpc":"2.0","id":325,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 406

{"id":325,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":325}}Content-Length: 348

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":221},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"void foo(const char *text) {\n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":326,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":1}},"severity":1,"code":"extraneous_closing_brace","source":"clang","message":"Extraneous closing brace ('}')"}]},"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 589

{"id":326,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":222},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":29,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":327,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":1}},"severity":1,"code":"extraneous_closing_brace","source":"clang","message":"Extraneous closing brace ('}')"}]},"jsonrpc":"2.0"}Content-Length: 406

{"id":327,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 348

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":223},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"void foo(const char *text) {\n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":328,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 589

{"id":328,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":224},"contentChanges":[{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":329,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":329,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":225},"contentChanges":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":14}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":330,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 646

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":17}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo' (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":330,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 325

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":226},"contentChanges":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":12}},"rangeLength":4,"text":"String"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":331,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":331,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 529

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":332,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":332,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":226}}}
>>>
Content-Length: 117

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"jsonrpc":"2.0","id":11,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 112

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"jsonrpc":"2.0","id":12,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 529

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:9:6: note: candidate function not viable: no known conversion from 'const String' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":333,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":333,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":334,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":8}}}
>>>
Content-Length: 238

{"id":334,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":227},"contentChanges":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":14}},"rangeLength":6,"text":"c"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":335,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 357

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'c'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":335,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":228},"contentChanges":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":9}},"rangeLength":0,"text":"h"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":336,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":229},"contentChanges":[{"range":{"start":{"line":5,"character":10},"end":{"line":5,"character":10}},"rangeLength":0,"text":"a"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":336}}Content-Length: 197

{"jsonrpc":"2.0","id":337,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'ch'"}]},"jsonrpc":"2.0"}Content-Length: 589

{"id":336,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 589

{"id":337,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 861

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":11}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cha'; did you mean 'char'? (fix available)"},{"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":16}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo' (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":230},"contentChanges":[{"range":{"start":{"line":5,"character":11},"end":{"line":5,"character":11}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":338,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":338,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 646

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":17}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo' (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":231},"contentChanges":[{"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":12}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":339,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":339,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}Content-Length: 646

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":18}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char' with an lvalue of type 'const char [5]'"},{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo' (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":231}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":232},"contentChanges":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"rangeLength":0,"text":"*"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":340,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 589

{"id":340,"result":[{"name":"bar","kind":12,"range":{"start":{"line":3,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":3,"character":5},"end":{"line":3,"character":8}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}},{"name":"loop","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":341,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":341,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":232}}}Content-Length: 225

{"jsonrpc":"2.0","id":342,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":20}}}
>>>
Content-Length: 40

{"id":342,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":343,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":9,"character":21}}}
>>>
Content-Length: 124

{"id":343,"result":[{"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":25}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":344,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":344,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":345,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":5,"character":13}}}
>>>
Content-Length: 40

{"id":345,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":346,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":16,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":346,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 493

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":233},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":16,"character":0}},"rangeLength":168,"text":"void setup()\n{\n  Serial.begin(115200);\n  char * message = \"0123\";\n  foo(message);\n}\n\nvoid loop()\n{\n}\n\nvoid foo(const char *text)\n{\n  Serial.println(text);\n}"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":347,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 115

{"id":347,"error":{"code":-32602,"message":"trying to get AST for non-added document","data":null},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":22928,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 396

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":233,"text":"void setup()\n{\n  Serial.begin(115200);\n  char * message = \"0123\";\n  foo(message);\n}\n\nvoid loop()\n{\n}\n\nvoid foo(const char *text)\n{\n  Serial.println(text);\n}"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 296

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":14,"character":1},"end":{"line":14,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":233}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 589

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":9}}}
>>>
Content-Length: 309

{"id":3,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `char *`  \nValue = `\u0026\"0123\"[0]`  \nPassed as text  \n\n---\n```cpp\n// In setup\nchar *message = \"0123\"\n```"},"range":{"start":{"line":4,"character":6},"end":{"line":4,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":8}}}
>>>
Content-Length: 309

{"id":4,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `char *`  \nValue = `\u0026\"0123\"[0]`  \nPassed as text  \n\n---\n```cpp\n// In setup\nchar *message = \"0123\"\n```"},"range":{"start":{"line":4,"character":6},"end":{"line":4,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":11,"character":11}}}
>>>
Content-Length: 213

{"id":5,"result":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":25}},"kind":1},{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":21}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":234},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":14}},"rangeLength":5,"text":""}]}}Content-Length: 195

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":7,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":235},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":10}},"rangeLength":1,"text":""}]}}Content-Length: 195

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 589

{"id":8,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":235}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":2}}}
>>>
Content-Length: 39

{"id":10,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":2}}}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 326

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":236},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":9}},"rangeLength":0,"text":"const "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 590

{"id":12,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":13,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":236}}}Content-Length: 223

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":5}}}
>>>
Content-Length: 264

{"id":14,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":8}}},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":1}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 39

{"id":15,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}Content-Length: 223

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":2}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":16}}Content-Length: 235

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":2}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":237},"contentChanges":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"rangeLength":0,"text":"c"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 420

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":7}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'cchar'; did you mean 'char'? (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":19,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":238},"contentChanges":[{"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"rangeLength":0,"text":"o"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 421

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":8}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'cochar'; did you mean 'char'? (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":20,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":239},"contentChanges":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"rangeLength":0,"text":"n"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 363

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":9}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'conchar'"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":240},"contentChanges":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"rangeLength":0,"text":"s"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 365

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'conschar'"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":22,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":241},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":6}},"rangeLength":0,"text":"t"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 590

{"id":23,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 633

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'constchar'; did you mean 'constexpr'? (fix available)"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":21}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":242},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 590

{"id":24,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":242}}}Content-Length: 224

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":13,"character":1}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":14,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":243},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":14,"character":1}},"rangeLength":162,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":4,"jsonrpc":"2.0"}Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":243}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 496

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":244},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"rangeLength":1,"text":"void setup()\n{\n  Serial.begin(115200);\n  const char * message = \"0123\";\n  foo(message);\n}\n\nvoid loop()\n{\n}\n\nvoid foo(const char *text)\n{\n  Serial.println(text);\n}"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 590

{"id":29,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'foo'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 476

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":14,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":5}},"message":"Use of undeclared identifier 'foo'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":31,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":11}}}
>>>
Content-Length: 239

{"id":31,"result":[{"uri":"file:///C:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","range":{"start":{"line":120,"character":9},"end":{"line":120,"character":14}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":244}}}Content-Length: 5669

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include <inttypes.h>\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to > 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) < 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) < 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE>256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE>256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}}}Content-Length: 202

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}}
>>>
Content-Length: 210

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":1},"end":{"line":1,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":32,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":13}}}
>>>
Content-Length: 324

{"id":33,"result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud)\n```"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":245},"contentChanges":[{"range":{"start":{"line":1,"character":1},"end":{"line":1,"character":1}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":34,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":6,"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'foo'"}]},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":22928,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":246,"text":"void setup()\n{\n\n  \n  Serial.begin(115200);\n  const char * message = \"0123\";\n  foo(message);\n}\n\nvoid loop()\n{\n}\n\nvoid foo(const char *text)\n{\n  Serial.println(text);\n}"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 195

{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":246}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 590

{"id":1,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 590

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":247},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":2}},"rangeLength":2,"text":""},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"rangeLength":0,"text":"i"}]}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 561

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'i'"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":248},"contentChanges":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":1}},"rangeLength":0,"text":"n"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 195

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 562

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'in'"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":4,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":249},"contentChanges":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"rangeLength":0,"text":"t"}]}}Content-Length: 195

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":5,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":250},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"rangeLength":0,"text":" "}]}}Content-Length: 195

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":6,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":250}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":251},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"o"}]}}Content-Length: 195

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 294

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"context":{"diagnostics":[]}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":252},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}Content-Length: 195

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":7,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 590

{"id":9,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":253},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"i"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 591

{"id":10,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":254},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 591

{"id":11,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":255},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"rangeLength":0,"text":"="}]}}Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 414

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int' with an rvalue of type 'void'"}]},"jsonrpc":"2.0"}Content-Length: 591

{"id":12,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":256},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 414

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int' with an rvalue of type 'void'"}]},"jsonrpc":"2.0"}Content-Length: 591

{"id":13,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":256}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":257},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"rangeLength":0,"text":"1"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 591

{"id":14,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":258},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"rangeLength":0,"text":";"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 591

{"id":15,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":16,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":258}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":259},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"rangeLength":0,"text":"\n"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":17,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":259}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":260},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"rangeLength":0,"text":"c"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 561

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'c'"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":18,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":261},"contentChanges":[{"range":{"start":{"line":3,"character":1},"end":{"line":3,"character":1}},"rangeLength":0,"text":"o"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 562

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'co'"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":19,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":262},"contentChanges":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"rangeLength":0,"text":"n"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":19}}Content-Length: 196

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":20,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 828

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":3}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'con'; did you mean 'cos'? (fix available)\n\nc:\\users\\banks\\appdata\\local\\arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7\\bin\\..\\lib\\gcc\\avr\\7.3.0\\..\\..\\..\\..\\avr\\include\\math.h:127:15:\nnote: 'cos' declared here"},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":263},"contentChanges":[{"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"rangeLength":0,"text":"s"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 780

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":4}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cons'; did you mean 'const'? (fix available)"},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Serial' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"invalid_operator_on_type","source":"clang","message":"Cannot use dot operator on a type"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":264},"contentChanges":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"rangeLength":0,"text":"t"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":22,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 564

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Serial' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"invalid_operator_on_type","source":"clang","message":"Cannot use dot operator on a type"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":265},"contentChanges":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 564

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Serial' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"invalid_operator_on_type","source":"clang","message":"Cannot use dot operator on a type"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":23,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":266},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":6}},"rangeLength":0,"text":"i"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":24,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":267},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"rangeLength":0,"text":"n"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":24}}Content-Length: 196

{"jsonrpc":"2.0","id":25,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 561

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":7}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'i'"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":25,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 562

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'in'"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":8}},"message":"Unknown type name 'in'","severity":1,"code":"unknown_typename","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":267}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":268},"contentChanges":[{"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"rangeLength":0,"text":"t"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 619

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":27,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":269},"contentChanges":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":9}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":28,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 619

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":269}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":270},"contentChanges":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"rangeLength":0,"text":"j"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":29,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 621

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":271},"contentChanges":[{"range":{"start":{"line":3,"character":11},"end":{"line":3,"character":11}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":30,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 621

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":271}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":272},"contentChanges":[{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"rangeLength":0,"text":"="}]}}Content-Length: 196

{"jsonrpc":"2.0","id":31,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 422

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const int' with an rvalue of type 'void'"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":31,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":273},"contentChanges":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":13}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 422

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const int' with an rvalue of type 'void'"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":32,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":273}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":274},"contentChanges":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"rangeLength":0,"text":"i"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":33,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":33,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":34,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":275},"contentChanges":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"rangeLength":0,"text":";"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 594

{"id":35,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":36,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":275}}}Content-Length: 297

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":23},"end":{"line":5,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":31}}}
>>>
Content-Length: 39

{"id":38,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":38}}Content-Length: 297

{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":5,"character":23},"end":{"line":6,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":39,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":31},"end":{"line":6,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":276},"contentChanges":[{"range":{"start":{"line":6,"character":31},"end":{"line":6,"character":31}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":41,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":41,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":32},"end":{"line":6,"character":32}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":42,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":277},"contentChanges":[{"range":{"start":{"line":6,"character":32},"end":{"line":6,"character":32}},"rangeLength":0,"text":"+"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":43,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":33},"end":{"line":6,"character":34}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":43,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":278},"contentChanges":[{"range":{"start":{"line":6,"character":33},"end":{"line":6,"character":33}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":44,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":44,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":279},"contentChanges":[{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":34}},"rangeLength":0,"text":"j"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":45,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 594

{"id":45,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":35},"end":{"line":6,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":279}}}Content-Length: 296

{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":47,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":3}}}
>>>
Content-Length: 39

{"id":48,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":49,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":9}}}
>>>
Content-Length: 39

{"id":49,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 37

{"id":50,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"jsonrpc":"2.0","id":52,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 37

{"id":52,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":53,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":4}}}
>>>
Content-Length: 251

{"id":53,"result":{"contents":{"kind":"markdown","value":"### variable `i`  \n\n---\nType: `int`  \nValue = `1`  \n\n---\n```cpp\n// In setup\nint i = 1\n```"},"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":4}}}
>>>
Content-Length: 208

{"id":54,"result":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"kind":1},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":55,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":55,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":280},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":56,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":56,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 547

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":6}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":281},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"char"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":57,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":57,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 762

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":10}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 508

{"jsonrpc":"2.0","id":58,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"message":"Cannot combine with previous 'int' declaration specifier","severity":1,"code":"invalid_decl_spec_combination","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":58,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":281}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":282},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":59,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":59,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 763

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":11}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":282}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":283},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"rangeLength":0,"text":"*"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":60,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 763

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":12}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":284},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"rangeLength":0,"text":" "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":61,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":61,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 763

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":13}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":284}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":285},"contentChanges":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":11}},"rangeLength":0,"text":"m"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":62,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":62,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 812

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":12}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":286},"contentChanges":[{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":12}},"rangeLength":0,"text":"e"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":63,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":63,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 812

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":13}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":287},"contentChanges":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":13}},"rangeLength":0,"text":"s"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":64,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 812

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":14}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":288},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"rangeLength":0,"text":"s"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":65,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 812

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":15}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":289},"contentChanges":[{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"rangeLength":0,"text":"a"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":66,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 812

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":16}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 522

{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":16}},"message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'","severity":1,"code":"init_conversion_failed","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":67,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":289}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":290},"contentChanges":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"rangeLength":0,"text":"g"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":68,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":68,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":291},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"rangeLength":0,"text":"e"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":68}}Content-Length: 196

{"jsonrpc":"2.0","id":69,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 812

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":17}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":69,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1684

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'int *'\n\nLibraryTests.ino.cpp:12:12: note: previous definition is here"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'int *'"},{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:8:6: note: candidate function not viable: no known conversion from 'int *' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 766

{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'","severity":1,"code":"init_conversion_failed","source":"clang"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'int *'","severity":3}]}}}
>>>
Content-Length: 37

{"id":70,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":291}}}Content-Length: 235

{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":1}}}
>>>
Content-Length: 37

{"id":71,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":72,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":72,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":73,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":1}}}
>>>
Content-Length: 39

{"id":73,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":292},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"rangeLength":3,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":74,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":74,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 528

{"jsonrpc":"2.0","id":75,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"message":"Cannot combine with previous 'int' declaration specifier","severity":1,"code":"invalid_decl_spec_combination","source":"clang"}],"only":["quickfix"]}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":293},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":74}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":75}}Content-Length: 196

{"jsonrpc":"2.0","id":76,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 1139

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":15}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'char *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:9: note: previous definition is here"},{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":15}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"}]},"jsonrpc":"2.0"}Content-Length: 37

{"id":75,"result":[],"jsonrpc":"2.0"}Content-Length: 594

{"id":76,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1139

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'char *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:8: note: previous definition is here"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":1}}}
>>>
Content-Length: 39

{"id":77,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","id":78,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":78,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":293}}}Content-Length: 297

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":17}}}
>>>
Content-Length: 39

{"id":80,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":81,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":18}}}
>>>
Content-Length: 37

{"id":81,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":82,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":16}}}
>>>
Content-Length: 284

{"id":83,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `char *`  \n\n---\n```cpp\n// In setup\nchar *message = \u003crecovery - expr\u003e(1)\n```"},"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":294},"contentChanges":[{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"rangeLength":0,"text":"\""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":84,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":84,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1345

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'char *' with an rvalue of type 'int'"},{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":20}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:8: note: previous definition is here"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 502

{"jsonrpc":"2.0","id":85,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":20}},"message":"Expected ';' at end of declaration (fix available)","severity":1,"code":"expected_semi_declaration","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":85,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":86,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":18}}}
>>>
Content-Length: 37

{"id":86,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":294}}}Content-Length: 297

{"jsonrpc":"2.0","id":87,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":87,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":17}}}
>>>
Content-Length: 37

{"id":88,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":89,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":295},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"rangeLength":0,"text":"\""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":90,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 594

{"id":90,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 913

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:8: note: previous definition is here"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":91,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":295}}}Content-Length: 236

{"jsonrpc":"2.0","id":92,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":14}}}
>>>
Content-Length: 208

{"id":92,"result":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"kind":1},{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":13}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 540

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'","severity":3}]}}}
>>>
Content-Length: 37

{"id":93,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 539

{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'","severity":3}]}}}
>>>
Content-Length: 37

{"id":94,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":296},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"rangeLength":7,"text":"f"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":95,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":95,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":297},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"rangeLength":0,"text":"o"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":96,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":96,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":298},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"rangeLength":0,"text":"o"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":97,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}Content-Length: 594

{"id":97,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":98,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":98,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":298}}}Content-Length: 236

{"jsonrpc":"2.0","id":99,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":10}}}
>>>
Content-Length: 210

{"id":99,"result":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"kind":1},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":100,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":101,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":9}}}
>>>
Content-Length: 38

{"id":101,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":102,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":103,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":103,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":299},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":9}},"rangeLength":3,"text":"c"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":104,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":104,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":300},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"rangeLength":0,"text":"h"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":104}}Content-Length: 197

{"jsonrpc":"2.0","id":105,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 759

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":7}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'c'"},{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}Content-Length: 760

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'ch'"},{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":105,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":301},"contentChanges":[{"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"rangeLength":0,"text":"a"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":106,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":106,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 807

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":9}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cha'; did you mean 'char'? (fix available)"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":302},"contentChanges":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":9}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":107,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":107,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":303},"contentChanges":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":108,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":108,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":17}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":304},"contentChanges":[{"range":{"start":{"line":3,"character":11},"end":{"line":3,"character":11}},"rangeLength":0,"text":"*"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":109,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":109,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 825

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":32},"end":{"line":6,"character":33}},"severity":1,"code":"typecheck_invalid_operands","source":"clang","message":"Invalid operands to binary expression ('const char [5]' and 'const char *')"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":305},"contentChanges":[{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"rangeLength":0,"text":" "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":110,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":110,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 825

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":32},"end":{"line":6,"character":33}},"severity":1,"code":"typecheck_invalid_operands","source":"clang","message":"Invalid operands to binary expression ('const char [5]' and 'const char *')"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":305}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":306},"contentChanges":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":13}},"rangeLength":0,"text":"b"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":111,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":111,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 799

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":16}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":307},"contentChanges":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"rangeLength":0,"text":"a"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":112,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":112,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 799

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":17}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":308},"contentChanges":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"rangeLength":0,"text":"r"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":113,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":113,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 799

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":309},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":17}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":114,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 298

{"jsonrpc":"2.0","id":115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 595

{"id":114,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 774

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}Content-Length: 38

{"id":115,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":310},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":17}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":116,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":116,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 774

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":310}}}Content-Length: 230

{"jsonrpc":"2.0","id":118,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":17}}}
>>>
Content-Length: 38

{"id":118,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":119,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":119,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":120,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":0}}}
>>>
Content-Length: 124

{"id":120,"result":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":0}}}
>>>
Content-Length: 124

{"id":121,"result":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":122,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":123,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":10}}}
>>>
Content-Length: 38

{"id":123,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":124,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":16}}}
>>>
Content-Length: 124

{"id":124,"result":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":125,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":20}}}
>>>
Content-Length: 38

{"id":125,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 478

{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"message":"Use of undeclared identifier 'i'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":126,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":311},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":127,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 762

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":312},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":19}},"rangeLength":0,"text":"f"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":128,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":128,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 774

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'f'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":313},"contentChanges":[{"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":129,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":129,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 775

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fo'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":314},"contentChanges":[{"range":{"start":{"line":3,"character":21},"end":{"line":3,"character":21}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":130,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":130,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":22},"end":{"line":3,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":131,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":314}}}Content-Length: 298

{"jsonrpc":"2.0","id":132,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":132,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":11}}}
>>>
Content-Length: 306

{"id":133,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *message = \"0123\" + \u003crecovery - expr\u003e()\n```"},"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":23},"end":{"line":3,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":134,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":3,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":135,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":136,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":136,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":137,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":7}}}
>>>
Content-Length: 40

{"id":137,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":138,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":8}}}
>>>
Content-Length: 38

{"id":138,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":139,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":139,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":140,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":0}}}
>>>
Content-Length: 38

{"id":140,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":141,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":142,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":0}}}
>>>
Content-Length: 40

{"id":142,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":143,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":6}}}
>>>
Content-Length: 40

{"id":143,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":315},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"rangeLength":4,"text":"s"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":144,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":144,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 538

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 's'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":316},"contentChanges":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":1}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":145,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":145,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":317},"contentChanges":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"rangeLength":0,"text":"r"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":145}}Content-Length: 197

{"jsonrpc":"2.0","id":146,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 539

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'st'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}Content-Length: 540

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'str'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":146,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":318},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":147,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":147,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 541

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'stri'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":319},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":148,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 542

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":5}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'strin'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":148,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":320},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"rangeLength":0,"text":"g"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":149,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":149,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1442

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'string'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here"},{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":12}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'String *' with an lvalue of type 'const char [2]'"},{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const char *' with an lvalue of type 'String *'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'String *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":320}}}Content-Length: 665

{"jsonrpc":"2.0","id":150,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"message":"Unknown type name 'string'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here","severity":1,"code":"unknown_typename_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":150,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":151,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":13}}}
>>>
Content-Length: 291

{"id":151,"result":{"contents":{"kind":"markdown","value":"### variable `bar`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *bar = \u003crecovery - expr\u003e(foo)\n```"},"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":152,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":12}}}
>>>
Content-Length: 284

{"id":152,"result":{"contents":{"kind":"markdown","value":"### variable `foo`  \n\n---\nType: `String *`  \n\n---\n```cpp\n// In setup\nString *foo = \u003crecovery - expr\u003e(\"1\")\n```"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":153,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":11}}}
>>>
Content-Length: 284

{"id":153,"result":{"contents":{"kind":"markdown","value":"### variable `foo`  \n\n---\nType: `String *`  \n\n---\n```cpp\n// In setup\nString *foo = \u003crecovery - expr\u003e(\"1\")\n```"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 555

{"jsonrpc":"2.0","id":154,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":12}},"message":"Cannot initialize a variable of type 'String *' with an lvalue of type 'const char [2]'","severity":1,"code":"init_conversion_failed","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 38

{"id":154,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":155,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":2}}}
>>>
Content-Length: 237

{"id":155,"result":{"contents":{"kind":"markdown","value":"### class `String`  \n\n---\nThe string class  \n\n---\n```cpp\nclass String {}\n```"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}}},"jsonrpc":"2.0"}
<<<
Content-Length: 685

{"jsonrpc":"2.0","id":156,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"message":"Unknown type name 'string'; did you mean 'String'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\WString.h:45:7:\nnote: 'String' declared here","severity":1,"code":"unknown_typename_suggest","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 190

{"id":156,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":157,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":19}}}
>>>
Content-Length: 307

{"id":157,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *message = \"0123\" + \u003crecovery - expr\u003e()\n```"},"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":158,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":19}}}
>>>
Content-Length: 219

{"id":158,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":159,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":19}}}
>>>
Content-Length: 307

{"id":159,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *message = \"0123\" + \u003crecovery - expr\u003e()\n```"},"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":321},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"rangeLength":6,"text":"char"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":160,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":160,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":161,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":19}}}
>>>
Content-Length: 307

{"id":161,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *message = \"0123\" + \u003crecovery - expr\u003e()\n```"},"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":162,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":19}}}
>>>
Content-Length: 219

{"id":162,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":163,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":163,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":321}}}Content-Length: 225

{"jsonrpc":"2.0","id":164,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":11}}}
>>>
Content-Length: 40

{"id":164,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":165,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":14}}}
>>>
Content-Length: 262

{"id":165,"result":{"contents":{"kind":"markdown","value":"### variable `bar`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *bar = foo\n```"},"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":166,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":15}}}
>>>
Content-Length: 262

{"id":166,"result":{"contents":{"kind":"markdown","value":"### variable `bar`  \n\n---\nType: `const char *`  \n\n---\n```cpp\n// In setup\nconst char *bar = foo\n```"},"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":167,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":15}}}
>>>
Content-Length: 124

{"id":167,"result":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":168,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":169,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":20}}}
>>>
Content-Length: 280

{"id":169,"result":{"contents":{"kind":"markdown","value":"### variable `foo`  \n\n---\nType: `char *`  \nValue = `\u0026\"1\"[0]`  \n\n---\n```cpp\n// In setup\nchar *foo = \"1\"\n```"},"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":170,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":20}}}
>>>
Content-Length: 280

{"id":170,"result":{"contents":{"kind":"markdown","value":"### variable `foo`  \n\n---\nType: `char *`  \nValue = `\u0026\"1\"[0]`  \n\n---\n```cpp\n// In setup\nchar *foo = \"1\"\n```"},"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":171,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":322},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"rangeLength":0,"text":"[]"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":172,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":172,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":323},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"rangeLength":1,"text":"]"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":172}}Content-Length: 197

{"jsonrpc":"2.0","id":173,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 793

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"severity":1,"code":"array_init_not_init_list","source":"clang","message":"Array initializer must be an initializer list"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":173,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":174,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":323}}}Content-Length: 230

{"jsonrpc":"2.0","id":175,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":21}}}
>>>
Content-Length: 218

{"id":175,"result":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","range":{"start":{"line":2,"character":7},"end":{"line":2,"character":10}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":324},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":18}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":176,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":176,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":177,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":324}}}Content-Length: 225

{"jsonrpc":"2.0","id":178,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":6,"character":34}}}
>>>
Content-Length: 40

{"id":178,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 498

{"jsonrpc":"2.0","id":179,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"message":"Use of undeclared identifier 'j'","severity":1,"code":"undeclared_var_use","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 414

{"id":179,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///C:/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","selection":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":180,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":19}}}
>>>
Content-Length: 280

{"id":180,"result":{"contents":{"kind":"markdown","value":"### variable `foo`  \n\n---\nType: `char *`  \nValue = `\u0026\"1\"[0]`  \n\n---\n```cpp\n// In setup\nchar *foo = \"1\"\n```"},"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":325},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":22}},"rangeLength":3,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":181,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":181,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 762

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":326},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":19}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":182,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":182,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":182}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":327},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"rangeLength":0,"text":" j"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":183,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 774

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":183,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 799

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":328},"contentChanges":[{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":16}},"rangeLength":4,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":184,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":184,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 825

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":32},"end":{"line":6,"character":33}},"severity":1,"code":"typecheck_invalid_operands","source":"clang","message":"Invalid operands to binary expression ('const char [5]' and 'const char *')"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":329},"contentChanges":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":12}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":185,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":185,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":330},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":10}},"rangeLength":4,"text":"int"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":186,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":186,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 593

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"severity":1,"code":"typecheck_call_not_function","source":"clang","message":"Called object type 'char *' is not a function or function pointer"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 326

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":331},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":10}},"rangeLength":3,"text":"message"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":187,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":187,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 913

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:8: note: previous definition is here"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":332},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":18}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":188,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":188,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1345

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'char *' with an rvalue of type 'int'"},{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":20}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:8: note: previous definition is here"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"},{"range":{"start":{"line":6,"character":34},"end":{"line":6,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'j'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":333},"contentChanges":[{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":19}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":189,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":189,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1139

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'char *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'char *'\n\nLibraryTests.ino.cpp:12:8: note: previous definition is here"},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":14}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'char *'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":334},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"rangeLength":0,"text":"int "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":190,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":190,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 1684

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int *' with an rvalue of type 'int'"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"},{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"severity":1,"code":"redefinition_different_type","source":"clang","message":"Redefinition of 'message' with a different type: 'const char *' vs 'int *'\n\nLibraryTests.ino.cpp:12:12: note: previous definition is here"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"severity":3,"message":"Previous definition is here\n\nLibraryTests.ino.cpp:16:16: error: redefinition of 'message' with a different type: 'const char *' vs 'int *'"},{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:8:6: note: candidate function not viable: no known conversion from 'int *' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":335},"contentChanges":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":18}},"rangeLength":7,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":191,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":191,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 763

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":13}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":336},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":11}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":192,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":192,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 763

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":12}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":337},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":10}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":193,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":193,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 762

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"severity":1,"code":"invalid_decl_spec_combination","source":"clang","message":"Cannot combine with previous 'int' declaration specifier"},{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":10}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":338},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":8}},"rangeLength":4,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":194,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":194,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 547

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":6}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'i'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":339},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":195,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 595

{"id":195,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":340},"contentChanges":[{"range":{"start":{"line":6,"character":33},"end":{"line":6,"character":35}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":196,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":6,"character":33},"end":{"line":6,"character":34}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":196,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":341},"contentChanges":[{"range":{"start":{"line":6,"character":31},"end":{"line":6,"character":33}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":197,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 595

{"id":197,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":342},"contentChanges":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":16}},"rangeLength":3,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":198,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 422

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'const int' with an rvalue of type 'void'"}]},"jsonrpc":"2.0"}Content-Length: 595

{"id":198,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":343},"contentChanges":[{"range":{"start":{"line":3,"character":11},"end":{"line":3,"character":13}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":199,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":199,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 621

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":11}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":344},"contentChanges":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":11}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":200,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":200,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 619

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":345},"contentChanges":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":9}},"rangeLength":4,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":201,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 595

{"id":201,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":8,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":10,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":10,"character":5},"end":{"line":10,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 564

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Serial' (fix available)"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":9}},"severity":1,"code":"invalid_operator_on_type","source":"clang","message":"Cannot use dot operator on a type"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":346},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":3,"character":5}},"rangeLength":6,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":202,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 592

{"id":202,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":347},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":10}},"rangeLength":3,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":203,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 414

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'int' with an rvalue of type 'void'"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":203,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":204,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":348},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":7}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":205,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":349},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":206,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":206,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":350},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"o"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":207,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":8}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":207,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":351},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":5}},"rangeLength":2,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":208,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 395

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 592

{"id":208,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":352},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"rangeLength":0,"text":"  "},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":3}},"rangeLength":3,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":209,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 592

{"id":209,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":16,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":353},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":2}},"rangeLength":3,"text":""},{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"rangeLength":0,"text":"  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":210,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 592

{"id":210,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":6,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":8,"character":0},"end":{"line":10,"character":1}},"selectionRange":{"start":{"line":8,"character":5},"end":{"line":8,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":354},"contentChanges":[{"range":{"start":{"line":1,"character":1},"end":{"line":2,"character":2}},"rangeLength":3,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":211,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 591

{"id":211,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":1},"end":{"line":1,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":212,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":354}}}Content-Length: 230

{"jsonrpc":"2.0","id":213,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":26}}}
>>>
Content-Length: 38

{"id":213,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":214,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":20}}}
>>>
Content-Length: 38

{"id":214,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":215,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":17}}}
>>>
Content-Length: 40

{"id":215,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":216,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":20}}}
>>>
Content-Length: 40

{"id":216,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":217,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":21}}}
>>>
Content-Length: 326

{"id":217,"result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud)\n```"},"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":218,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":23}}}
>>>
Content-Length: 40

{"id":218,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","id":219,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":4}}}
>>>
Content-Length: 210

{"id":219,"result":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":22}},"kind":1},{"range":{"start":{"line":4,"character":6},"end":{"line":4,"character":13}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":220,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":220,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":355},"contentChanges":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":7}},"rangeLength":5,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":221,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 591

{"id":221,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":356},"contentChanges":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":222,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 591

{"id":222,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":356}}}Content-Length: 225

{"jsonrpc":"2.0","id":223,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":16}}}
>>>
Content-Length: 293

{"id":223,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `char *`  \nValue = `\u0026\"0123\"[0]`  \n\n---\n```cpp\n// In setup\nchar *message = \"0123\"\n```"},"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":224,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":16}}}
>>>
Content-Length: 209

{"id":224,"result":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":16}},"kind":1},{"range":{"start":{"line":4,"character":6},"end":{"line":4,"character":13}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":225,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":225,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":226,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":10}}}
>>>
Content-Length: 293

{"id":226,"result":{"contents":{"kind":"markdown","value":"### variable `message`  \n\n---\nType: `char *`  \nValue = `\u0026\"0123\"[0]`  \n\n---\n```cpp\n// In setup\nchar *message = \"0123\"\n```"},"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":357},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"rangeLength":0,"text":"[]"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":227,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 591

{"id":227,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":358},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"rangeLength":1,"text":"]"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":227}}Content-Length: 197

{"jsonrpc":"2.0","id":228,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 742

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":16}},"severity":1,"code":"array_init_not_init_list","source":"clang","message":"Array initializer must be an initializer list"},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":5}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'foo'\n\nLibraryTests.ino.cpp:8:6: note: candidate function not viable: cannot convert argument of incomplete type 'char *[]' to 'const char *' for 1st argument"}]},"jsonrpc":"2.0"}Content-Length: 591

{"id":228,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":229,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":229,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":358}}}Content-Length: 224

{"jsonrpc":"2.0","id":230,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":7,"character":8}}}
>>>
Content-Length: 228

{"id":230,"result":{"contents":{"kind":"markdown","value":"### function `loop`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid loop()\n```"},"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":6}}}
>>>
Content-Length: 40

{"id":231,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":232,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":232,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":233,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":3,"character":6}}}
>>>
Content-Length: 40

{"id":233,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":359},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":234,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 192

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 591

{"id":234,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":360},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":235,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 591

{"id":235,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":5,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":7,"character":0},"end":{"line":9,"character":1}},"selectionRange":{"start":{"line":7,"character":5},"end":{"line":7,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":236,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":236,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":360}}}Content-Length: 298

{"jsonrpc":"2.0","id":237,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":23},"end":{"line":2,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":237,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":4,"character":14}}}
>>>
Content-Length: 282

{"id":238,"result":{"contents":{"kind":"markdown","value":"### function `foo`  \n\n---\n→ `void`  \nParameters:  \n- `const char * text`\n\n---\n```cpp\nvoid foo(const char *text)\n```"},"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":239,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":2},"end":{"line":4,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 396

{"id":239,"result":[{"title":"Extract to function","kind":"refactor","command":{"title":"Extract to function","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractFunction","file":"file:///C:/Users/banks/AppData/Local/Temp/arduino-language-server357765459/sketch/LibraryTests.ino.cpp","selection":{"start":{"line":11,"character":2},"end":{"line":13,"character":15}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":240,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":2}}}
>>>
Content-Length: 265

{"id":240,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":361},"contentChanges":[{"range":{"start":{"line":2,"character":2},"end":{"line":4,"character":15}},"rangeLength":64,"text":"M"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":241,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 588

{"id":241,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":362},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"rangeLength":0,"text":"F"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":241}}Content-Length: 197

{"jsonrpc":"2.0","id":242,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 370

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'M'"}]},"jsonrpc":"2.0"}Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MF'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":242,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":363},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"S"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":243,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":243,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 476

{"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"message":"Use of undeclared identifier 'MFS'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":244,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":363}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":364},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"rangeLength":0,"text":"."}]}}Content-Length: 280

{"jsonrpc":"2.0","id":245,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":6},"context":{"triggerKind":2,"triggerCharacter":"."}}}Content-Length: 197

{"jsonrpc":"2.0","id":246,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 69

{"id":245,"result":{"isIncomplete":false,"items":[]},"jsonrpc":"2.0"}Content-Length: 547

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":246,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":247,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":247,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":364}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":365},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":248,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":248,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":249,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":7},"context":{"triggerKind":1}}}
>>>
Content-Length: 69

{"id":249,"result":{"isIncomplete":false,"items":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":250,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":365}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":366},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"rangeLength":0,"text":"n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":251,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":251,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":367},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"rangeLength":0,"text":"i"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":251}}Content-Length: 197

{"jsonrpc":"2.0","id":252,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":252,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","id":253,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":253,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":367}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":368},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":254,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":254,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":369},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":255,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":255,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":370},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":7}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":256,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 588

{"id":256,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 547

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":371},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":6}},"rangeLength":1,"text":""}]}}Content-Length: 197

{"jsonrpc":"2.0","id":257,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":257,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 476

{"jsonrpc":"2.0","id":258,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"message":"Use of undeclared identifier 'MFS'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":258,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":371}}}Content-Length: 198

{"jsonrpc":"2.0","id":259,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":259,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":260,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":504,"character":18}}}
>>>
Content-Length: 233

{"id":260,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":504,"character":5},"end":{"line":504,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":261,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":41}}}
>>>
Content-Length: 38

{"id":261,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":262,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":24,"character":40}}}
>>>
Content-Length: 40

{"id":262,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":263,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":18}}}
>>>
Content-Length: 256

{"id":263,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nMultiFuncShield MFS\n```"},"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"jsonrpc":"2.0","id":264,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":18}}}
>>>
Content-Length: 213

{"id":264,"result":[{"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}},"kind":1},{"range":{"start":{"line":954,"character":2},"end":{"line":954,"character":5}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"jsonrpc":"2.0","id":265,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":18}}}
>>>
Content-Length: 218

{"id":265,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 226

{"jsonrpc":"2.0","id":266,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":17}}}
>>>
Content-Length: 256

{"id":266,"result":{"contents":{"kind":"markdown","value":"### variable `MFS`  \n\n---\nType: `class MultiFuncShield`  \n\n---\n```cpp\nMultiFuncShield MFS\n```"},"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":267,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":6}}}
>>>
Content-Length: 217

{"id":267,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 181

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":268,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":6}}}
>>>
Content-Length: 229

{"id":268,"result":{"contents":{"kind":"markdown","value":"### class `MultiFuncShield`  \n\n---\n```cpp\nclass MultiFuncShield {}\n```"},"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","id":269,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":7}}}
>>>
Content-Length: 2647

{"id":269,"result":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":15}},"kind":1},{"range":{"start":{"line":105,"character":5},"end":{"line":105,"character":20}},"kind":1},{"range":{"start":{"line":115,"character":5},"end":{"line":115,"character":20}},"kind":1},{"range":{"start":{"line":128,"character":13},"end":{"line":128,"character":28}},"kind":1},{"range":{"start":{"line":184,"character":5},"end":{"line":184,"character":20}},"kind":1},{"range":{"start":{"line":197,"character":4},"end":{"line":197,"character":19}},"kind":1},{"range":{"start":{"line":251,"character":5},"end":{"line":251,"character":20}},"kind":1},{"range":{"start":{"line":272,"character":5},"end":{"line":272,"character":20}},"kind":1},{"range":{"start":{"line":278,"character":13},"end":{"line":278,"character":28}},"kind":1},{"range":{"start":{"line":291,"character":14},"end":{"line":291,"character":29}},"kind":1},{"range":{"start":{"line":304,"character":5},"end":{"line":304,"character":20}},"kind":1},{"range":{"start":{"line":314,"character":5},"end":{"line":314,"character":20}},"kind":1},{"range":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":1},{"range":{"start":{"line":340,"character":5},"end":{"line":340,"character":20}},"kind":1},{"range":{"start":{"line":361,"character":5},"end":{"line":361,"character":20}},"kind":1},{"range":{"start":{"line":388,"character":5},"end":{"line":388,"character":20}},"kind":1},{"range":{"start":{"line":413,"character":5},"end":{"line":413,"character":20}},"kind":1},{"range":{"start":{"line":429,"character":5},"end":{"line":429,"character":20}},"kind":1},{"range":{"start":{"line":442,"character":5},"end":{"line":442,"character":20}},"kind":1},{"range":{"start":{"line":449,"character":5},"end":{"line":449,"character":20}},"kind":1},{"range":{"start":{"line":489,"character":5},"end":{"line":489,"character":20}},"kind":1},{"range":{"start":{"line":504,"character":5},"end":{"line":504,"character":20}},"kind":1},{"range":{"start":{"line":570,"character":5},"end":{"line":570,"character":20}},"kind":1},{"range":{"start":{"line":584,"character":5},"end":{"line":584,"character":20}},"kind":1},{"range":{"start":{"line":597,"character":14},"end":{"line":597,"character":29}},"kind":1},{"range":{"start":{"line":609,"character":5},"end":{"line":609,"character":20}},"kind":1},{"range":{"start":{"line":617,"character":5},"end":{"line":617,"character":20}},"kind":1},{"range":{"start":{"line":905,"character":5},"end":{"line":905,"character":20}},"kind":1},{"range":{"start":{"line":918,"character":5},"end":{"line":918,"character":20}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"jsonrpc":"2.0","id":270,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"},"position":{"line":6,"character":7}}}
>>>
Content-Length: 217

{"id":270,"result":[{"uri":"file:///C:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","range":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initializes this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 196

{"jsonrpc":"2.0","id":271,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"}}}
>>>
Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 15044

{"id":271,"result":[{"name":"MultiFuncShield","kind":5,"range":{"start":{"line":63,"character":0},"end":{"line":212,"character":1}},"selectionRange":{"start":{"line":63,"character":6},"end":{"line":63,"character":21}},"children":[{"name":"userInterrupt","kind":8,"range":{"start":{"line":68,"character":4},"end":{"line":68,"character":34}},"selectionRange":{"start":{"line":68,"character":11},"end":{"line":68,"character":24}}},{"name":"initialize","kind":6,"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":21}},"selectionRange":{"start":{"line":71,"character":9},"end":{"line":71,"character":19}}},{"name":"isrCallBack","kind":6,"range":{"start":{"line":74,"character":4},"end":{"line":74,"character":22}},"selectionRange":{"start":{"line":74,"character":9},"end":{"line":74,"character":20}}},{"name":"setTimer","kind":6,"range":{"start":{"line":77,"character":4},"end":{"line":77,"character":45}},"selectionRange":{"start":{"line":77,"character":9},"end":{"line":77,"character":17}}},{"name":"getTimer","kind":6,"range":{"start":{"line":80,"character":4},"end":{"line":80,"character":28}},"selectionRange":{"start":{"line":80,"character":18},"end":{"line":80,"character":26}}},{"name":"wait","kind":6,"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":40}},"selectionRange":{"start":{"line":83,"character":9},"end":{"line":83,"character":13}}},{"name":"write","kind":6,"range":{"start":{"line":86,"character":4},"end":{"line":86,"character":60}},"selectionRange":{"start":{"line":86,"character":9},"end":{"line":86,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":87,"character":4},"end":{"line":87,"character":27}},"selectionRange":{"start":{"line":87,"character":9},"end":{"line":87,"character":14}}},{"name":"write","kind":6,"range":{"start":{"line":88,"character":4},"end":{"line":88,"character":52}},"selectionRange":{"start":{"line":88,"character":9},"end":{"line":88,"character":14}}},{"name":"manualDisplayRefresh","kind":6,"range":{"start":{"line":92,"character":4},"end":{"line":92,"character":31}},"selectionRange":{"start":{"line":92,"character":9},"end":{"line":92,"character":29}}},{"name":"blinkDisplay","kind":6,"range":{"start":{"line":95,"character":4},"end":{"line":97,"character":21}},"selectionRange":{"start":{"line":95,"character":9},"end":{"line":95,"character":21}}},{"name":"setDisplayBrightness","kind":6,"range":{"start":{"line":99,"character":4},"end":{"line":99,"character":41}},"selectionRange":{"start":{"line":99,"character":9},"end":{"line":99,"character":29}}},{"name":"writeLeds","kind":6,"range":{"start":{"line":102,"character":4},"end":{"line":104,"character":20}},"selectionRange":{"start":{"line":102,"character":9},"end":{"line":102,"character":18}}},{"name":"blinkLeds","kind":6,"range":{"start":{"line":107,"character":4},"end":{"line":109,"character":20}},"selectionRange":{"start":{"line":107,"character":9},"end":{"line":107,"character":18}}},{"name":"beep","kind":6,"range":{"start":{"line":112,"character":4},"end":{"line":112,"character":169}},"selectionRange":{"start":{"line":112,"character":9},"end":{"line":112,"character":13}}},{"name":"setBeepOffPeriod","kind":6,"range":{"start":{"line":115,"character":4},"end":{"line":115,"character":49}},"selectionRange":{"start":{"line":115,"character":9},"end":{"line":115,"character":25}}},{"name":"queueButton","kind":6,"range":{"start":{"line":118,"character":4},"end":{"line":118,"character":34}},"selectionRange":{"start":{"line":118,"character":9},"end":{"line":118,"character":20}}},{"name":"getButton","kind":6,"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":20}},"selectionRange":{"start":{"line":121,"character":9},"end":{"line":121,"character":18}}},{"name":"manualButtonHandler","kind":6,"range":{"start":{"line":125,"character":4},"end":{"line":125,"character":30}},"selectionRange":{"start":{"line":125,"character":9},"end":{"line":125,"character":28}}},{"name":"initPulseInCounter","kind":6,"range":{"start":{"line":128,"character":4},"end":{"line":131,"character":29}},"selectionRange":{"start":{"line":128,"character":9},"end":{"line":128,"character":27}}},{"name":"disablePulseInCounter","kind":6,"range":{"start":{"line":133,"character":4},"end":{"line":133,"character":32}},"selectionRange":{"start":{"line":133,"character":9},"end":{"line":133,"character":30}}},{"name":"getPulseInPeriod","kind":6,"range":{"start":{"line":136,"character":4},"end":{"line":136,"character":35}},"selectionRange":{"start":{"line":136,"character":17},"end":{"line":136,"character":33}}},{"name":"getPulseInTotalCount","kind":6,"range":{"start":{"line":139,"character":4},"end":{"line":139,"character":40}},"selectionRange":{"start":{"line":139,"character":18},"end":{"line":139,"character":38}}},{"name":"resetPulseInTotalCount","kind":6,"range":{"start":{"line":142,"character":4},"end":{"line":142,"character":33}},"selectionRange":{"start":{"line":142,"character":9},"end":{"line":142,"character":31}}},{"name":"setPulseInTimeOut","kind":6,"range":{"start":{"line":145,"character":4},"end":{"line":145,"character":48}},"selectionRange":{"start":{"line":145,"character":9},"end":{"line":145,"character":26}}},{"name":"initSonar","kind":6,"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":51}},"selectionRange":{"start":{"line":148,"character":9},"end":{"line":148,"character":18}}},{"name":"getSonarDataCm","kind":6,"range":{"start":{"line":151,"character":4},"end":{"line":151,"character":62}},"selectionRange":{"start":{"line":151,"character":17},"end":{"line":151,"character":31}}},{"name":"initLM35","kind":6,"range":{"start":{"line":154,"character":4},"end":{"line":154,"character":50}},"selectionRange":{"start":{"line":154,"character":9},"end":{"line":154,"character":17}}},{"name":"getLM35Data","kind":6,"range":{"start":{"line":157,"character":4},"end":{"line":157,"character":21}},"selectionRange":{"start":{"line":157,"character":8},"end":{"line":157,"character":19}}},{"name":"timerReadInProgress","kind":8,"range":{"start":{"line":160,"character":4},"end":{"line":160,"character":41}},"selectionRange":{"start":{"line":160,"character":18},"end":{"line":160,"character":37}}},{"name":"timerWriteInProgress","kind":8,"range":{"start":{"line":161,"character":4},"end":{"line":161,"character":42}},"selectionRange":{"start":{"line":161,"character":18},"end":{"line":161,"character":38}}},{"name":"buttonBuffer","kind":8,"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":48}},"selectionRange":{"start":{"line":165,"character":18},"end":{"line":165,"character":30}}},{"name":"buttonBufferCount","kind":8,"range":{"start":{"line":166,"character":4},"end":{"line":166,"character":39}},"selectionRange":{"start":{"line":166,"character":18},"end":{"line":166,"character":35}}},{"name":"button_write_pos","kind":8,"range":{"start":{"line":167,"character":4},"end":{"line":167,"character":38}},"selectionRange":{"start":{"line":167,"character":18},"end":{"line":167,"character":34}}},{"name":"button_read_pos","kind":8,"range":{"start":{"line":168,"character":4},"end":{"line":168,"character":37}},"selectionRange":{"start":{"line":168,"character":18},"end":{"line":168,"character":33}}},{"name":"buttonSampleIntervalCounter","kind":8,"range":{"start":{"line":170,"character":4},"end":{"line":170,"character":47}},"selectionRange":{"start":{"line":170,"character":17},"end":{"line":170,"character":44}}},{"name":"buttonState","kind":8,"range":{"start":{"line":171,"character":4},"end":{"line":171,"character":44}},"selectionRange":{"start":{"line":171,"character":9},"end":{"line":171,"character":20}}},{"name":"buttonPressTime","kind":8,"range":{"start":{"line":172,"character":4},"end":{"line":172,"character":56}},"selectionRange":{"start":{"line":172,"character":17},"end":{"line":172,"character":32}}},{"name":"timer_volatile","kind":8,"range":{"start":{"line":174,"character":4},"end":{"line":174,"character":45}},"selectionRange":{"start":{"line":174,"character":27},"end":{"line":174,"character":41}}},{"name":"timer_safe","kind":8,"range":{"start":{"line":175,"character":4},"end":{"line":175,"character":41}},"selectionRange":{"start":{"line":175,"character":27},"end":{"line":175,"character":37}}},{"name":"beeperModifyInProgress","kind":8,"range":{"start":{"line":177,"character":4},"end":{"line":177,"character":44}},"selectionRange":{"start":{"line":177,"character":18},"end":{"line":177,"character":40}}},{"name":"beeperState","kind":8,"range":{"start":{"line":178,"character":4},"end":{"line":178,"character":32}},"selectionRange":{"start":{"line":178,"character":18},"end":{"line":178,"character":29}}},{"name":"beeperOnPeriodReloadValue","kind":8,"range":{"start":{"line":179,"character":4},"end":{"line":179,"character":54}},"selectionRange":{"start":{"line":179,"character":26},"end":{"line":179,"character":51}}},{"name":"beeperOffPeriodReloadValue","kind":8,"range":{"start":{"line":180,"character":4},"end":{"line":180,"character":55}},"selectionRange":{"start":{"line":180,"character":26},"end":{"line":180,"character":52}}},{"name":"beeperPeriodCounter","kind":8,"range":{"start":{"line":181,"character":4},"end":{"line":181,"character":49}},"selectionRange":{"start":{"line":181,"character":26},"end":{"line":181,"character":45}}},{"name":"beeperCycleReloadValue","kind":8,"range":{"start":{"line":182,"character":4},"end":{"line":182,"character":44}},"selectionRange":{"start":{"line":182,"character":18},"end":{"line":182,"character":40}}},{"name":"beeperCycleCounter","kind":8,"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":39}},"selectionRange":{"start":{"line":183,"character":18},"end":{"line":183,"character":36}}},{"name":"beeperLoopCycleCounter","kind":8,"range":{"start":{"line":184,"character":4},"end":{"line":184,"character":51}},"selectionRange":{"start":{"line":184,"character":26},"end":{"line":184,"character":48}}},{"name":"beeperLoopDelayPeriodReloadValue","kind":8,"range":{"start":{"line":185,"character":4},"end":{"line":185,"character":61}},"selectionRange":{"start":{"line":185,"character":26},"end":{"line":185,"character":58}}},{"name":"displayIdx","kind":8,"range":{"start":{"line":187,"character":4},"end":{"line":187,"character":23}},"selectionRange":{"start":{"line":187,"character":9},"end":{"line":187,"character":19}}},{"name":"blinkEnabled","kind":8,"range":{"start":{"line":188,"character":4},"end":{"line":188,"character":25}},"selectionRange":{"start":{"line":188,"character":9},"end":{"line":188,"character":21}}},{"name":"blinkState","kind":8,"range":{"start":{"line":189,"character":4},"end":{"line":189,"character":23}},"selectionRange":{"start":{"line":189,"character":9},"end":{"line":189,"character":19}}},{"name":"blinkCounter","kind":8,"range":{"start":{"line":190,"character":4},"end":{"line":190,"character":25}},"selectionRange":{"start":{"line":190,"character":9},"end":{"line":190,"character":21}}},{"name":"ledState","kind":8,"range":{"start":{"line":192,"character":4},"end":{"line":192,"character":20}},"selectionRange":{"start":{"line":192,"character":9},"end":{"line":192,"character":17}}},{"name":"ledBlinkEnabled","kind":8,"range":{"start":{"line":193,"character":4},"end":{"line":193,"character":27}},"selectionRange":{"start":{"line":193,"character":9},"end":{"line":193,"character":24}}},{"name":"ledOutput","kind":8,"range":{"start":{"line":194,"character":4},"end":{"line":194,"character":20}},"selectionRange":{"start":{"line":194,"character":9},"end":{"line":194,"character":18}}},{"name":"pulseInEnabled","kind":8,"range":{"start":{"line":196,"character":4},"end":{"line":196,"character":40}},"selectionRange":{"start":{"line":196,"character":18},"end":{"line":196,"character":32}}},{"name":"pulseInReadInProgress","kind":8,"range":{"start":{"line":197,"character":4},"end":{"line":197,"character":42}},"selectionRange":{"start":{"line":197,"character":18},"end":{"line":197,"character":39}}},{"name":"pulseInWriteInProgress","kind":8,"range":{"start":{"line":198,"character":4},"end":{"line":198,"character":43}},"selectionRange":{"start":{"line":198,"character":18},"end":{"line":198,"character":40}}},{"name":"pulseInTimeOut","kind":8,"range":{"start":{"line":200,"character":4},"end":{"line":200,"character":47}},"selectionRange":{"start":{"line":200,"character":26},"end":{"line":200,"character":40}}},{"name":"pulseInPin","kind":8,"range":{"start":{"line":201,"character":4},"end":{"line":201,"character":43}},"selectionRange":{"start":{"line":201,"character":18},"end":{"line":201,"character":28}}},{"name":"pulseInPeriodCounter","kind":8,"range":{"start":{"line":202,"character":4},"end":{"line":202,"character":53}},"selectionRange":{"start":{"line":202,"character":26},"end":{"line":202,"character":46}}},{"name":"pulseInTrigger","kind":8,"range":{"start":{"line":203,"character":4},"end":{"line":203,"character":38}},"selectionRange":{"start":{"line":203,"character":18},"end":{"line":203,"character":32}}},{"name":"pulseInPeriod_volatile","kind":8,"range":{"start":{"line":204,"character":4},"end":{"line":204,"character":51}},"selectionRange":{"start":{"line":204,"character":26},"end":{"line":204,"character":48}}},{"name":"pulseInPeriod_safe","kind":8,"range":{"start":{"line":205,"character":4},"end":{"line":205,"character":47}},"selectionRange":{"start":{"line":205,"character":26},"end":{"line":205,"character":44}}},{"name":"pulseInState","kind":8,"range":{"start":{"line":206,"character":4},"end":{"line":206,"character":33}},"selectionRange":{"start":{"line":206,"character":18},"end":{"line":206,"character":30}}},{"name":"pulseInTotalCount_volatile","kind":8,"range":{"start":{"line":207,"character":4},"end":{"line":207,"character":57}},"selectionRange":{"start":{"line":207,"character":27},"end":{"line":207,"character":53}}},{"name":"pulseInTotalCount_safe","kind":8,"range":{"start":{"line":208,"character":4},"end":{"line":208,"character":53}},"selectionRange":{"start":{"line":208,"character":27},"end":{"line":208,"character":49}}},{"name":"sonarSmoothingLevel","kind":8,"range":{"start":{"line":210,"character":4},"end":{"line":210,"character":49}},"selectionRange":{"start":{"line":210,"character":9},"end":{"line":210,"character":28}}},{"name":"lm35SmoothingLevel","kind":8,"range":{"start":{"line":211,"character":4},"end":{"line":211,"character":48}},"selectionRange":{"start":{"line":211,"character":9},"end":{"line":211,"character":27}}}]},{"name":"MFS","kind":13,"range":{"start":{"line":214,"character":0},"end":{"line":214,"character":26}},"selectionRange":{"start":{"line":214,"character":23},"end":{"line":214,"character":26}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":217,"character":0},"end":{"line":217,"character":60}},"selectionRange":{"start":{"line":217,"character":11},"end":{"line":217,"character":20}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":220,"character":0},"end":{"line":220,"character":92}},"selectionRange":{"start":{"line":220,"character":11},"end":{"line":220,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"jsonrpc":"2.0","id":272,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h"},"position":{"line":71,"character":11}}}
>>>
Content-Length: 359

{"id":272,"result":{"contents":{"kind":"markdown","value":"### instance-method `initialize`  \n\n---\n→ `void`  \nInitializes this instance, but interrupt based features are not available.  \n\n---\n```cpp\n// In MultiFuncShield\npublic: void initialize()\n```"},"range":{"start":{"line":71,"character":9},"end":{"line":71,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":273,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp"}}}
>>>
Content-Length: 13264

{"id":273,"result":[{"name":"MFS","kind":13,"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":19}},"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":19}}},{"name":"LED","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":63}},"selectionRange":{"start":{"line":10,"character":11},"end":{"line":10,"character":14}}},{"name":"SEGMENT_MAP_DIGIT","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":84}},"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":28}}},{"name":"SEGMENT_MAP_ALPHA","kind":13,"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":163}},"selectionRange":{"start":{"line":15,"character":11},"end":{"line":15,"character":28}}},{"name":"SEGMENT_SELECT","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":51}},"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":25}}},{"name":"DISPLAY_OVERFLOW_ERROR","kind":13,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":39}},"selectionRange":{"start":{"line":19,"character":11},"end":{"line":19,"character":33}}},{"name":"BLINK_ON_COUNT","kind":13,"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":30}},"selectionRange":{"start":{"line":21,"character":11},"end":{"line":21,"character":25}}},{"name":"BLINK_OFF_COUNT","kind":13,"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":31}},"selectionRange":{"start":{"line":22,"character":11},"end":{"line":22,"character":26}}},{"name":"displayMemory","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":50}},"selectionRange":{"start":{"line":24,"character":14},"end":{"line":24,"character":27}}},{"name":"displayTimerScaler","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":62}},"selectionRange":{"start":{"line":28,"character":14},"end":{"line":28,"character":32}}},{"name":"displayBrightness","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":35}},"selectionRange":{"start":{"line":29,"character":14},"end":{"line":29,"character":31}}},{"name":"sonarData","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":16}},"selectionRange":{"start":{"line":33,"character":4},"end":{"line":33,"character":13}}},{"name":"sonarDataIndex","kind":13,"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":23}},"selectionRange":{"start":{"line":34,"character":5},"end":{"line":34,"character":19}}},{"name":"lm35Data","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":15}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":12}}},{"name":"lm35DataIndex","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":22}},"selectionRange":{"start":{"line":39,"character":5},"end":{"line":39,"character":18}}},{"name":"isrWrapper","kind":12,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":18}},"selectionRange":{"start":{"line":42,"character":5},"end":{"line":42,"character":15}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":50}},"selectionRange":{"start":{"line":43,"character":5},"end":{"line":43,"character":24}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":37}},"selectionRange":{"start":{"line":44,"character":5},"end":{"line":44,"character":24}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":29}},"selectionRange":{"start":{"line":45,"character":5},"end":{"line":45,"character":16}}},{"name":"readButton","kind":12,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":31}},"selectionRange":{"start":{"line":46,"character":5},"end":{"line":46,"character":15}}},{"name":"writeLed","kind":12,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"selectionRange":{"start":{"line":47,"character":5},"end":{"line":47,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":85}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":13}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":53}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":13}}},{"name":"pulseInBit","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":18}},"selectionRange":{"start":{"line":53,"character":8},"end":{"line":53,"character":18}}},{"name":"pulseInPort","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":19}},"selectionRange":{"start":{"line":54,"character":8},"end":{"line":54,"character":19}}},{"name":"buttonPort","kind":13,"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":21}},"selectionRange":{"start":{"line":57,"character":8},"end":{"line":57,"character":18}}},{"name":"buttonBit","kind":13,"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":20}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":17}}},{"name":"initShield","kind":12,"range":{"start":{"line":61,"character":0},"end":{"line":101,"character":1}},"selectionRange":{"start":{"line":61,"character":5},"end":{"line":61,"character":15}}},{"name":"MultiFuncShield::initialize","kind":6,"range":{"start":{"line":105,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":105,"character":22},"end":{"line":105,"character":32}}},{"name":"MultiFuncShield::initSonar","kind":6,"range":{"start":{"line":115,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":115,"character":22},"end":{"line":115,"character":31}}},{"name":"MultiFuncShield::getSonarDataCm","kind":6,"range":{"start":{"line":128,"character":0},"end":{"line":180,"character":1}},"selectionRange":{"start":{"line":128,"character":30},"end":{"line":128,"character":44}}},{"name":"MultiFuncShield::initLM35","kind":6,"range":{"start":{"line":184,"character":0},"end":{"line":193,"character":1}},"selectionRange":{"start":{"line":184,"character":22},"end":{"line":184,"character":30}}},{"name":"MultiFuncShield::getLM35Data","kind":6,"range":{"start":{"line":197,"character":0},"end":{"line":247,"character":1}},"selectionRange":{"start":{"line":197,"character":21},"end":{"line":197,"character":32}}},{"name":"MultiFuncShield::initPulseInCounter","kind":6,"range":{"start":{"line":251,"character":0},"end":{"line":270,"character":1}},"selectionRange":{"start":{"line":251,"character":22},"end":{"line":251,"character":40}}},{"name":"MultiFuncShield::disablePulseInCounter","kind":6,"range":{"start":{"line":272,"character":0},"end":{"line":275,"character":1}},"selectionRange":{"start":{"line":272,"character":22},"end":{"line":272,"character":43}}},{"name":"MultiFuncShield::getPulseInPeriod","kind":6,"range":{"start":{"line":278,"character":0},"end":{"line":287,"character":1}},"selectionRange":{"start":{"line":278,"character":30},"end":{"line":278,"character":46}}},{"name":"MultiFuncShield::getPulseInTotalCount","kind":6,"range":{"start":{"line":291,"character":0},"end":{"line":300,"character":1}},"selectionRange":{"start":{"line":291,"character":31},"end":{"line":291,"character":51}}},{"name":"MultiFuncShield::resetPulseInTotalCount","kind":6,"range":{"start":{"line":304,"character":0},"end":{"line":310,"character":1}},"selectionRange":{"start":{"line":304,"character":22},"end":{"line":304,"character":44}}},{"name":"MultiFuncShield::setPulseInTimeOut","kind":6,"range":{"start":{"line":314,"character":0},"end":{"line":319,"character":1}},"selectionRange":{"start":{"line":314,"character":22},"end":{"line":314,"character":39}}},{"name":"MultiFuncShield::queueButton","kind":6,"range":{"start":{"line":323,"character":0},"end":{"line":336,"character":1}},"selectionRange":{"start":{"line":323,"character":22},"end":{"line":323,"character":33}}},{"name":"MultiFuncShield::getButton","kind":6,"range":{"start":{"line":340,"character":0},"end":{"line":357,"character":1}},"selectionRange":{"start":{"line":340,"character":22},"end":{"line":340,"character":31}}},{"name":"MultiFuncShield::beep","kind":6,"range":{"start":{"line":361,"character":0},"end":{"line":384,"character":1}},"selectionRange":{"start":{"line":361,"character":22},"end":{"line":361,"character":26}}},{"name":"MultiFuncShield::setBeepOffPeriod","kind":6,"range":{"start":{"line":388,"character":0},"end":{"line":402,"character":1}},"selectionRange":{"start":{"line":388,"character":22},"end":{"line":388,"character":38}}},{"name":"MultiFuncShield::writeLeds","kind":6,"range":{"start":{"line":413,"character":0},"end":{"line":425,"character":1}},"selectionRange":{"start":{"line":413,"character":22},"end":{"line":413,"character":31}}},{"name":"MultiFuncShield::blinkLeds","kind":6,"range":{"start":{"line":429,"character":0},"end":{"line":439,"character":1}},"selectionRange":{"start":{"line":429,"character":22},"end":{"line":429,"character":31}}},{"name":"MultiFuncShield::setDisplayBrightness","kind":6,"range":{"start":{"line":442,"character":0},"end":{"line":445,"character":1}},"selectionRange":{"start":{"line":442,"character":22},"end":{"line":442,"character":42}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":449,"character":0},"end":{"line":485,"character":1}},"selectionRange":{"start":{"line":449,"character":22},"end":{"line":449,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":489,"character":0},"end":{"line":500,"character":1}},"selectionRange":{"start":{"line":489,"character":22},"end":{"line":489,"character":27}}},{"name":"MultiFuncShield::write","kind":6,"range":{"start":{"line":504,"character":0},"end":{"line":566,"character":1}},"selectionRange":{"start":{"line":504,"character":22},"end":{"line":504,"character":27}}},{"name":"MultiFuncShield::blinkDisplay","kind":6,"range":{"start":{"line":570,"character":0},"end":{"line":580,"character":1}},"selectionRange":{"start":{"line":570,"character":22},"end":{"line":570,"character":34}}},{"name":"MultiFuncShield::setTimer","kind":6,"range":{"start":{"line":584,"character":0},"end":{"line":593,"character":1}},"selectionRange":{"start":{"line":584,"character":22},"end":{"line":584,"character":30}}},{"name":"MultiFuncShield::getTimer","kind":6,"range":{"start":{"line":597,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":597,"character":31},"end":{"line":597,"character":39}}},{"name":"MultiFuncShield::wait","kind":6,"range":{"start":{"line":609,"character":0},"end":{"line":613,"character":1}},"selectionRange":{"start":{"line":609,"character":22},"end":{"line":609,"character":26}}},{"name":"MultiFuncShield::isrCallBack","kind":6,"range":{"start":{"line":617,"character":0},"end":{"line":901,"character":1}},"selectionRange":{"start":{"line":617,"character":22},"end":{"line":617,"character":33}}},{"name":"MultiFuncShield::manualDisplayRefresh","kind":6,"range":{"start":{"line":905,"character":0},"end":{"line":914,"character":1}},"selectionRange":{"start":{"line":905,"character":22},"end":{"line":905,"character":42}}},{"name":"MultiFuncShield::manualButtonHandler","kind":6,"range":{"start":{"line":918,"character":0},"end":{"line":943,"character":1}},"selectionRange":{"start":{"line":918,"character":22},"end":{"line":918,"character":41}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"__vector_14","kind":12,"range":{"start":{"line":952,"character":0},"end":{"line":955,"character":1}},"selectionRange":{"start":{"line":952,"character":0},"end":{"line":952,"character":6}}},{"name":"AsciiToSegmentValue","kind":12,"range":{"start":{"line":958,"character":0},"end":{"line":994,"character":1}},"selectionRange":{"start":{"line":958,"character":5},"end":{"line":958,"character":24}}},{"name":"MedianOf5","kind":12,"range":{"start":{"line":997,"character":0},"end":{"line":1049,"character":1}},"selectionRange":{"start":{"line":997,"character":4},"end":{"line":997,"character":13}}},{"name":"MedianOf9","kind":12,"range":{"start":{"line":1054,"character":0},"end":{"line":1184,"character":1}},"selectionRange":{"start":{"line":1054,"character":4},"end":{"line":1054,"character":13}}},{"name":"WriteValueToSegment","kind":12,"range":{"start":{"line":1191,"character":2},"end":{"line":1208,"character":3}},"selectionRange":{"start":{"line":1191,"character":7},"end":{"line":1191,"character":26}}},{"name":"writeBeeper","kind":12,"range":{"start":{"line":1210,"character":2},"end":{"line":1213,"character":3}},"selectionRange":{"start":{"line":1210,"character":7},"end":{"line":1210,"character":18}}},{"name":"writeLed","kind":12,"range":{"start":{"line":1215,"character":2},"end":{"line":1232,"character":3}},"selectionRange":{"start":{"line":1215,"character":7},"end":{"line":1215,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":274,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 588

{"id":274,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"jsonrpc":"2.0","id":275,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":4}}}
>>>
Content-Length: 40

{"id":275,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 496

{"jsonrpc":"2.0","id":276,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"message":"Use of undeclared identifier 'MFS'","severity":1,"code":"undeclared_var_use","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 38

{"id":276,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":372},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"rangeLength":0,"text":"."}]}}Content-Length: 280

{"jsonrpc":"2.0","id":277,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":6},"context":{"triggerKind":2,"triggerCharacter":"."}}}Content-Length: 197

{"jsonrpc":"2.0","id":278,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 69

{"id":277,"result":{"isIncomplete":false,"items":[]},"jsonrpc":"2.0"}Content-Length: 588

{"id":278,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 547

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":373},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":279,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":279,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":374},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"rangeLength":0,"text":"n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":280,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":280,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":375},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":281,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":281,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":376},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"rangeLength":0,"text":"t"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":282,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":282,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":377},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":283,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":283,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":378},"contentChanges":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":11}},"rangeLength":0,"text":"a"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":284,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":284,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":379},"contentChanges":[{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":12}},"rangeLength":0,"text":"l"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":285,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":285,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":380},"contentChanges":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":13}},"rangeLength":0,"text":"i"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":286,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":286,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":287,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":287,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":380}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":381},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"rangeLength":0,"text":"z"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":288,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":288,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":382},"contentChanges":[{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"rangeLength":0,"text":"e"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":289,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":289,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":290,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":290,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":382}}}Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":383},"contentChanges":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"rangeLength":0,"text":"()"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":291,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":291,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","id":292,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":17},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 93

{"id":292,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":384},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":18}},"rangeLength":1,"text":")"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":293,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 588

{"id":293,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":294,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":18},"context":{"isRetrigger":true,"triggerKind":3}}}
>>>
Content-Length: 93

{"id":294,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":295,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":295,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":384}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":385},"contentChanges":[{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"rangeLength":0,"text":";"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":296,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 588

{"id":296,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","id":297,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":297,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":385}}}Content-Length: 296

{"jsonrpc":"2.0","id":298,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":1,"character":1},"end":{"line":1,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":298,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":386},"contentChanges":[{"range":{"start":{"line":1,"character":1},"end":{"line":1,"character":1}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 197

{"jsonrpc":"2.0","id":299,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3131

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":22928,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"c:\\Users\\banks\\Documents\\Arduino\\Multifunction Shield\\LibraryTests","rootUri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests","name":"LibraryTests"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 349

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","languageId":"cpp","version":386,"text":"void setup()\n{\n  \n  MFS.initialize();\n}\n\nvoid loop()\n{\n}\n\nvoid foo(const char *text)\n{\n  Serial.println(text);\n}"}}}Content-Length: 34007

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","languageId":"cpp","version":1,"text":"#include \"MultiFuncShield.h\"\r\n\r\n#define BUTTON_SAMPLE_INTERVAL_SCALE  20\r\n#define BUTTON_SAMPLE_INTERVAL  (1000 / BUTTON_SAMPLE_INTERVAL_SCALE)\r\n\r\n\r\nMultiFuncShield MFS;\r\n\r\n// Display specific variables\r\n\r\nconst byte LED[] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};\r\n\r\n/* Segment byte maps for numbers 0 to 9 */\r\nconst byte SEGMENT_MAP_DIGIT[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0X80,0X90};\r\n/* Segment byte maps for alpha a-z */\r\nconst byte SEGMENT_MAP_ALPHA[] = {136, 131, 167, 161, 134, 142, 144, 139 ,207, 241, 182, 199, 182, 171, 163, 140, 152, 175, 146, 135, 227, 182, 182, 182, 145, 182};\r\n\r\n/* Byte maps to select digit 1 to 4 */\r\nconst byte SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};\r\nconst char DISPLAY_OVERFLOW_ERROR = 'E';\r\n\r\nconst byte BLINK_ON_COUNT = 65;\r\nconst byte BLINK_OFF_COUNT = 20;\r\n\r\nvolatile byte displayMemory[4] = {255,255,255,255};\r\n\r\n#define\tDISPLAY_TIMER_SCALER_RELOAD\t4\r\n\r\nvolatile byte displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\nvolatile byte displayBrightness = 0;\r\n\r\n// Sonar ranger specific variables\r\n\r\nint sonarData[9];\r\nbyte sonarDataIndex = 0;\r\n\r\n// LM35 specific variables\r\n\r\nint lm35Data[8];\r\nbyte lm35DataIndex = 0;\r\n\r\n// Misc methods and functions.\r\nvoid isrWrapper ();\r\nvoid WriteValueToSegment(byte Segment, byte Value);\r\nbyte AsciiToSegmentValue (byte ascii);\r\nvoid writeBeeper (byte value);\r\nbyte readButton (byte btnIndex);\r\nvoid writeLed(byte ledIdx, byte value);\r\n\r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// Pulse in counter port specifics.\r\nuint8_t pulseInBit;\r\nuint8_t pulseInPort;\r\n\r\n// button port specfics\r\nuint8_t buttonPort[3];\r\nuint8_t buttonBit[3];\r\n\r\n\r\nvoid initShield()\r\n{\r\n    /* Set each LED pin to outputs */\r\n  pinMode(LED[0], OUTPUT);\r\n  pinMode(LED[1], OUTPUT);\r\n  pinMode(LED[2], OUTPUT);\r\n  pinMode(LED[3], OUTPUT);\r\n  \r\n  /* Turn all the LED's off */\r\n  digitalWrite(LED[0], HIGH);\r\n  digitalWrite(LED[1], HIGH);\r\n  digitalWrite(LED[2], HIGH);\r\n  digitalWrite(LED[3], HIGH);\r\n\r\n  /* Set Segment display DIO pins to outputs */\r\n  pinMode(LATCH_PIN,OUTPUT);\r\n  pinMode(CLK_PIN,OUTPUT);\r\n  pinMode(DATA_PIN,OUTPUT); \r\n  \r\n  WriteValueToSegment(0,255);\r\n  \r\n  /* Set the buzzer pin to an output and turn the buzzer off */\r\n  pinMode(BEEPER_PIN, OUTPUT);\r\n  digitalWrite(BEEPER_PIN, HIGH);\r\n\r\n  /* Set button pins to input */\r\n  pinMode(A1, INPUT_PULLUP);\r\n  pinMode(A2, INPUT_PULLUP);\r\n  pinMode(A3, INPUT_PULLUP);\r\n  \r\n  int idx=0;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_1_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_1_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_2_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_2_PIN);\r\n  idx++;\r\n  buttonPort[idx] = digitalPinToPort(BUTTON_3_PIN);\r\n  buttonBit[idx] = digitalPinToBitMask(BUTTON_3_PIN);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\nvoid MultiFuncShield::initialize()\r\n{\r\n  initShield();\r\n\r\n  // piggy back on to timer0, which is already set to approx 1khz.\r\n  OCR0A = 0xAF;\r\n  TIMSK0 |= _BV(OCIE0A);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initSonar(byte level)\r\n{\r\n  sonarSmoothingLevel = level;\r\n  sonarDataIndex = 0;\r\n  \r\n  for (int i=0; i < 9; i++)\r\n  {\r\n    sonarData[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getSonarDataCm(byte triggerPin, byte echoPin)\r\n{\r\n  uint8_t bit = digitalPinToBitMask(echoPin);\r\n  uint8_t port = digitalPinToPort(echoPin);\r\n  uint8_t stateMask = (HIGH ? bit : 0); \r\n  \r\n  noInterrupts();\r\n  digitalWrite(triggerPin, LOW); //Low, high and low level take a short time to TrigPin pulse\r\n  delayMicroseconds(2);\r\n  digitalWrite(triggerPin, HIGH);\r\n  delayMicroseconds(10);\r\n  digitalWrite(triggerPin, LOW);\r\n  interrupts();\r\n \r\n  // wait for any previous pulse to end\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  // wait for the pulse to start\r\n  while ((*portInputRegister(port) & bit) != stateMask) ; \r\n\r\n  unsigned long timeStart = micros();\r\n  // wait for the pulse to stop\r\n  while ((*portInputRegister(port) & bit) == stateMask) ; \r\n\r\n  sonarData [sonarDataIndex] = ((micros() - timeStart) * 141) >> 13;  // (value * 1.00) / 58\r\n  \r\n  int medianReading;\r\n  \r\n  if (sonarSmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    medianReading  = sonarData [sonarDataIndex];\r\n  }\r\n  else if (sonarSmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 5)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf5(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4]);\r\n  }\r\n  else\r\n  {\r\n      sonarDataIndex++;\r\n      if (sonarDataIndex >= 9)\r\n      {\r\n        sonarDataIndex = 0;\r\n      }\r\n      medianReading = MedianOf9(sonarData[0], sonarData[1], sonarData[2], sonarData[3], sonarData[4], sonarData[5], sonarData[6], sonarData[7], sonarData[8]);\r\n  }\r\n  \r\n  return medianReading;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initLM35(byte level)\r\n{\r\n  lm35SmoothingLevel = level;\r\n  lm35DataIndex = 0;\r\n  \r\n  for (int i=0; i < 8; i++)\r\n  {\r\n    lm35Data[i] = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MultiFuncShield::getLM35Data()\r\n{\r\n  \r\n  lm35Data [lm35DataIndex] = analogRead(LM35_PIN);\r\n  \r\n  int reading =0;\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    reading  = lm35Data [lm35DataIndex];\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 4)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n     \r\n      for (int i=0; i<4; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  else\r\n  {\r\n      lm35DataIndex++;\r\n      if (lm35DataIndex >= 8)\r\n      {\r\n        lm35DataIndex = 0;\r\n      }\r\n\r\n      for (int i=0; i<8; i++)\r\n      {\r\n        reading = reading + lm35Data[i];\r\n      }\r\n  }\r\n  \r\n  if (lm35SmoothingLevel == SMOOTHING_NONE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 8;;\r\n  }\r\n  else if (lm35SmoothingLevel == SMOOTHING_MODERATE)\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 10;\r\n  }\r\n  else\r\n  {\r\n    return ((unsigned long)1250 * reading) >> 11;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::initPulseInCounter(byte pin, unsigned int timeOut, byte trigger)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n\r\n  pulseInBit = digitalPinToBitMask(pin);\r\n  pulseInPort = digitalPinToPort(pin);\r\n  \r\n  pulseInTimeOut = timeOut;\r\n  pulseInPin = pin;\r\n  pulseInPeriodCounter =timeOut;\r\n  pulseInPeriod_volatile =0;\r\n  pulseInPeriod_safe =0;\r\n  pulseInState =0;\r\n  pulseInTrigger = trigger;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  \r\n  pulseInWriteInProgress = 0;\r\n  pulseInEnabled = true;\r\n}\r\n\r\nvoid MultiFuncShield::disablePulseInCounter ()\r\n{\r\n  pulseInEnabled = false;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned int MultiFuncShield::getPulseInPeriod()\r\n{\r\n  unsigned int period;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  period = pulseInPeriod_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return period;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getPulseInTotalCount()\r\n{\r\n  unsigned long count;\r\n  \r\n  pulseInReadInProgress = 1;\r\n  count = pulseInTotalCount_safe;\r\n  pulseInReadInProgress =0;\r\n  \r\n  return count;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::resetPulseInTotalCount()\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTotalCount_volatile = 0;\r\n  pulseInTotalCount_safe = 0;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setPulseInTimeOut(unsigned int timeOut)\r\n{\r\n  pulseInWriteInProgress = 1;\r\n  pulseInTimeOut = timeOut;\r\n  pulseInWriteInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::queueButton (byte button)\r\n{\r\n  if (buttonBufferCount <= sizeof (buttonBuffer))\r\n  {\r\n    buttonBuffer [button_write_pos] = button;\r\n    buttonBufferCount++;\r\n    button_write_pos++;\r\n    \r\n    if (button_write_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_write_pos = 0;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte MultiFuncShield::getButton ()\r\n{\r\n  byte button = 0;\r\n  \r\n  if (buttonBufferCount > 0)\r\n  {\r\n    button = buttonBuffer [button_read_pos];\r\n    buttonBufferCount--;\r\n    button_read_pos++;\r\n    \r\n    if (button_read_pos >= sizeof (buttonBuffer))\r\n    {\r\n      button_read_pos = 0;\r\n    }\r\n  }\r\n  \r\n  return button;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::beep(unsigned int onPeriod, unsigned int offPeriod, byte cycles, unsigned int loopCycles, unsigned int loopDelayPeriod)\r\n{\r\n  cycles = cycles == 0 ? 1 : cycles;\r\n\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (onPeriod == 0)\r\n  {\r\n    digitalWrite(BEEPER_PIN, 1);  // turn off beeper immediately\r\n  }\r\n  \r\n  beeperState = 0;\r\n  beeperOnPeriodReloadValue = onPeriod * 10;\r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperPeriodCounter = onPeriod * 10;\r\n  \r\n  beeperCycleReloadValue = cycles;\r\n  beeperCycleCounter = cycles;\r\n  \r\n  beeperLoopCycleCounter = loopCycles;\r\n  beeperLoopDelayPeriodReloadValue = loopDelayPeriod * 10;\r\n  \r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setBeepOffPeriod(unsigned int offPeriod)\r\n{\r\n  beeperModifyInProgress = 1;  // must do this first before changing volatile fields.\r\n  \r\n  if (beeperState == 1)\r\n  {\r\n    if (offPeriod * 10 < beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter = offPeriod * 10;\r\n    }\r\n  }\r\n  \r\n  beeperOffPeriodReloadValue = offPeriod * 10;\r\n  beeperModifyInProgress = 0; // must do this last.\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void MultiFuncShield::setLedControlMask(byte controlMask)\r\n//{\r\n//  ledControlMask = controlMask;\r\n//}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::writeLeds(byte leds, byte lit)\r\n{\r\n  if (lit)\r\n  {\r\n    ledState = ledState | leds;\r\n    //ledControlMask = ledControlMask | leds;\r\n  }\r\n  else\r\n  {\r\n    ledState = ledState & (255 - leds);\r\n    //ledControlMask = ledControlMask & (255 - leds);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkLeds(byte leds, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled | leds;\r\n  }\r\n  else\r\n  {\r\n    ledBlinkEnabled = ledBlinkEnabled & (255 - leds);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setDisplayBrightness(byte level)\r\n{\r\n  displayBrightness = level >= DISPLAY_TIMER_SCALER_RELOAD ? DISPLAY_TIMER_SCALER_RELOAD-1 : level;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(int integer)\r\n{\r\n  char displayText[5] = {' ',' ',' ',' ',0};\r\n  \r\n  if (integer > 9999 || integer < -999)\r\n  {\r\n    displayText[3] = DISPLAY_OVERFLOW_ERROR;\r\n    write(displayText);\r\n  }\r\n  else if (integer == 0)\r\n  {\r\n    displayText[3] = '0';\r\n    write (displayText);\r\n  }\r\n  else\r\n  {\r\n    byte sign = 0;\r\n    if (integer < 0)\r\n    {\r\n      sign = 1;\r\n      integer = integer * -1;\r\n    }\r\n    \r\n    byte idx = 3;\r\n    for (; idx >=0 && integer !=0; integer /= 10, idx--)\r\n    {\r\n      displayText[idx]=(integer % 10) + '0';\r\n    }\r\n    \r\n    if (sign)\r\n    {\r\n      displayText[idx] = '-';\r\n    }\r\n    \r\n    write (displayText);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(float number, byte decimalPlaces)\r\n{\r\n  char outstr[7];\r\n  dtostrf(number, 4, decimalPlaces, outstr);\r\n \r\n  if (strlen(outstr) > 5)\r\n  {\r\n    outstr[0] = DISPLAY_OVERFLOW_ERROR;\r\n    outstr[1] = 0;\r\n  }\r\n  write(outstr,1);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::write(const char *text, byte rightJustify)\r\n{\r\n  byte displayBuf[] = {0,0,0,0}, *pBuf = displayBuf;\r\n  \r\n  byte idx =0;\r\n  \r\n  for (; *text != 0 && idx < sizeof(displayBuf); text++)\r\n  {\r\n    byte offset = 0;\r\n    \r\n    if (*text == '.')\r\n    {\r\n      if (idx > 0)\r\n      {\r\n        displayBuf[idx-1] = displayBuf[idx-1] & 127;\r\n      }\r\n      else\r\n      {\r\n        displayBuf[idx] = AsciiToSegmentValue(*text);\r\n        idx++;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      displayBuf[idx] = AsciiToSegmentValue(*text);\r\n      idx++;\r\n    }\r\n  }\r\n  \r\n  for (; idx < sizeof(displayBuf); idx++)\r\n  {\r\n    displayBuf[idx] = 255;\r\n  }\r\n  \r\n  // Copy display buffer to display memory\r\n  \r\n  if (rightJustify)\r\n  {\r\n    // right justify\r\n    int i_src = sizeof(displayBuf)-1;\r\n    int i_dst = sizeof(displayMemory)-1;\r\n    \r\n    for (; i_src >= 0 && displayBuf[i_src] == 255; i_src--) ;\r\n      \r\n    for (; i_src >= 0 && i_dst >= 0; i_src--, i_dst--)\r\n    {\r\n      displayMemory[i_dst] = displayBuf[i_src];\r\n    }\r\n    \r\n    for (; i_dst >= 0; i_dst--)\r\n    {\r\n      displayMemory[i_dst] = 255;\r\n    }\r\n  }\r\n  // left justify\r\n  else\r\n  {\r\n    for (int i =0; i < sizeof(displayBuf); i++)\r\n    {\r\n      displayMemory[i] = displayBuf[i];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::blinkDisplay(byte digits, byte enabled)\r\n{\r\n  if (enabled)\r\n  {\r\n    blinkEnabled = blinkEnabled | digits;\r\n  }\r\n  else\r\n  {\r\n    blinkEnabled = blinkEnabled & (255 - digits);\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::setTimer(unsigned long thousandths)\r\n{\r\n  timerWriteInProgress = 1;\r\n  timer_volatile = thousandths;\r\n  timerWriteInProgress = 0;\r\n  \r\n  timerReadInProgress = 1;\r\n  timer_safe = thousandths;\r\n  timerReadInProgress = 0;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nunsigned long MultiFuncShield::getTimer()\r\n{\r\n  unsigned long timer;\r\n  timerReadInProgress = 1;\r\n  timer = timer_safe;\r\n  timerReadInProgress = 0;\r\n\r\n  return timer;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::wait(unsigned long thousandths)\r\n{\r\n  setTimer(thousandths);\r\n  while (getTimer()) __asm__(\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\"\"nop\\n\\t\");\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::isrCallBack()\r\n{\r\n  byte displayEnabled = 1;\r\n  \r\n  displayTimerScaler--;\r\n  \r\n  if (displayTimerScaler == 0)\r\n  {\r\n    displayTimerScaler = DISPLAY_TIMER_SCALER_RELOAD;\r\n    \r\n    // Global bink control\r\n    if (blinkEnabled || ledBlinkEnabled)\r\n    {\r\n      blinkCounter++;\r\n      if (blinkState)\r\n      {\r\n        displayEnabled = 1;\r\n        if (blinkCounter > BLINK_ON_COUNT)\r\n        {\r\n          blinkState = 0;\r\n          blinkCounter = 0;\r\n          displayEnabled = 0;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        displayEnabled = 0;\r\n        if (blinkCounter > BLINK_OFF_COUNT)\r\n        {\r\n          blinkState = 1;\r\n          blinkCounter = 0;\r\n          displayEnabled = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    // Digit display blink control\r\n    if (blinkEnabled & (1 << displayIdx))\r\n    {\r\n      if (displayEnabled)\r\n      {\r\n        WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n      }\r\n      else\r\n      {\r\n        WriteValueToSegment(displayIdx, 255);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n    }\r\n    \r\n    displayIdx++;\r\n    if (displayIdx > sizeof(displayMemory)-1)\r\n    {\r\n      displayIdx = 0;\r\n    }\r\n    \r\n  \r\n    // LED output and blink control.\r\n    \r\n    byte ledOutputNew = (ledState & (displayEnabled ? 255 : 0) & ledBlinkEnabled) | (ledState & ~ledBlinkEnabled);\r\n    \r\n    if (ledOutputNew != ledOutput)\r\n    {\r\n      for (byte ledIdx = 0; ledIdx < 4; ledIdx++)\r\n      {\r\n        if ((ledOutputNew ^ ledOutput) & (1 << ledIdx))    // only set LED if its state has changed\r\n        {\r\n          if (ledBlinkEnabled & (1 << ledIdx))\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(displayEnabled && ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(displayEnabled && ledState & (1 << ledIdx)));\r\n          }\r\n          else\r\n          {\r\n            //digitalWrite(LED[ledIdx], !(ledState & (1 << ledIdx)));\r\n            writeLed(ledIdx, !(ledState & (1 << ledIdx)));\r\n          }\r\n        }\r\n      }\r\n      ledOutput = ledOutputNew;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    // Handle display brightness\r\n    if (displayTimerScaler == displayBrightness)\r\n    {\r\n      WriteValueToSegment(displayIdx == 0 ? 3 : displayIdx-1, 255);\r\n    }\r\n  }\r\n\r\n  // Beeper control.\r\n  \r\n  if (!beeperModifyInProgress && beeperOnPeriodReloadValue)\r\n  {    \r\n    if (beeperPeriodCounter == 0)\r\n    {\r\n      switch (beeperState)\r\n      {\r\n        case 0:  // on period\r\n              if (beeperOffPeriodReloadValue)\r\n              {\r\n                beeperPeriodCounter = beeperOffPeriodReloadValue;\r\n                beeperState = 1;\r\n                break;\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 1:  // off period\r\n              beeperCycleCounter--;\r\n              if (beeperCycleCounter)\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n                break;\r\n              }\r\n              else\r\n              {\r\n                beeperCycleCounter = beeperCycleReloadValue;\r\n                beeperPeriodCounter = beeperLoopDelayPeriodReloadValue;\r\n                beeperState = 2;\r\n                \r\n                if (beeperLoopDelayPeriodReloadValue)\r\n                {  \r\n                  break;\r\n                }\r\n              }\r\n              // Fall thru to next state immediately.\r\n        case 2:  // loop cycle delay period\r\n              if (beeperLoopCycleCounter == 0)  // loop beeper indefinitely\r\n              {\r\n                beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                beeperState = 0;\r\n              }\r\n              else\r\n              {\r\n                beeperLoopCycleCounter--;\r\n                if (beeperLoopCycleCounter == 0)\r\n                {          \r\n                  beeperOnPeriodReloadValue = 0;    // beeper activity has now ended.\r\n                  //digitalWrite(BEEPER_PIN, 1);\r\n                  writeBeeper(1);\r\n                }\r\n                else\r\n                {\r\n                  beeperPeriodCounter = beeperOnPeriodReloadValue;\r\n                  beeperState = 0;\r\n                }\r\n              }\r\n              break;\r\n      }\r\n    }\r\n    \r\n    if (beeperPeriodCounter)\r\n    {\r\n      beeperPeriodCounter--;\r\n    }\r\n    \r\n    if (beeperState == 0)\r\n    {\r\n      // beep on\r\n      //digitalWrite(BEEPER_PIN, 0);\r\n      writeBeeper(0);\r\n    }\r\n    else\r\n    {\r\n      // beep off\r\n      //digitalWrite(BEEPER_PIN, 1);\r\n      writeBeeper(1);\r\n    }\r\n  }\r\n   \r\n\r\n  // Bump button sample interval counter\r\n  \r\n  if (buttonSampleIntervalCounter++ >= BUTTON_SAMPLE_INTERVAL)\r\n  {\r\n    buttonSampleIntervalCounter =0;\r\n    \r\n    byte btnStateNow;\r\n    \r\n    for (int i=0; i < BUTTON_COUNT; i++)\r\n    {\r\n      //btnStateNow = !digitalRead(buttonPins[i]);\r\n      //btnStateNow = !readButton(i);\r\n      btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n      \r\n      // If button state has changed, action the change.\r\n      if (buttonState[i] != btnStateNow)\r\n      {\r\n        // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n        if (btnStateNow)\r\n        {\r\n          queueButton((i+1) | BUTTON_PRESSED_IND);\r\n        }\r\n        else\r\n        {\r\n          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.\r\n          if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL))\r\n          {\r\n            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);\r\n          }\r\n          else\r\n          {\r\n            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n          }\r\n          buttonPressTime[i] = 0;\r\n        }\r\n        buttonState[i] = btnStateNow;\r\n      }\r\n\r\n      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  \r\n      if (btnStateNow)\r\n      {\r\n        if (buttonPressTime[i] > (1000 / BUTTON_SAMPLE_INTERVAL) && (buttonPressTime[i] & 3) == 0)\r\n        {\r\n          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);\r\n        }\r\n        \r\n        if (buttonPressTime[i] < 65535)\r\n        {\r\n          buttonPressTime[i]++;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  // Pulse in processing\r\n  \r\n  if (pulseInEnabled && !pulseInWriteInProgress)\r\n  {\r\n    //byte pulseInStateNow = digitalRead(pulseInPin);\r\n    byte pulseInStateNow = (*portInputRegister(pulseInPort) & pulseInBit ? 1 : 0);\r\n    \r\n    // Has the state of the pulse changed?\r\n    if ((pulseInState != pulseInStateNow) && (pulseInStateNow == pulseInTrigger))\r\n    {\r\n      pulseInTotalCount_volatile++;\r\n      \r\n      pulseInPeriod_volatile = (pulseInPeriodCounter >= pulseInTimeOut ? 0 : pulseInPeriodCounter);\r\n      pulseInPeriodCounter = 0;\r\n    }\r\n    else\r\n    {\r\n      if (pulseInPeriodCounter < pulseInTimeOut)\r\n      {\r\n        pulseInPeriodCounter++;\r\n      }\r\n      else\r\n      {\r\n        pulseInPeriod_volatile = 0;\r\n      }\r\n    }\r\n\r\n    if (!pulseInReadInProgress)\r\n    {\r\n      pulseInPeriod_safe = pulseInPeriod_volatile;\r\n      pulseInTotalCount_safe = pulseInTotalCount_volatile;\r\n    }\r\n      \r\n    if (pulseInState != pulseInStateNow)\r\n    {\r\n      pulseInState = pulseInStateNow;\r\n    }\r\n  }\r\n\r\n  // Bump the count down timer.\r\n  if (timer_volatile && !timerWriteInProgress)\r\n  {\r\n    timer_volatile--;\r\n  }\r\n  \r\n  if (!timerReadInProgress)\r\n  {\r\n    timer_safe = timer_volatile;\r\n  }\r\n  \r\n  if (userInterrupt)\r\n  {\r\n    userInterrupt();\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualDisplayRefresh()\r\n{\r\n  WriteValueToSegment(displayIdx, displayMemory[displayIdx]);\r\n  \r\n  displayIdx++;\r\n  if (displayIdx > sizeof(displayMemory)-1)\r\n  {\r\n    displayIdx = 0;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nvoid MultiFuncShield::manualButtonHandler()\r\n{\r\n  byte btnStateNow;\r\n  \r\n  for (int i=0; i < BUTTON_COUNT; i++)\r\n  {\r\n    //btnStateNow = !digitalRead(buttonPins[i]);\r\n    btnStateNow = !(*portInputRegister(buttonPort[i]) & buttonBit[i]);\r\n    // If button state has changed, action the change.\r\n\r\n    if (buttonState[i] != btnStateNow)\r\n    {\r\n      // if button state changes to pressed, queue SHORT PRESS to buffer.\r\n      if (btnStateNow)\r\n      {\r\n        queueButton((i+1) | BUTTON_PRESSED_IND);\r\n      }\r\n      else\r\n      {\r\n        // otherwise button state has changed to up, queue SHORT RELEASE state to buffer.\r\n        queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);\r\n      }\r\n      buttonState[i] = btnStateNow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n//void isrWrapper ()\r\n//{\r\n//  MFS.isrCallBack();\r\n//}\r\n\r\nSIGNAL(TIMER0_COMPA_vect)\r\n{\r\n  MFS.isrCallBack();\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nbyte AsciiToSegmentValue (byte ascii)\r\n{\r\n  byte segmentValue = 182;\r\n  \r\n  if (ascii >= '0' && ascii <= '9')\r\n  {\r\n    segmentValue = SEGMENT_MAP_DIGIT[ascii - '0'];\r\n  }\r\n  else if (ascii >= 'a' && ascii <='z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'a'];\r\n  }\r\n  else if (ascii >= 'A' && ascii <='Z')\r\n  {\r\n    segmentValue = SEGMENT_MAP_ALPHA[ascii - 'A'];\r\n  }\r\n  else\r\n  {\r\n    switch (ascii)\r\n    {\r\n      case '-':\r\n        segmentValue = 191;\r\n        break;\r\n      case '.':\r\n        segmentValue = 127;\r\n        break;\r\n      case '_':\r\n        segmentValue = 247;\r\n        break;\r\n      case ' ':\r\n        segmentValue = 255;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return segmentValue;\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\nint MedianOf5(int s0, int s1, int s2, int s3, int s4)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  \r\n  if (s0 > s3)\r\n  {\r\n    s3 = s0;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    s1 = s4;\r\n  }\r\n  \r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s2 = s3;\r\n  }\r\n\r\n  return s2;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n// Find the median value, given nine data samples. \r\nint MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8)\r\n{\r\n  int tmp;\r\n\r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s0 > s1)\r\n  {\r\n    tmp = s0;\r\n    s0 = s1;\r\n    s1 = tmp;\r\n  }\r\n  if (s3 > s4)\r\n  {\r\n    tmp = s3;\r\n    s3 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s6 > s7)\r\n  {\r\n    tmp = s6;\r\n    s6 = s7;\r\n    s7 = tmp;\r\n  }\r\n  \r\n  if (s1 > s2)\r\n  {\r\n    tmp = s1;\r\n    s1 = s2;\r\n    s2 = tmp;\r\n  }\r\n  if (s4 > s5)\r\n  {\r\n    tmp = s4;\r\n    s4 = s5;\r\n    s5 = tmp;\r\n  }\r\n  if (s7 > s8)\r\n  {\r\n    tmp = s7;\r\n    s7 = s8;\r\n    s8 = tmp;\r\n  }\r\n  \r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  if (s4 > s7)\r\n  {\r\n    tmp = s4;\r\n    s4 = s7;\r\n    s7 = tmp;\r\n  }\r\n  if (s5 > s8)\r\n  {\r\n    s5 = s8;\r\n  }\r\n  if (s0 > s3)\r\n  {\r\n    tmp = s0;\r\n    s3 = tmp;\r\n  }\r\n  \r\n  if (s1 > s4)\r\n  {\r\n    tmp = s1;\r\n    s1 = s4;\r\n    s4 = tmp;\r\n  }\r\n  if (s2 > s5)\r\n  {\r\n    s2 = s5;\r\n  }\r\n  if (s3 > s6)\r\n  {\r\n    tmp = s3;\r\n    s3 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s4 > s7)\r\n  {\r\n    s4 = s7;\r\n  }\r\n  if (s1 > s3)\r\n  {\r\n    s3 = s1;\r\n  }\r\n  \r\n  if (s2 > s6)\r\n  {\r\n    tmp = s2;\r\n    s2 = s6;\r\n    s6 = tmp;\r\n  }\r\n  \r\n  if (s2 > s3)\r\n  {\r\n    s3 = s2;\r\n  }\r\n  if (s4 > s6)\r\n  {\r\n    s4 = s6;\r\n  }\r\n  \r\n  if (s3 > s4)\r\n  {\r\n    s4 = s3;\r\n  }\r\n  return s4;\r\n}\r\n\r\n/* ---------------------------------------------------------------------- */\r\n\r\n#if defined(__AVR_ATmega328P__)      // Uno\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTD, 7);\r\n      bitClear(PORTD, 7);          \r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 3, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 3, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 2, value);\r\n      break;\r\n      }\r\n  }\r\n\r\n#elif defined(__AVR_ATmega32U4__)   // Leonardo\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTD, 4);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTB, 4, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTE, 6);\r\n      bitClear(PORTE, 6);\r\n    } \r\n\r\n    bitSet(PORTD, 4);\r\n  }\r\n  \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTD, 0, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTC, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTD, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n      }\r\n  }\r\n  \r\n#elif defined(__AVR_ATmega2560__) // Mega 2560\r\n\r\n/* Write a value to one of the 4 digits of the display */\r\n/*\r\nvoid WriteValueToSegment(byte Segment, byte Value)\r\n{\r\n  digitalWrite(LATCH_PIN,LOW);\r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, Value); \r\n  shiftOut(DATA_PIN, CLK_PIN, MSBFIRST, SEGMENT_SELECT[Segment] );\r\n  digitalWrite(LATCH_PIN,HIGH);\r\n}\r\n*/\r\n\r\n  /* Write a value to one of the 4 digits of the display */\r\n  void WriteValueToSegment(byte Segment, byte Value)\r\n  {\r\n    bitClear(PORTG, 5);\r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(Value & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);\r\n    } \r\n\r\n    for (uint8_t i = 0; i < 8; i++)  {\r\n      bitWrite(PORTH, 5, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));\r\n      bitSet(PORTH, 4);\r\n      bitClear(PORTH, 4);          \r\n    } \r\n\r\n    bitSet(PORTG, 5);\r\n  }\r\n \r\n  void writeBeeper (byte value)\r\n  {\r\n    bitWrite(PORTE, 5, value);\r\n  }\r\n  \r\n  void writeLed(byte ledIdx, byte value)\r\n  {\r\n    switch (ledIdx)\r\n    {\r\n    case 0:\r\n      bitWrite(PORTB, 7, value);\r\n      break;\r\n    case 1:\r\n      bitWrite(PORTB, 6, value);\r\n      break;\r\n    case 2:\r\n      bitWrite(PORTB, 5, value);\r\n      break;\r\n    case 3:\r\n      bitWrite(PORTB, 4, value);\r\n      break;\r\n      }\r\n  }\r\n#endif\r\n"}}}Content-Length: 9312

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","languageId":"cpp","version":1,"text":"#ifndef MultiFuncShield_h_\r\n#define MultiFuncShield_h_\r\n\r\n#define MULTI_FUNCTION_SHIELD_LIB_1_3\r\n\r\n#include \"Arduino.h\"\r\n\r\n#define ON  1\r\n#define OFF  0\r\n\r\n#define LED_1_PIN     13\r\n#define LED_2_PIN     12\r\n#define LED_3_PIN     11\r\n#define LED_4_PIN     10\r\n#define POT_PIN       0\r\n#define BEEPER_PIN    3\r\n#define BUTTON_1_PIN  A1\r\n#define BUTTON_2_PIN  A2\r\n#define BUTTON_3_PIN  A3\r\n#define LATCH_PIN     4\r\n#define CLK_PIN       7\r\n#define DATA_PIN      8\r\n#define LM35_PIN      A4\r\n\r\n#define DIGIT_1  1\r\n#define DIGIT_2  2\r\n#define DIGIT_3  4\r\n#define DIGIT_4  8\r\n#define DIGIT_ALL  15\r\n\r\n#define LED_1  1\r\n#define LED_2  2\r\n#define LED_3  4\r\n#define LED_4  8\r\n#define LED_ALL  15\r\n\r\n// button state indicators\r\n#define BUTTON_PRESSED_IND        (0 << 6)\r\n#define BUTTON_SHORT_RELEASE_IND  (1 << 6)\r\n#define BUTTON_LONG_PRESSED_IND   (2 << 6)\r\n#define BUTTON_LONG_RELEASE_IND   (3 << 6)\r\n\r\n#define BUTTON_1_PRESSED        (1 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_1_SHORT_RELEASE  (1 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_1_LONG_PRESSED   (1 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_1_LONG_RELEASE   (1 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_2_PRESSED        (2 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_2_SHORT_RELEASE  (2 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_2_LONG_PRESSED   (2 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_2_LONG_RELEASE   (2 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_3_PRESSED        (3 |  BUTTON_PRESSED_IND)\r\n#define BUTTON_3_SHORT_RELEASE  (3 |  BUTTON_SHORT_RELEASE_IND)\r\n#define BUTTON_3_LONG_PRESSED   (3 |  BUTTON_LONG_PRESSED_IND)\r\n#define BUTTON_3_LONG_RELEASE   (3 |  BUTTON_LONG_RELEASE_IND)\r\n\r\n#define BUTTON_COUNT            3\r\n#define SMOOTHING_NONE          0\r\n#define SMOOTHING_MODERATE      1\r\n#define SMOOTHING_STRONG        2\r\n\r\n\r\nclass MultiFuncShield\r\n{\r\n\r\n  public:\r\n    // Pointer to user interrupt with frequency of 1khz.\r\n    void (*userInterrupt)() = NULL;\r\n      \r\n    // Initialize
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
s this instance, but interrupt based features are not available.\r\n    void initialize();\r\n    \r\n    // For internal use only.\r\n    void isrCallBack();\r\n\r\n    // Initiates a millisecond countdown timer.\r\n    void setTimer (unsigned long thousandths);\r\n\r\n    // Gets the current value of the countdown timer.\r\n    unsigned long getTimer();\r\n\r\n    // Initiates and waits for millisecond countdown timer to reach 0.\r\n    void wait(unsigned long thousandths);\r\n    \r\n    // Writes to the LED digit display.\r\n    void write(const char *textstring, byte rightJustify =0);\r\n    void write(int integer);\r\n    void write(float number, byte decimalPlaces = 1);\r\n    \r\n    // Manually refreshes the Led digit display.\r\n    // Not to be used whilst interrupt based features are available.\r\n    void manualDisplayRefresh();\r\n    \r\n    // Blinks the digits on the LED digit display.\r\n    void blinkDisplay(byte digits,           // use bitwise or, e.g. DIGIT_1 | DIGIT_2\r\n                      byte enabled = ON      // turns on/off the blinking\r\n                    );\r\n\r\n    void setDisplayBrightness(byte level);  // 0 = max, 3 = min\r\n    \r\n    // Turns LEDs on or off.\r\n    void writeLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte lit                  // ON or OFF\r\n                   );\r\n\r\n    // Blinks the LEDs.\r\n    void blinkLeds(byte leds,                // use bitwise or, e.g. LED_1 | LED_2\r\n                   byte enabled = ON         // ON or OFF\r\n                   );\r\n    \r\n    // Engage the beeper, which is managed in the background. Period timing is in 100th of second\r\n    void beep(unsigned int onPeriod = 20, unsigned int offPeriod = 0, byte cycles = 1, unsigned int loopCycles = 1 /* 0=indefinitely */, unsigned int loopDelayPeriod =0);\r\n\r\n    // Use this to set the off period whilst the beeper is engaged,\r\n    void setBeepOffPeriod(unsigned int offPeriod);\r\n\r\n    // Queues a button action to the button queue, e.g BUTTON_1_PRESSED\r\n    void queueButton (byte button);\r\n\r\n    // Pulls a button action from the button queue.\r\n    byte getButton();\r\n\r\n    // Queues button short press and release actions. Long button presses are not supported, and long releases are reported as short releases.\r\n    // Should not be used whilst interrupt based features are available.\r\n    void manualButtonHandler();\r\n    \r\n    // Initializes the pulse counter. Used for counting pulses applied to an input pin. Max pulse frequency 500hz.\r\n    void initPulseInCounter(byte pin = BUTTON_1_PIN,        // input pin\r\n                            unsigned int timeOut = 3000,    // the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n                            byte trigger = LOW              // trigger counter on either rising or falling edge\r\n                            );\r\n\r\n    void disablePulseInCounter();\r\n    \r\n    // Gets the period of the most recent pulse (in milliseconds).\r\n    unsigned int getPulseInPeriod();\r\n\r\n    // Gets the total number pulses counted.\r\n    unsigned long getPulseInTotalCount();\r\n\r\n    // Resets the pulse counter to 0.\r\n    void resetPulseInTotalCount();\r\n\r\n    // Sets the pulse in timeout, which is the number of milliseconds to wait for a pulse, before resetting pulse in period to 0.\r\n    void setPulseInTimeOut(unsigned int timeOut);\r\n\r\n    // Initializes the sonar reading feature. Needs HC-SR04 sonar module.\r\n    void initSonar(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong.\r\n\r\n    // Gets the distance measured in centimeters, using HC-SR04 sonar module.\r\n    unsigned int getSonarDataCm(byte triggerPin, byte echoPin);\r\n\r\n    // Initializes temperature reading feature. Needs LM35 sensor. Must remove jumper J1 from shield.\r\n    void initLM35(byte level = SMOOTHING_MODERATE); // level 0=none, 1=moderate, 2=strong\r\n\r\n    // Gets the temperature reading in 1 tenths of a centigrade.\r\n    int getLM35Data();\r\n    \r\n  private:\r\n    volatile byte timerReadInProgress = 0;\r\n    volatile byte timerWriteInProgress = 0;\r\n    \r\n    //const byte buttonPins[3] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};  // must correspond to button macros above\r\n    \r\n    volatile byte buttonBuffer[BUTTON_COUNT * 2];\r\n    volatile char buttonBufferCount = 0;\r\n    volatile byte button_write_pos = 0;\r\n    volatile byte button_read_pos = 0;\r\n    \r\n    unsigned int buttonSampleIntervalCounter =0;\r\n    byte buttonState[BUTTON_COUNT] = {0,0,0};    // current up or down state\r\n    unsigned int buttonPressTime[BUTTON_COUNT] = {0,0,0};\r\n    \r\n    volatile unsigned long timer_volatile = 0;    // count down timer 1000th of a second resolution.\r\n    volatile unsigned long timer_safe = 0;\r\n    \r\n    volatile byte beeperModifyInProgress = 0;\r\n    volatile byte beeperState =0;  // 0=on period; 1=off period\r\n    volatile unsigned int beeperOnPeriodReloadValue =0;\r\n    volatile unsigned int beeperOffPeriodReloadValue =0;\r\n    volatile unsigned int beeperPeriodCounter = 0;\r\n    volatile byte beeperCycleReloadValue = 0;\r\n    volatile byte beeperCycleCounter =0;\r\n    volatile unsigned int beeperLoopCycleCounter =0;\r\n    volatile unsigned int beeperLoopDelayPeriodReloadValue =0;\r\n    \r\n    byte displayIdx = 0;\r\n    byte blinkEnabled = 0;  // least significant bits mapped to display digits.\r\n    byte blinkState = 0;\r\n    byte blinkCounter = 0;\r\n    \r\n    byte ledState =0;              // least significant bits mapped to LEDs\r\n    byte ledBlinkEnabled =0;       // least significant bits mapped to LEDs\r\n    byte ledOutput=0;              // current led outputs (taking into consideration blink)\r\n\r\n    volatile byte pulseInEnabled = false;\r\n    volatile byte pulseInReadInProgress =0;\r\n    volatile byte pulseInWriteInProgress =0;\r\n    \r\n    volatile unsigned int pulseInTimeOut = 3000;  // time frame for measuring pulse period.\r\n    volatile byte pulseInPin = BUTTON_1_PIN;\r\n    volatile unsigned int pulseInPeriodCounter = 3000;\r\n    volatile byte pulseInTrigger = LOW; // trigger on LOW or HIGH\r\n    volatile unsigned int pulseInPeriod_volatile =0;\r\n    volatile unsigned int pulseInPeriod_safe =0;\r\n    volatile byte pulseInState =0;\r\n    volatile unsigned long pulseInTotalCount_volatile = 0;\r\n    volatile unsigned long pulseInTotalCount_safe = 0;\r\n    \r\n    byte sonarSmoothingLevel = SMOOTHING_MODERATE;\r\n    byte lm35SmoothingLevel = SMOOTHING_MODERATE;\r\n};\r\n\r\nextern MultiFuncShield MFS;\r\n\r\n// returns median of 5 data samples.\r\nextern int MedianOf5(int s0, int s1, int s2, int s3, int s4);\r\n\r\n// returns median of 9 data samples.\r\nextern int MedianOf9(int s0, int s1, int s2, int s3, int s4, int s5, int s6, int s7, int s8);\r\n\r\n#endif\r\n"}}}Content-Length: 195

{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":387},"contentChanges":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"rangeLength":0,"text":"S"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}Content-Length: 195

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":388},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"rangeLength":0,"text":"e"}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":1,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 189

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c:/Users/banks/Documents/Arduino/libraries/MultiFuncShield-Library/MultiFuncShield.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 373

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'SMFS'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":2,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 195

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":389},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"rangeLength":0,"text":"r"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 195

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":390},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"rangeLength":0,"text":"i"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 195

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":391},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"rangeLength":0,"text":"a"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}Content-Length: 195

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":392},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"rangeLength":0,"text":"l"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}Content-Length: 195

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}Content-Length: 294

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 374

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'SeMFS'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":3,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 375

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'SerMFS'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":4,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 376

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":9}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'SeriMFS'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":5,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 378

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'SeriaMFS'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":6,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 775

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'SerialMFS'; did you mean 'Serial'? (fix available)\n\nC:\\Users\\banks\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.3\\cores\\arduino\\HardwareSerial.h:143:25:\nnote: 'Serial' declared here"},{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":22}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'initialize' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}Content-Length: 586

{"id":7,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":392}}}Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":393},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"rangeLength":0,"text":"."}]}}Content-Length: 278

{"jsonrpc":"2.0","id":9,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":9},"context":{"triggerKind":2,"triggerCharacter":"."}}}Content-Length: 196

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 6517

{"id":9,"result":{"isIncomplete":false,"items":[{"label":" available()","kind":2,"detail":"int","sortText":"3ee51eb8available","filterText":"available","insertText":"available()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"available()"}},{"label":" availableForWrite()","kind":2,"detail":"int","sortText":"3ee51eb8availableForWrite","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"availableForWrite()"}},{"label":" begin(…)","kind":2,"detail":"[2 overloads]","sortText":"3ee51eb8begin","filterText":"begin","insertText":"begin($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"begin($0)"}},{"label":" end()","kind":2,"detail":"void","sortText":"3ee51eb8end","filterText":"end","insertText":"end()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"end()"}},{"label":" flush()","kind":2,"detail":"void","sortText":"3ee51eb8flush","filterText":"flush","insertText":"flush()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"flush()"}},{"label":" peek()","kind":2,"detail":"int","sortText":"3ee51eb8peek","filterText":"peek","insertText":"peek()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"peek()"}},{"label":" read()","kind":2,"detail":"int","sortText":"3ee51eb8read","filterText":"read","insertText":"read()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"read()"}},{"label":" write(…)","kind":2,"detail":"[5 overloads]","sortText":"3ee51eb8write","filterText":"write","insertText":"write($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"write($0)"}},{"label":" write(…)","kind":2,"detail":"[3 overloads]","sortText":"3ee51eb8write","filterText":"write","insertText":"write($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"write($0)"}},{"label":" clearWriteError()","kind":2,"detail":"void","sortText":"3f651eb8clearWriteError","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"clearWriteError()"}},{"label":" find(…)","kind":2,"detail":"[5 overloads]","sortText":"3f651eb8find","filterText":"find","insertText":"find($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"find($0)"}},{"label":" findUntil(…)","kind":2,"detail":"[4 overloads]","sortText":"3f651eb8findUntil","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"findUntil($0)"}},{"label":" getTimeout()","kind":2,"detail":"unsigned long","sortText":"3f651eb8getTimeout","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"getTimeout()"}},{"label":" getWriteError()","kind":2,"detail":"int","sortText":"3f651eb8getWriteError","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"getWriteError()"}},{"label":" parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","kind":2,"detail":"float","sortText":"3f651eb8parseFloat","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"parseFloat()"}},{"label":" parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","kind":2,"detail":"long","sortText":"3f651eb8parseInt","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"parseInt()"}},{"label":" print(…)","kind":2,"detail":"[11 overloads]","sortText":"3f651eb8print","filterText":"print","insertText":"print($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"print($0)"}},{"label":" println(…)","kind":2,"detail":"[12 overloads]","sortText":"3f651eb8println","filterText":"println","insertText":"println($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"println($0)"}},{"label":" readBytes(…)","kind":2,"detail":"[2 overloads]","sortText":"3f651eb8readBytes","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"readBytes($0)"}},{"label":" readBytesUntil(…)","kind":2,"detail":"[2 overloads]","sortText":"3f651eb8readBytesUntil","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"readBytesUntil($0)"}},{"label":" readString()","kind":2,"detail":"String","sortText":"3f651eb8readString","filterText":"readString","insertText":"readString()","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"readString()"}},{"label":" readStringUntil(char terminator)","kind":2,"detail":"String","sortText":"3f651eb8readStringUntil","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"readStringUntil(${1:char terminator})"}},{"label":" setTimeout(unsigned long timeout)","kind":2,"detail":"void","sortText":"3f651eb8setTimeout","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"textEdit":{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"newText":"setTimeout(${1:unsigned long timeout})"}}]},"jsonrpc":"2.0"}Content-Length: 371

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":12}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'MFS' in 'HardwareSerial'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":10,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 319

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":394},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"rangeLength":0,"text":"b"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 587

{"id":11,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":395},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"rangeLength":0,"text":"e"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":11}}Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":396},"contentChanges":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":11}},"rangeLength":0,"text":"g"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":12}}Content-Length: 196

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":397},"contentChanges":[{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":12}},"rangeLength":0,"text":"i"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":13}}Content-Length: 196

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":398},"contentChanges":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":13}},"rangeLength":0,"text":"n"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":14}}Content-Length: 196

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":12,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":13,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":14,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":15,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":399},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"rangeLength":0,"text":" "}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}Content-Length: 196

{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":16,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":400},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 196

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":17,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":401},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"rangeLength":0,"text":"()"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":18,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","id":19,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"position":{"line":2,"character":15},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 92

{"id":19,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":401}}}Content-Length: 297

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":20,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":402},"contentChanges":[{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"rangeLength":0,"text":"9"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":21,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":403},"contentChanges":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"rangeLength":0,"text":"6"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":22,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":404},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"rangeLength":0,"text":"0"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":405},"contentChanges":[{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"rangeLength":0,"text":"0"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":23}}Content-Length: 196

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":23,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"}]},"jsonrpc":"2.0"}Content-Length: 587

{"id":24,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":405}}}Content-Length: 297

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":20},"end":{"line":2,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":406},"contentChanges":[{"range":{"start":{"line":2,"character":20},"end":{"line":2,"character":20}},"rangeLength":0,"text":";"}]}}Content-Length: 196

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}Content-Length: 587

{"id":27,"result":[{"name":"setup","kind":12,"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"selectionRange":{"start":{"line":0,"character":5},"end":{"line":0,"character":10}}},{"name":"loop","kind":12,"range":{"start":{"line":5,"character":0},"end":{"line":7,"character":1}},"selectionRange":{"start":{"line":5,"character":5},"end":{"line":5,"character":9}}},{"name":"foo","kind":12,"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":9,"character":5},"end":{"line":9,"character":8}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 745

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","diagnostics":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'MFS'"},{"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tialize'"},{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 483

{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":28}},"message":"Use of undeclared identifier 'tialize'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":406}}}Content-Length: 297

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"},"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino","version":407},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":19}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 196

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/banks/Documents/Arduino/Multifunction%20Shield/LibraryTests/LibraryTests.ino"}}}
>>>
Content-Length: 114

{"id":30,"error":{"code":-32602,"message":"trying to get AST for non-added document","data":null},"jsonrpc":"2.0"}